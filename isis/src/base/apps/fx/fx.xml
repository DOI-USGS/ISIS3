<?xml version="1.0" encoding="UTF-8"?>

<application name="fx" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://isis.astrogeology.usgs.gov/Schemas/Application/application.xsd">
  <brief>
    Apply generalized arithmetic operations using multiple cube files
  </brief>

  <description>
    <p>
    Fx allows general arithmetic operations to be performed on an arbitrary
    number of input cubes.  Fx loads whatever input files are specified, applies
    a user defined equation to those files and writes the results to an output
    file.  The input file can be a single band or multiple band cube file. If the
    band number is not specified for the multiple band cube file, then the
    equation is applied to all the bands within the file.
    </p>
    <p>
    Five files or fewer can be entered for parameters F1 to F5 under the "Input
    Cube Files" section to specify the input data.  A second method to specify
    data is to include an arbitrary number of
    files in a file list and enter the list name in the fromlist parameter that
    is only visible upon selecting the MODE list located under "File I/O Mode."
    If the user selects "OUPUTONLY" under "File I/O Mode" then an output file is
    created based on an equation provided by the user.  The user will also need
    to specify the number of lines, samples, and bands of the output file.
    </p>
    <p>
      The command line parsing has been improved to handle escape sequences and
      support arrays better.  The equation parser is case insensitive, ignores
      whitespace, and converts all braces to parentheses.  Parameter values,
      when quoted, no longer need the quotes escaped.
    </p>

    <blockquote>
     <small>
      <p>
	The command line syntax changes are as follows (with TCSH/BASH examples):
      </p>

      <p>
	TCSH/BASH <br />
	Before: crop from=\"some file.cub\" to=\"output file.cub\"<br />
	Now: crop from="some file.cub" to="output file.cub"<br />
      </p>

      <p>
	Please note that the dollar sign ($) still requires a backslash for batchlist
	variables.  Array values, for programs such as <i>spiceinit</i>, will be the same.
      </p>

      <p>
	TCSH<br />
	Before: spiceinit from=input.cub ck='(file1.bc,file2.bc)'<br />
	Now: spiceinit from=input.cub ck='(file1.bc,file2.bc)'<br />
      </p>

      <p>
	BASH<br />
	Before: spiceinit from=input.cub ck='(file1.bc,file2.bc)'<br />
	Now: spiceinit from=input.cub ck='(file1.bc,file2.bc)'<br />
      </p>

      <p>
	An escape character "\" has been added to differentiate a first parenthesis
	from the beginning of an array sequence.
      </p>

      <p>
	TCSH<br />
	Before: fx equation='"(1+2)/2"' <br />
	Now: fx equation='\(1+2)/2' <br />
	</p>

      <p>
	BASH<br />
	Before: fx equation='"(1+2)/2"' <br />
	Now: fx equation=\(1+2)/2 <br />
	</p>

      <p>
	The equation string entered within a GUI interface may not work if the
	entire string is copied, pasted, and executed at the command line. If the first
	character in the equation is a "(" then it must be prefixed by a "\"
	when executing as a command line, but the remaining parentheses do not
	need to be prefixed with a backslash.
      </p>

      <p>
	Example:
      </p>

      <p>
	This equation string works inside the fx GUI:<br />
	fx f1=BIFQF23N004_D218_T069S02_V02_I3.cub to=tt.cub
	equation=(f1*(f1>.004))
      </p>

      <p>
	These equation strings fail on the command line: <br />
	fx f1=BIFQF23N004_D218_T069S02_V02_I3.cub to=tt.cub
	equation=(f1*(f1>.004)) <br />
	<br/>
	fx f1=BIFQF23N004_D218_T069S02_V02_I3.cub to=tt.cub
	equation="(f1*(f1>.004))"
      </p>

      <p>
	This equation string works on the command line: <br />
	fx f1=BIFQF23N004_D218_T069S02_V02_I3.cub to=tt.cub
	equation="\(f1*(f1>.004))"<br />
      </p>

      <p>
        <b>Note:</b> The use of negative numbers within an equation could cause
	problems in the latest version of ISIS.  The "--" or "neg" operators are
	specifically designed to handle negative numbers within an equation. If an
	equation includes a negative number, prefix the value with a "--" instead
	of "-" in the equation.
	<br/><br/>
	Example:<br/><br/>
	equation="f1*(<b>--0.018</b>*sec*(f3*pi/180)^2+f2+4.4234)" <br/><br/>
	 or <br/><br/>
	equation="f1*(<b>neg(0.018)</b>*sec*(f3*pi/180)^2+f2+4.4234)" <br/>
      </p>

      <p>
	For additional information see <b>Command Line Usage</b> under the User
	Documentation web pages for ISIS.<br />

	Note: Some instructions may be outdated.
      </p>
     </small>
    </blockquote>

    <p>
      The equation parser is case insensitive and all braces, such as
      "[{[{ }]}]" are converted to parentheses "(((( ))))" first.  Whitespace
      is ignored.  Currently, you must explicitly state all multiplication
      operations (e.g. 2pi will not work, but 2*pi will).  The modulus (%),
      AND, and OR operators are not implemented yet.  Functions
      such as pha, ina, ema, lat, lon, radius, and resolution require a
      <def>Level1</def> input file with <def>SPICE</def> information in the
      image labels.  That is, the program <i>spiceinit</i> should be executed on the
      input files before using these functions.  For <def>Level2</def> images,
      the backplanes containing the photometric and spatial information must be
      present.  This is normally performed with the program <i>phocube</i>
      before the image is projected to a <def>map projection</def>.
    </p>

    <p>
      <b>Requirements and result of operators</b>
       <br /><br />
      The following operators return a "0" or "1" DN value when they are used
      in the equations:
    </p>
    <p>
     <blockquote>
       &lt; , &gt;, &lt;=, &gt;=, ==, !=
     </blockquote>
    </p>
    <p>
      The following operators are used to shift pixels left or right, and move
      the entire image to different sample and line positions:
    </p>
    <p>
     <blockquote>
       &lt;&lt;, &gt;&gt;  <br /><br />
       Example: <br />
       <blockquote>
         Some pixels are set to NULL depending on whether the left or right pixel
	 shift operation is used. For example, the left image below is the input file,
	 and the right image is the result of "equation = f1 &lt;&lt; 10", which shows a
	 10 pixel shift to the left. <br />
	 <br/>
	 Sample 1 line 1 of the left image maps outside the image area of the right image; therefore,
	 sample 11 line 1 of the left image maps to sample 1 line 1 of the right image, and
         sample 12 line 1 of the left image maps to sample 2 line 1 of the right image.  The
	 remaining pixels that do not have an assigned pixel value are set to NULL.
         <br />
	 <br />

      <img src="assets/image/fx_left_10_pixel_shift_example.png" alt="Left shift" width="487" height="285" />
         <br />
       </blockquote>
     </blockquote>

    </p>
    <p>
      The following operators use the input image statistics to apply the
      equations:
    </p>
    <p>
     <blockquote>
       linemin, linemax, cubemin, cubemax, cubeavg, cubestd
     </blockquote>
    </p>
    <p>
      The min and max operators are used to compare two pixel values.  The pixel values
      can be obtained from input files or manually entered by the user.  The two values
      are compared against each other and the one that meets the equation criteria is used.
    </p>
    <p>
     <blockquote>
       min, max
     </blockquote>
    </p>
    <p>
      In order to use the camera operators, images must be processed through <i>
      spiceinit</i> so that the NAIF camera model information is stored in the image
      labels. <b>These operators calculate values on a band-by-band basis so that band-dependent
      images have correctly calculated camera-related values</b>.
    </p>
    <p>
     <blockquote>
       pha, phal, phac, ina, inal, inac, ema, emal, emac <br />
       lat, lon, radius, resolution
     </blockquote>
     </p>
    <p>
      The following operators are used to convert between degrees and radians:
    </p>
    <p>
     <blockquote>
       rads, degs
     </blockquote>
    </p>
    <br />
    <p>
      <b>All trigonometric functions expect angles in radians, not degrees.
      However, all camera functions return angles in degrees and therefore should
      be converted to radians. </b>
    </p>
    <br />
    <p>
      The following table shows all currently supported scalars and special tokens:
    </p>

    <table border = "1">
      <tr>
        <td colspan="3" align="center" valign="middle"><b>SCALARS</b></td>
      </tr>
      <tr>
        <th>Scalar</th>
        <th>Description</th>
        <th>Example</th>
      </tr>
      <tr>
        <td>F<i>#</i></td>
        <td>File operator</td>
        <td>f3 denotes third file</td>
      </tr>
      <tr>
        <td><i>#</i> or <i>#.#</i> or <i>.#</i></td>
        <td>Any integer or double</td>
        <td>12, 3.14, .007 are all valid</td>
      </tr>
      <tr>
        <td><def>band</def></td>
        <td>Current band number</td>
        <td>f1 * band</td>
      </tr>
      <tr>
        <td><def>line</def></td>
        <td>Current line number</td>
        <td>line + f1</td>
      </tr>
      <tr>
        <td><def>sample</def></td>
        <td>Current sample number</td>
        <td>sample / line + f1</td>
      </tr>
      <tr>
        <td>pi</td>
        <td>Pi (3.14159...)</td>
        <td>f1 > (e^pi)</td>
      </tr>
      <tr>
        <td>e</td>
        <td>Euler's number (2.71828...)</td>
        <td>f1 == ln(e)</td>
      </tr>
    </table>
    <br />

    <p>
      The following table shows all currently supported operators sorted
      by precedence (0 = highest precedence). All examples are valid
      equations that assume one or more files (F1, F2, etc.) are loaded:
    </p>

    <table border = "1">
      <tr>
        <td colspan="4" align="center" valign="middle"><b>OPERATORS</b></td>
      </tr>
      <tr>
        <th>Precedence<br />Level</th>
        <th>Operator</th>
        <th>Description</th>
        <th>Example</th>
      </tr>
      <tr>
        <td>0</td>
        <td>{ [ ( ) ] }</td>
        <td>Parentheses, brackets, or braces</td>
        <td>f2*(f1+[30-{line/pi}])</td>
      </tr>
      <tr>
        <td>1</td>
        <td>-- or neg</td>
        <td>Negative sign</td>
        <td>--f1 + f2 or neg(f1) + f2</td>
      </tr>
      <tr>
        <td>1</td>
        <td>abs</td>
        <td>Absolute value</td>
        <td>abs(f2 - f1)</td>
      </tr>
      <tr>
        <td>1</td>
        <td>min</td>
        <td>Minimum of two DNs</td>
        <td>f1 + min(5, f2) + min(f2, f3)</td>
      </tr>
      <tr>
        <td>1</td>
        <td>max</td>
        <td>Maximum of two DNs</td>
        <td>20 * max(f1,f2)</td>
      </tr>
      <tr>
        <td>1</td>
        <td>linemin</td>
        <td>Minimum of DNs on the current line</td>
        <td>f1 + linemin(f2)</td>
      </tr>
      <tr>
        <td>1</td>
        <td>linemax</td>
        <td>Maximum of DNs on the current line</td>
        <td>f1 + linemax(f2)</td>
      </tr>
      <tr>
        <td>1</td>
        <td>cubemin</td>
        <td>Minimum of a cube</td>
        <td>f1 + cubemin(f2)</td>
      </tr>
      <tr>
        <td>1</td>
        <td>cubemax</td>
        <td>Maximum of a cube</td>
        <td>f1 + cubemax(f2)</td>
      </tr>
      <tr>
        <td>1</td>
        <td>cubeavg</td>
        <td>Average of a cube</td>
        <td>f1 / cubeavg(f1)</td>
      </tr>
      <tr>
        <td>1</td>
        <td>cubestd</td>
        <td>Standard deviation of a cube</td>
        <td>f1 * (abs(f1-cubeavg(f1)) &lt; 2*cubestd(f1))</td>
      </tr>
      <tr>
        <td>1</td>
        <td>sin</td>
        <td>Sine</td>
        <td>f1 * sin(123/321)</td>
      </tr>
      <tr>
        <td>1</td>
        <td>cos</td>
        <td>Cosine</td>
        <td>cos(.02*50)</td>
      </tr>
      <tr>
        <td>1</td>
        <td>tan</td>
        <td>Tangent</td>
        <td>tan(f1/f2)</td>
      </tr>
      <tr>
        <td>1</td>
        <td>csc</td>
        <td>Cosecant</td>
        <td>12.3 + csc(f1)</td>
      </tr>
      <tr>
        <td>1</td>
        <td>sec</td>
        <td>Secant</td>
        <td>sin(pi/60) + (sec(f2))^2</td>
      </tr>
      <tr>
        <td>1</td>
        <td>cot</td>
        <td>Cotangent</td>
        <td>line + cot(f1) - 42</td>
      </tr>
      <tr>
        <td>1</td>
        <td>asin</td>
        <td>Arcsine</td>
        <td>0.006 ^ asin(f1*5)</td>
      </tr>
      <tr>
        <td>1</td>
        <td>acos</td>
        <td>Arccosine</td>
        <td>acos(1/[2*pi])</td>
      </tr>
      <tr>
        <td>1</td>
        <td>atan</td>
        <td>Arctangent</td>
        <td>atan(f1/e)</td>
      </tr>
      <tr>
        <td>1</td>
        <td>atan2</td>
        <td>Arctangent2</td>
        <td>atan2(--10  5.5)</td>
      </tr>
      <tr>
        <td>1</td>
        <td>sinh</td>
        <td>Hyperbolic sine</td>
        <td>55 + sinh(f2)</td>
      </tr>
      <tr>
        <td>1</td>
        <td>cosh</td>
        <td>Hyperbolic cosine</td>
        <td>cosh(sample^pi)</td>
      </tr>
      <tr>
        <td>1</td>
        <td>tanh</td>
        <td>Hyperbolic tangent</td>
        <td>tanh(f1)</td>
      </tr>
      <tr>
        <td>1</td>
        <td>log or ln</td>
        <td>Natural log</td>
        <td>ln(abs(1/[f2-f1]))</td>
      </tr>
      <tr>
        <td>1</td>
        <td>log10</td>
        <td>Log base 10</td>
        <td>99 + log10(f1-160)</td>
      </tr>
      <tr>
        <td>1</td>
        <td>sqrt</td>
        <td>Square root</td>
        <td>sqrt(abs[1000 - f2])</td>
      </tr>

      <tr>
        <td>1</td>
        <td>pha</td>
        <td><def>Phase angle</def> on the ellipsoid</td>
        <td>pha(f1)</td>
      </tr>
      <tr>
        <td>1</td>
        <td>ina</td>
        <td><def>Incidence angle</def> on the ellipsoid</td>
        <td>ina(f1)</td>
      </tr>
      <tr>
        <td>1</td>
        <td>ema</td>
        <td><def>Emission angle</def> on the ellipsoid</td>
        <td>ema(f1)</td>
      </tr>

      <tr>
        <td>1</td>
        <td>phal</td>
        <td>Local phase angle on DTM</td>
        <td>phal(f1)</td>
      </tr>
      <tr>
        <td>1</td>
        <td>inal</td>
        <td><def>Local incidence angle</def> on DTM</td>
        <td>inal(f1)</td>
      </tr>
      <tr>
        <td>1</td>
        <td>emal</td>
        <td><def>Local emission angle</def> on DTM</td>
        <td>emal(f1)</td>
      </tr>

      <tr>
        <td>1</td>
        <td>phac</td>
        <td><def>Phase angle</def> on the ellipsoid at image center</td>
        <td>phac(f1)</td>
      </tr>
      <tr>
        <td>1</td>
        <td>inac</td>
        <td><def>Incidence angle</def> on the ellipsoid at image center</td>
        <td>inac(f1)</td>
      </tr>
      <tr>
        <td>1</td>
        <td>emac</td>
        <td><def>Emission angle</def> on the ellipsoid at image center</td>
        <td>emac(f1)</td>
      </tr>

      <tr>
        <td>1</td>
        <td>rads</td>
        <td>Convert degrees to radians</td>
        <td>f1 / cos(rads(pha(f1)))</td>
      </tr>

      <tr>
        <td>1</td>
        <td>degs</td>
        <td>Convert radians to degrees</td>
        <td>degs(acos(f1))</td>
      </tr>

      <tr>
        <td>1</td>
        <td>lat</td>
        <td><def>Latitude</def></td>
        <td>lat(f1)</td>
      </tr>
      <tr>
        <td>1</td>
        <td>lon</td>
        <td><def>Longitude</def></td>
        <td>lon(f1)</td>
      </tr>
      <tr>
        <td>1</td>
        <td>radius</td>
        <td><def>Radius</def> of DTM in meters</td>
        <td>radius(f1)</td>
      </tr>

      <tr>
        <td>1</td>
        <td>res</td>
        <td><def>Pixel resolution</def> in meters</td>
        <td>res(f1)</td>
      </tr>


      <tr>
        <td>2</td>
        <td>^</td>
        <td>Exponent</td>
        <td>f1 ^ 3</td>
      </tr>
      <tr>
        <td>3</td>
        <td>*</td>
        <td>Multiplication</td>
        <td>10 * f1</td>
      </tr>
      <tr>
        <td>3</td>
        <td>/</td>
        <td>Division</td>
        <td>f2 / f1</td>
      </tr>

      <tr>
        <td>4</td>
        <td>&lt;&lt;</td>
        <td>Left shift <b><i>(Note: pixel shift, not bitwise)</i></b></td>
        <td>f1 &lt;&lt; 250</td>
      </tr>
      <tr>
        <td>4</td>
        <td>>></td>
        <td>Right shift <b><i>(Note: pixel shift, not bitwise)</i></b></td>
        <td>f2 + (f1 >> 500)</td>
      </tr>
      <tr>
        <td>5</td>
        <td>+</td>
        <td>Addition</td>
        <td>123 + 0.004 + f1</td>
      </tr>
      <tr>
        <td>5</td>
        <td>-</td>
        <td>Subtraction</td>
        <td>10 - (--f1)</td>
      </tr>
      <tr>
        <td>6</td>
        <td>></td>
        <td>Greater than <b><i>(Note: result is 0 or 1)</i></b></td>
        <td>f1 > f2</td>
      </tr>
      <tr>
        <td>6</td>
        <td>&lt;</td>
        <td>Less than <b><i>(Note: result is 0 or 1)</i></b></td>
        <td>f1 * (f1 &lt; cubeavg(f1)) </td>
      </tr>
      <tr>
        <td>6</td>
        <td>&lt;=</td>
        <td>Less than or equal <b><i>(Note: result is 0 or 1)</i></b></td>
        <td>f1 &lt;= 0.505</td>
      </tr>
      <tr>
        <td>6</td>
        <td>>=</td>
        <td>Greater than or equal <b><i>(Note: result is 0 or 1)</i></b></td>
        <td>f1 * (f1 >= 101)</td>
      </tr>
      <tr>
        <td>6</td>
        <td>==</td>
        <td>Equal to <b><i>(Note: result is 0 or 1)</i></b></td>
        <td>f1 == (f2/2)</td>
      </tr>
      <tr>
        <td>6</td>
        <td>!=</td>
        <td>Not equal to <b><i>(Note: result is 0 or 1)</i></b></td>
        <td>f1 != f2</td>
      </tr>
      </table>

  </description>

  <category>
    <categoryItem>Math and Statistics</categoryItem>
  </category>

  <seeAlso>
    <applications>
      <item>algebra</item>
      <item>spiceinit</item>
    </applications>
  </seeAlso>

  <history>
    <change name="Kris Becker" date="1997-04-24">
      Original version
    </change>
    <change name="Sean Crosby" date="2007-02-14">
      Converted to Isis 3
    </change>
    <change name="Steven Lambright" date="2007-06-18">
      Added single line and sample functionality
    </change>
    <change name="Steven Lambright" date="2008-04-16">
      Upgraded to work with new Calculator classes
    </change>
    <change name="Steven Lambright" date="2008-12-17">
      Renamed parameter FILELIST to FROMLIST
    </change>
    <change name="Steven Lambright" date="2009-04-17">
      Updated documentation to reflect the units of the trig functions
    </change>
    <change name="Steven Lambright" date="2010-04-08">
      Min, max capabilities have been expanded to include line and cube
        min/max
    </change>
    <change name="Jeff Anderson" date="2012-02-09">
      Added cubeavg, cubestd, rads, degs, neg, pha, ina, ema, phac, inac, inal, phal,
      emal, res, lat, lon, and radius functions
    </change>
    <change name="Ella Mae Lee" date="2012-10-22">
      Improved documentation and added examples, reference Mantis issue #977
      and #992
    </change>
    <change name="Lynn Weller" date="2013-02-25">
       Removed links to applications imbedded in text and replaced with
       italicized application name.  Added application links to the
       "Related Objects and Documents" section of the documentation.
       Fixes mantis ticket #1525.
    </change>
    <change name="Tracie Sucharski" date="2013-12-11">
      Fixed bug where the cube attributes on files in the fromlist were
      ignored.  Fixes #1926."
    </change>
    <change name="Moses Milazzo and Ian Humphrey" date="2016-10-13">
      Fixed bug where camera related operators produce incorrect calculations for band-dependent
      images. The camera operators now make calculations on a band-by-band basis, meaning
      band-dependent images are now supported with correct calculations. Fixes #1301.
      Backward Compatibility Issue: The changes made will impact any scripts that use the
      fx camera operators on band-dependent images, producing different output for each band.
    </change>
  </history>

  <groups>
    <group name = "Files">
      <parameter name = "F1">
        <type>cube</type>
        <fileMode>input</fileMode>
        <brief>Input filename</brief>
        <description>
          Input ISIS cube filename.
        </description>
        <filter>
          *.cub
        </filter>
      </parameter>

      <parameter name = "F2">
        <type>cube</type>
        <fileMode>input</fileMode>
        <internalDefault>None</internalDefault>
        <brief>Input filename</brief>
        <description>
          Input ISIS cube filename.
        </description>
        <filter>
          *.cub
        </filter>
      </parameter>

      <parameter name = "F3">
        <type>cube</type>
        <fileMode>input</fileMode>
        <internalDefault>None</internalDefault>
        <brief>Input filename</brief>
        <description>
          Input ISIS cube filename.
        </description>
        <filter>
          *.cub
        </filter>
      </parameter>

      <parameter name = "F4">
        <type>cube</type>
        <fileMode>input</fileMode>
        <internalDefault>None</internalDefault>
        <brief>Input filename</brief>
        <description>
          Input ISIS cube filename.
        </description>
        <filter>
          *.cub
        </filter>
      </parameter>

      <parameter name = "F5">
        <type>cube</type>
        <fileMode>input</fileMode>
        <internalDefault>None</internalDefault>
        <brief>Input filename</brief>
        <description>
          Input ISIS cube filename.
        </description>
        <filter>
          *.cub
        </filter>
      </parameter>

      <parameter name="TO">
       <type>cube</type>
       <pixelType>real</pixelType>
       <fileMode>output</fileMode>
       <brief>
         Output cube filename
       </brief>
       <description>
         This is the output file created based on a user defined equation.
       </description>
       <filter>
         *.cub
       </filter>
      </parameter>
    </group>

    <group name = "File list">
      <parameter name = "FROMLIST">
     	<type>filename</type>
     	<fileMode>input</fileMode>
     	<brief>Input list filename</brief>
     	<description>
     	  This file contains a list of all the cube files to be processed.
          Each file will be assigned F1 to F##(number of images in the input list).
     	</description>
     	<filter>
     	  *.txt *.lis
     	</filter>
      </parameter>
    </group>

    <group name = "Equation">
      <parameter name = "EQUATION">
        <type>string</type>
        <brief>Image processing equation</brief>
        <description>
          This equation will be parsed and used to perform the specified
	  calculations.
        </description>
      </parameter>
    </group>

    <group name = "File I/O Mode">
      <parameter name = "MODE">
        <type>string</type>
        <default><item>CUBES</item></default>
        <brief>File I/O options</brief>
        <description>
          Select one of the following options: <i>CUBES</i> to input cubes directly,
	  <i>LIST</i> to enter a text file containing a list of filenames,
	  or <i>OUTPUTONLY</i> to create output data only.
        </description>
        <list>
          <option value = "CUBES">
            <brief>Select input cubes directly</brief>
            <description>
              Enter up to five input filenames.
            </description>
            <exclusions>
              <item>FROMLIST</item>
              <item>LINES</item>
              <item>SAMPLES</item>
              <item>BANDS</item>
            </exclusions>
          </option>

          <option value = "LIST">
            <brief>Specify a list of input files</brief>
            <description>
              Input file list name containing all the cube files to be processed.
            </description>
            <exclusions>
              <item>F1</item>
              <item>F2</item>
              <item>F3</item>
              <item>F4</item>
              <item>F5</item>
              <item>LINES</item>
              <item>SAMPLES</item>
              <item>BANDS</item>
            </exclusions>
          </option>

          <option value = "OUTPUTONLY">
            <brief>Write output only</brief>
            <description>
              Generates output from an equation; no input cubes are needed.
            </description>
            <exclusions>
              <item>F1</item>
              <item>F2</item>
              <item>F3</item>
              <item>F4</item>
              <item>F5</item>
              <item>FROMLIST</item>
            </exclusions>
          </option>
        </list>
      </parameter>
    </group>

    <group name = "Output only">
      <parameter name = "LINES">
        <type>integer</type>
        <default><item>1</item></default>
        <brief>Number of lines</brief>
        <description>
          This is the number of lines the output cube will have.
        </description>
        <minimum inclusive = "yes">1</minimum>
      </parameter>

      <parameter name = "SAMPLES">
        <type>integer</type>
        <default><item>1</item></default>
        <brief>Number of samples</brief>
        <description>
          This is the number of samples the output cube will have.
        </description>
        <minimum inclusive = "yes">1</minimum>
      </parameter>

      <parameter name = "BANDS">
        <type>integer</type>
        <default><item>1</item></default>
        <brief>Number of bands</brief>
        <description>
          This is the number of bands the output cube will have.
        </description>
        <minimum inclusive = "yes">1</minimum>
      </parameter>
    </group>


  </groups>

  <examples>
    <example>
      <brief>Add two images</brief>
      <description>
        In this example, two images with the same filename but have two different bands
	will be added to each other.
      </description>
      <terminalInterface>
        <commandLine>
          f1=../isisTruth.cub+1 f2=../isisTruth.cub+2 to=../result.cub equation=f1+ f2
        </commandLine>
        <description>
          Add Band 1 and Band 2 using default settings.
        </description>
      </terminalInterface>
      <guiInterfaces>
        <guiInterface>
          <image width="500" height="500" src="assets/image/fxgui.jpg">
            <brief>Example GUI</brief>
            <description>Screenshot of GUI with parameters filled in to perform a
	      calculation on the input image.
	    </description>
            <thumbnail width="200" height="246" caption="fx GUI" src="assets/thumb/fxgui.jpg" />
          </image>
        </guiInterface>
      </guiInterfaces>
      <inputImages>
        <image src="assets/image/band1.jpg" width="492" height="492">
          <brief>Input file band 1</brief>
          <description>This is the first input image for the fx example.
          </description>
          <thumbnail caption="Input image" src="assets/thumb/band1.jpg" width="200" height="200"/>
          <parameterName>F1</parameterName>
        </image>
	<image src="assets/image/band2.jpg" width="492" height="492">
          <brief>Input file band 2</brief>
          <description>This is the second input image for the fx example.
          </description>
          <thumbnail caption="Input image" src="assets/thumb/band2.jpg" width="200" height="200"/>
          <parameterName>F2</parameterName>
        </image>
      </inputImages>

      <outputImages>
        <image src="assets/image/sum.jpg" width="492" height="492">
          <brief> Output file</brief>
          <description> This is the 500 by 500 output image containing the results.
            <br /><br />
	    <b>Parameter Name:</b> EQUATION <br /><br />
	    "f1+ f2"
          </description>
          <thumbnail caption="Output image" src="assets/thumb/sum.jpg" width="200" height="200"/>
          <parameterName>TO</parameterName>
        </image>
      </outputImages>

    </example>

    <example>
      <brief>Create output only </brief>
      <description>
        In this example, an output file that is 360 samples by 360 lines is created
	by converting the line number to radians, and then calculating the cosine of the
	calculated value using the following equation:
	<blockquote>
	  cos(rads(line)) <br />
	</blockquote>
	The line number is input as degrees and converted to radians first in order
	to output the correct cosine values.
      </description>

      <terminalInterface>
        <commandLine>
          to=cosine_of_line.cub equation="cos(rads(line))" mode=outputonly lines=360
	  samples=360
        </commandLine>
        <description>
          Convert the line number to radians, calculate the cosine of the new value, and
	  output the results to the output filename provided by the user.
        </description>
      </terminalInterface>

      <outputImages>
        <image src="assets/image/cosine_of_line.jpg" width="360" height="360">
          <brief>Output file</brief>
          <description>
	    This is the output file created based on a user defined equation without
	    specifying input filenames.
            <br /><br />
	    <b>Parameter Name:</b> EQUATION <br /><br />
	    "cos(rads(line))"
          </description>
          <thumbnail caption="Output image" src="assets/thumb/thumb_cosine_of_line.jpg" width="180" height="180"/>
          <parameterName>TO</parameterName>
        </image>
       </outputImages>

      <guiInterfaces>
        <guiInterface>
          <image width="725" height="968" src="assets/image/fx_gui_cosine_line.jpg">
            <brief>Example GUI</brief>
            <description>Screenshot of GUI with parameters filled in to perform a calculation to create an output image. </description>
            <thumbnail width="300" height="401" caption="fx GUI" src="assets/thumb/thumb_fx_gui_cosine_line.jpg" />
          </image>
        </guiInterface>
      </guiInterfaces>
    </example>

    <example>
      <brief>Create output only</brief>
      <description>
        The example below demonstrates how easily one can get an incorrect product
	if angles are not converted to radians before calculating the cosine of a
	line number when the line number represents angles in degrees. In this example,
	the output file has 360 samples by 360 lines.
      </description>

      <terminalInterface>
        <commandLine>
          to=cosine_of_line_deg.cub equation="cos(line)" mode=outputonly
	  lines=360 samples=360
        </commandLine>
        <description>
          Calculate the cosine of the line number, and output the results to
	  the output filename provided by the user.
        </description>
      </terminalInterface>

      <outputImages>
        <image src="assets/image/cosine_of_line_deg.jpg" width="360" height="360">
          <brief>Output file</brief>
          <description>
	    This is the output file created based on a user defined equation
	    without specifying input filenames.
            <br /><br />
	    <b>Parameter Name:</b> EQUATION <br /><br />
	    "cos(line)"
          </description>
          <thumbnail caption="Output image" src="assets/thumb/thumb_cosine_of_line_deg.jpg" width="180" height="180"/>
          <parameterName>TO</parameterName>
        </image>
       </outputImages>

      <guiInterfaces>
        <guiInterface>
          <image width="730" height="679" src="assets/image/fx_gui_cosine_line_deg_full.jpg">
            <brief>Example GUI</brief>
             <description>
	       Screenshot of GUI with parameters filled in to perform a
	       calculation to create an output image.
	     </description>
            <thumbnail width="300" height="272" caption="fx GUI" src="assets/thumb/fx_gui_cosine_line_deg_thumb.jpg" />
          </image>
        </guiInterface>
      </guiInterfaces>
    </example>


    <example>
      <brief>Apply a gamma stretch</brief>
      <description>
        In this example, a gamma stretch is applied to a CTX image. The image
	statistics are determined and used as part of the equation to calculate
	new DN values.
      </description>

      <terminalInterface>
        <commandLine>
          f1=B10_013516_1520_XN_28S285W_eo_reduced.cub
	  to=B10_013516_1520_XN_28S285W_gammast2.cub
	  equation="{[cubemax(f1)-abs(cubemin(f1))]*{[f1-abs(cubemin(f1))]/[cubemax(f1)-abs(cubemin(f1))]}^(1.0/1.8)}"
        </commandLine>
        <description>
          Apply an equation to perform a gamma stretch to the image utilizing
	  the input image statistics.
        </description>
      </terminalInterface>

      <inputImages>
        <image src="assets/image/B10_013516_1520_XN_28S285W_eo_reduced.jpg" width="1667" height="1366">
          <brief>Input file</brief>
          <description>
	    This is the input image for the fx example. <br /><br />
          </description>
          <thumbnail caption="Input image" src="assets/thumb/thumb_B10_013516_1520_XN_28S285W_eo_reduced.jpg" width="239" height="196"/>
          <parameterName>F1</parameterName>
        </image>
      </inputImages>

      <outputImages>
        <image src="assets/image/B10_013516_1520_XN_28S285W_gammast.jpg" width="1667" height="1366">
          <brief> Output file</brief>
          <description>
	    This is the output image where the bright and dark tones in the input
	    image are adjusted based on the input image statistics that are incorporated
	    into the equation that is applied to calculate new output values.
            <br /><br />
	    <b>Parameter Name:</b> EQUATION <br /><br/>
	    "{[cubemax(f1)-abs(cubemin(f1))]*{[f1-abs(cubemin(f1))]/[cubemax(f1)-abs(cubemin(f1))]}^(1.0/1.8)}"
          </description>
          <thumbnail caption="Output image" src="assets/thumb/thumb_B10_013516_1520_XN_28S285W_gammast.jpg" width="239" height="196"/>
          <parameterName>TO</parameterName>
        </image>
      </outputImages>

      <guiInterfaces>
        <guiInterface>
          <image width="728" height="1036" src="assets/image/fx_gui_gammast_reduced.jpg">
            <brief>Example GUI</brief>
            <description>Screenshot of GUI with parameters filled in to perform a calculation on the input image. </description>
            <thumbnail width="375" height="342" caption="fx GUI" src="assets/thumb/thumb_fx_gui_gammast.jpg" />
          </image>
        </guiInterface>
      </guiInterfaces>
    </example>

    <example>
      <brief>Create mask file</brief>
      <description>
        In this example, all input DN values greater than 0.11 is set to "1.0"
	and all other pixels set to "0.0".
      </description>

      <terminalInterface>
        <commandLine>
          f1=B10_013516_1520_XN_28S285W_eo_reduced.cub
	  to=B10_013516_1520_XN_28S285W_mask.cub equation="f1>0.11"
        </commandLine>
        <description>
          Apply the equation to create a mask template file consisting of
	  0.0 and 1.0 DN values.
        </description>
      </terminalInterface>

      <inputImages>
        <image src="assets/image/B10_013516_1520_XN_28S285W_eo_reduced.jpg" width="1667" height="1366">
          <brief>Input file</brief>
          <description>
	    This is the input image for the fx example. <br /><br />
          </description>
          <thumbnail caption="Input image" src="assets/thumb/thumb_B10_013516_1520_XN_28S285W_eo_reduced.jpg" width="239" height="196"/>
          <parameterName>F1</parameterName>
        </image>
      </inputImages>

      <outputImages>
        <image src="assets/image/B10_013516_1520_XN_28S285W_eo_mask.jpg" width="1667" height="1366">
          <brief> Output file</brief>
          <description>
	    This is an image consisting of "0" and "1" DN values based on
	    the equation provided.
            <br /><br />
	    <b>Parameter Name:</b> EQUATION <br /><br />
	    "f1>0.11"
          </description>
          <thumbnail caption="Output image" src="assets/thumb/thumb_B10_013516_1520_XN_28S285W_eo_mask.jpg" width="239" height="196"/>
          <parameterName>TO</parameterName>
        </image>
      </outputImages>

      <guiInterfaces>
        <guiInterface>
          <image width="726" height="811" src="assets/image/fx_gui_mask_full.jpg">
            <brief>Example GUI</brief>
            <description>Screenshot of GUI with parameters filled in to perform a calculation on the input image. </description>
            <thumbnail width="300" height="270" caption="fx GUI" src="assets/thumb/fx_gui_mask_thumb.jpg" />
          </image>
        </guiInterface>
      </guiInterfaces>
    </example>

     <example>
      <brief>Extract desired data</brief>
      <description>
        In this example, all DN values less than 0.11 will be set to "0.0" and
	all other DN values will retain the original input value.
      </description>
      <terminalInterface>
        <commandLine>
          f1=B10_013516_1520_XN_28S285W_eo_reduced.cub
	  to=B10_013516_1520_XN_28S285W_extract.cub equation="f1*(f1>0.11)"
        </commandLine>
        <description>
          Apply the equation to retain all DN values greater than 0.11,
	  and set all other values to 0.0.
        </description>
      </terminalInterface>

      <inputImages>
        <image src="assets/image/B10_013516_1520_XN_28S285W_eo_reduced.jpg" width="1667" height="1366">
          <brief>Input file</brief>
          <description>
	    This is the input image for the fx example. <br /><br />
          </description>
          <thumbnail caption="Input image" src="assets/thumb/thumb_B10_013516_1520_XN_28S285W_eo_reduced.jpg" width="239" height="196"/>
          <parameterName>F1</parameterName>
        </image>
      </inputImages>

      <outputImages>
        <image src="assets/image/B10_013516_1520_XN_28S285W_eo_extract_fullqview.jpg" width="2493" height="1390">
          <brief> Output file</brief>
          <description> The pink areas in this image were set to "0.0" based
	  on the equation entered.  All other values retained the original values
	  because the input value was multiplied by 1.0 when the calculations
	  were performed.
          <br /><br />
	  <b>Parameter Name:</b> EQUATION <br /><br />
	  "f1*(f1>0.11)"
          </description>
          <thumbnail caption="Output image" src="assets/thumb/B10_013516_1520_XN_28S285W_eo_extract_thumbqview.jpg" width="260" height="247"/>
          <parameterName>TO</parameterName>
        </image>
      </outputImages>

      <guiInterfaces>
        <guiInterface>
          <image width="726" height="813" src="assets/image/fx_gui_extract_full.jpg">
            <brief>Example GUI</brief>
            <description>Screenshot of GUI with parameters filled in to perform a calculation on the input image. </description>
            <thumbnail width="300" height="271" caption="fx GUI" src="assets/thumb/fx_gui_extract_thumb.jpg" />
          </image>
        </guiInterface>
      </guiInterfaces>
    </example>
  </examples>

</application>
