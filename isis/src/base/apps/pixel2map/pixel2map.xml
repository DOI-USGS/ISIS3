<?xml version="1.0" encoding="UTF-8"?>

<application name="pixel2map" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://isis.astrogeology.usgs.gov/Schemas/Application/application.xsd">
  <brief>
    Convert camera image to a map projection using a forward driven algorithm
  </brief>

  <description>
    The <i>pixel2map</i> program projects an ISIS <def link="Level0">level0</def> or
    <def link="Level1">level1</def> <def link="Cube">cube</def> to a
    <def link="MAP">map</def>-projected, ISIS <def link="Level2">level2</def>
    cube. Please note that pixels that fall
    in either polar region (i.e. latitude of 90.0 degrees or -90.0 degrees)
    cannot currently be processed and are assigned as NULL pixels (i.e. this is currently
    unsupported).
    <p>
      In order for <i>pixel2map</i> to run successfully, input cubes must have SPICE data. The
      program <i>spiceinit</i> should be used to attach the appropriate SPICE data to input cubes.
      If a shape model is provided (or added in <i>spiceinit</i> by default), orthorectification is
      supported through the determination of the field-of-view (FOV) latitude/longitude coordinates
      as they map onto the digital elevation map (DEM). The <i>pixel2map</i> program also
      requires a map projection specification. The map projection is defined
      using a PVL file specified with the MAP parameter. The <i>maptemplate</i>
      program can be used to create a map projection file.
    </p>
    <p>
      The <i>cam2map</i> program also projects a cube and is recommended
      for most mapping applications. The <i>cam2map</i> program assumes contiguous pixels and will
      interpolate to fill any gaps that occur in the output image during projection.
      The <i>pixel2map</i> program will preserve these gaps where the pixels are not contiguous.
      This program is designed to project cubes for the following cases:
      <ul>
        <li>pixels do not overlap spatially</li>
        <li>data is smeared from long exposure times and drifting (see FOVRANGE=FULLEXPOSURE)</li>
        <li>data is captured from spectrometers</li>
        <ul>
          <li>CRISM</li>
          <li>DAWN VIR</li>
          <li>NEARS MSI</li>
          <li>VIMS</li>
        </ul>
      </ul>
      It is important to note that when projecting multiple spectrometer images within a single run
      of <i>pixel2map</i>, the hyperspectral information present in the input may be compromised in
      the output projection because individual overlapping pixels are averaged in the output pixel.
      With a <em>single</em> observation as input, the hyperspectral information will be preserved.
      With <em>multiple</em> observations as input (by using FROMTYPE=FROMLIST
      and FROMLIST), each observation may have different geometry depending on the timeframe the
      observations were acquired. Input pixels from each input observation mapped to an overlapping
      output surface pixel will be averaged.
    </p>

    <b>The following table indicates how <i>pixel2map</i> and <i>cam2map</i> differ:</b>

    <table border="1">
      <tr>
        <td><i>pixel2map</i></td>
        <td><i>cam2map</i></td>
      </tr>

      <tr>
        <td>Uses a forward driven algorithm for projection.</td>
        <td>Uses a reverse driven algorithm for projection.</td>
      </tr>

      <tr>
        <td>Each input pixel is converted to a FOV polygon, typically using the latitude/longitude of
            the pixel corners, and rasterized into the output projected image by calculating output
            pixels that fall in the boundary of the input pixel.</td>
        <td>Each input pixel is <i>not</i> converted to a polygon to be rasterized. Up to 16 input
            pixels are interpolated around the center latitude and longitude of the output map
            pixel.</td>
      </tr>

      <tr>
        <td>The space between pixels is retained in the output projected cube.</td>
        <td>The space between pixels are interpolated thus gaps are filled in the output projected cube.</td>
      </tr>

      <tr>
        <td>The output cube will be spatially accurate for non-continuous pixels.</td>
        <td>The output cube may not be spatially accurate as output pixels are interpolated.</td>
      </tr>
    </table>

    <p>
    The examples below are Mars Reconnaissance Orbiter/CRISM cubes where scan lines do not overlap
    in their original state. The major difference is in the output of the application used to
    project the cube. Both applications will project the cube,
    but will also result in a different spatial outcome.
    </p>
    <img src="assets/crismCam2mapEqui.jpg"> </img>
    <img src="assets/crismPixel2mapEqui.jpg"> </img>
    <p>
    Left Cube: <i>cam2map</i> was chosen to project the cube. Notice the scan lines have been
    interpolated/filled.  If you want to preserve gaps, cam2map will not achieve this result (but
    nearest-neighbor interpolation will be more accurate). In addition, the cube is no longer accurate
    (traceable for this type of instrument).
    </p>
    <p>
    Right Cube: <i>pixel2map</i> was chosen to project the cube. Notice the gaps are retained in the output and the cube is spatially
    correct.
    </p>

    <p>
      <b>Mapping Parameterization</b>
    </p>
    <p>
      Several parameters of the map projection have default values when not
      specified in the map projection file. The default projection is the
      system sinusoidal projection. The following table indicates how the
      defaults are established:
    </p>

    <table border="1">
      <tr>
        <td>PARAMETER</td>
        <td>DEFAULT</td>
      </tr>

      <tr>
        <td>TargetName</td>
        <td>Read from Instrument group in the input cube labels</td>
      </tr>

      <tr>
        <td>Equatorial<def>Radius</def><br />PolarRadius</td>
        <td>Read from SPICE PCK file set during <i>spiceinit</i>.  The PCK file is defined in the Kernels
        group via the TargetAttitudeShape keyword</td>
      </tr>

      <tr>
        <td><def link="Latitude Type">LatitudeType</def></td>
        <td><def link="Planetocentric Latitude">Planetocentric</def></td>
      </tr>

      <tr>
        <td><def link="Longitude Direction">LongitudeDirection</def></td>
        <td><def link="Positive East Longitude">PositiveEast</def></td>
      </tr>

      <tr>
        <td><def link="Longitude Domain">LongitudeDomain</def></td>
        <td>Normally, 360.  However, if the 180 domain causes less area to need to be projected then 180.</td>
      </tr>

      <tr>
        <td>Minimum<def>Latitude</def><br />MaximumLatitude<br />Minimum<def>Longitude</def><br />MaximumLongitude</td>
        <td>Computed from the input cube or read from the map file.   However, any combination of the
        four values can then be overridden by the user.  The values the user specifies are expected
        to be in the coordinate system of the projection.</td>
      </tr>

      <tr>
        <td><def>PixelResolution</def><br /><def>Scale</def></td>
        <td>Computed from the input cube or read from the map file.  The value can be overridden by the user.</td>
      </tr>

    </table>

    <p>
      If you only entered the input cube (FROM) and output cube (TO) and changed no other parameters, the
      following is the default Mapping group:
    </p>
    <pre>
  Group = Mapping
    TargetName             = Obtained from the Instrument group
    EquatorialRadius       = Obtained from TargetAttitudeShape kernel
    PolarRadius            = Obtained from TargetAttitudeShape kernel

    LatitudeType           = Planetocentric
    LongitudeDirection     = PositiveEast
    LongitudeDomain        = 360 (Could be automatically adjusted to 180 by LONSEAM)

    MinimumLatitude        = Computed from the input camera cube
    MaximumLatitude        = Computed from the input camera cube
    MinimumLongitude       = Computed from the input camera cube
    MaximumLongitude       = Computed from the input camera cube

    ProjectionName         = Sinusoidal
    CenterLongitude        = Average of MinimumLongitude and MaximumLongitude
    PixelResolution        = Computed from the input camera cube
  EndGroup
    </pre>

   The map file can be an existing map projected (level2) cube.  A level2 cube has PVL labels
   with a Mapping group that is used to determine the default output map geometric extents and
   resolution.  Depending on the values of the input parameters, the output
   cube can use some or all of the keyword values of the map file.  For instance, setting
   MATCHMAP=true causes all of the mapping parameters to come from the map file, resulting
   in an output cube having the same number of <def link="Line">lines</def> and
   <def link="Sample">samples</def> as the map file.  If MATCHMAP=true and the map file is missing
   a keyword like PixelResolution, the application will fail with a PVL error.  Setting
   MATCHMAP=false allows for some of the mapping components to be overridden by the user or
   computed from the FROM cube.


   <p>If you are attempting to construct a mosaic, it is important that the PixelResolution, EquatorialRadius,
   PolarRadius, LatitudeType, LongitudeDirection, LongitudeDomain, ProjectionName, and projection
   specific parameters (e.g., CenterLongitude, CenterLatitude) are the same for all cubes.  That is,
   you should create one map file and use it as input for all the cubes in your mosaic.  By letting the
   minimum and maximum latitude and longitude values default, the application will determine the coverage of each image.
   However, if the mosaic Latitude and Longitude range is entered, each output image will be projected to the full
   size of the mosaic resulting in large file sizes and images with many <def>NULL</def> pixels.

   The following Mapping group could be used for mosaicking:
   </p>
   <pre>
 Group = Mapping
   ProjectionName         = Sinusoidal
   CenterLongitude        = 0
   PixelResolution        = 100 &lt;meters&gt;
 EndGroup
   </pre>

   <p>
     Finally, depending on the projection, problems can occur with cubes that fall on the projection
     longitude seam.  For example, if you are making a mosaic with LongitudeDomain = 360 and your
     cube crosses the 0/360 seam, this program would compute the default longitude range of the cube to
     MinimumLongitude = 0 and MaximumLongitude = 360.  A very large output image could be created
     depending on the pixel resolution.  The LONSEAM parameter allows you to selectively handle this case.
     If you are making mosaics near the seam you will need to understand and alter the default for this parameter.
     <a href="https://github.com/USGS-Astrogeology/ISIS3/wiki/Learning_About_Map_Projections#Problems-at-the-Longitude-Seams-">
     Problems at the Longitude Seams</a> of The ISIS Workshop "Learning About Map Projections" includes an example to help
     illustrate the problem.
   </p>

   <p>
   <b>Output of <i>pixel2map</i></b>
   </p>
   <p>
   A single input file (FROM) produces a projected level2 cube. A list of files (FILELIST) produces
   an averaged mosaic as output. An additional count cube with one band that contains the number of
   input pixels averaged into each output pixel is created along with the output
   cube or mosaic.
   </p>

    <p>
      <b>Instantaneous FOV (IFOV) vs. Full FOV</b>
    </p>
    <p>
      As mentioned above, <i>pixel2map</i> uses a forward-driven mapping algorithm to create a
      projection. In short, this means that pixel2map determines a polygon (footprint) FOV for each
      input pixel and rasterizes it into the output image space. Depending on what the METHOD
      parameter has been set to, the input pixel DN value is included in the average of any output
      pixels that fall within the polygon.
    </p>
    <p>
      The default behavior of <i>pixel2map</i> is FOVRANGE=INSTANTANEOUS. This means that the IFOV
       at the center time of the exposure is being used to determine
      each pixel's footprint. For spectrometers that have longer exposure times, this method does
      not adequately address any smearing that can occur due to drifting during the exposure.
      In order to account for smearing, FOVRANGE=FULLEXPOSURE can be used. This method determines
      a pixel's polygon by finding the IFOV polygons at the start time, middle time, and
      end time of the exposure and then drawing an envelope around these polygons. The images
      below visually demonstrate the differences between the two FOVRANGE parameter values.
    </p>
    <img src="assets/image/IFOV_vs_FFOV.png" width="1085" height="448"></img>
    <p>
      For more details, see the parameter description for FOVRANGE or examples 3 and 4.
    </p>
  </description>

  <category>
    <categoryItem>Map Projection</categoryItem>
    <categoryItem>Cameras</categoryItem>
  </category>

  <oldName>
    <item>vims2map</item>
  </oldName>

  <history>
    <change name="Stacy Alley" date="2008-02-13">
      Original version
    </change>
    <change name="Steven Lambright" date="2008-05-13">
      Removed references to CubeInfo
    </change>
    <change name="Christopher Austin" date="2008-01-27">
      Fixed parameter names
    </change>
    <change name="Tracie Sucharski" date="2012-09-12">
      Restored from revision 3911 and updated for revised IEXception, iString and FileName classes.
    </change>
    <change name="Debbie Cook" date="2012-10-11">
      Updated to use new Target class.  References Mantis ticket #775 and #1114.
    </change>
    <change name="Tracie Sucharski, Stuart Sides" date="2013-07-30">
      Renamed from vims2map, generalized for all instruments, improved performance and accuracy. Fixes #1604.
    </change>
    <change name="Janet Richie, Ella Lee" date="2013-11-21">
      Updated documentation.
    </change>
    <change name="Sasha Brownsberger" date="2015-01-19">
      Updated function calls to reflect changes to ProcessGroundPolygons object.
    </change>
    <change name="Jeannie Backer" date="2016-10-24">
      Added feature to allow user to use full exposure duration to get polygons corresponding to
      real FOV. Improved coding standards. Fixes #4476.
    </change>
    <change name="Ian Humphrey" date="2016-11-18">
      Previous pixel2map was ignoring cube attributes when storing the FROM parameter internally.
      Running pixel2map now allows band selection on the FROM cube and FROMLIST cubes. Fixes #4520.
    </change>
    <change name="Ian Humphrey" date="2016-11-30">
      IsisCube labels and tables are now attached to the output cubes if there is a single input
      image. Fixes #4433. Removed unused UniveralGroundMap instance. References #4495.
    </change>
    <change name="Curtis Rose" date="2016-12-09">
      Added tests to for all errors. Fixed a check so now all files in a list have to have the
      same number of bands selected. References #4535.
    </change>
    <change name="Jesse Mapel" date="2017-01-04">
      Added the NUMIFOV parameter to determine how many IFOVs are used when creating a full FOV.
      References #4576.
    </change>
    <change name="Jesse Mapel" date="2017-04-10">
      Modified to no longer keep all cubes in the fromlist open. This resulted in crashing due to
      reaching the maximum number of open files when the fromlist was large. Cubes will now be
      opened one at a time and then closed before opening the next cube. Fixes #4761.
    </change>
    <change name="Ian Humphrey" date="2017-05-23">
      Updated documentation and added examples. Fixes #4537.
    </change>
  </history>

  <groups>
    <group name="Files">
      <parameter name="FROMTYPE">
        <type>string</type>
        <brief>From type selection (From or FromList)</brief>
        <default><item>FROM</item></default>
        <description>
          This parameter indicates whether a single cube will be entered in the 'FROM' parameter or a file
          containing a list of cubes will be given by the 'FROMLIST' parameter.
        </description>
        <list>
          <option value="FROM">
            <brief>A single input cube to project</brief>
            <description>
              The specification of the input cube to be projected.  The cube must
              have been initialized using the <i>spiceinit</i> program.
              This option allows a single input cube to be processed. Processing a single cube at a
              time is recommended to avoid averaging output pixels with other observations not
              acquired close in time.
            </description>
            <exclusions><item>FROMLIST</item></exclusions>
          </option>
          <option value="FROMLIST">
            <brief>Input list of cubes to be projected</brief>
            <description>
              This option allows a list to be used to process multiple input cubes.  All cubes
              contained in this list will be projected to the same output cube given in the 'TO'
              parameter.  This effectively projects and mosaics all input cubes given in the list
              to the same output map projected file. Use this option with caution. Overlapping
              output pixels will be averaged. If the input images vary in input resolution, viewing
              and illumination conditions, the output average could compromise the spectral data.
            </description>
            <exclusions><item>FROM</item></exclusions>
          </option>
        </list>
      </parameter>

      <parameter name="FROM">
        <type>cube</type>
        <filter>*.cub</filter>
        <brief>A single input cube to project</brief>
        <description>
          The specification of the input cube to be projected.  The cube must
          have been initialized using the <i>spiceinit</i> program.
          This option allows a single input cube to be processed.
        </description>
        <exclusions><item>FROMLIST</item></exclusions>
      </parameter>
      <parameter name="FROMLIST">
        <type>filename</type>
        <fileMode>input</fileMode>
        <filter>*.lis</filter>
        <brief>Input list of cubes to be projected</brief>
        <description>
          This option allows a list to be used to process multiple input cubes.  All cubes
          contained in this list will be projected to the same output cube given in the 'TO'
          parameter.  This effectively projects and mosaics all input cubes given in the list
          to the same output map projected file.
        </description>
        <exclusions><item>FROM</item></exclusions>
      </parameter>

      <parameter name="MAP">
        <type>filename</type>
        <fileMode>input</fileMode>
        <brief>
          File containing mapping parameters
        </brief>
        <defaultPath>$ISISROOT/appdata/templates/maps</defaultPath>
        <default><item>$ISISROOT/appdata/templates/maps/sinusoidal.map</item></default>
        <description>
          A file containing the desired output mapping parameters in PVL.  This
          file can be a simple label file, hand produced, or created via
          the <i>maptemplate</i> program.  It can also be an existing cube or cube label
          which contains a Mapping group.  In the latter case the FROM cube
          will be transformed into the same map projection, resolution, etc.
        </description>
        <helpers>
          <helper name="H1">
            <function>PrintMap</function>
            <brief>View MapFile</brief>
            <description>
              This helper button will cat out the mapping group of the given mapfile to the session log
               of the application
             </description>
	     <icon>$ISISROOT/appdata/images/icons/labels.png</icon>
          </helper>
        </helpers>
        <filter>
          *.map *.cub
        </filter>
      </parameter>

      <parameter name="TO">
        <type>cube</type>
        <fileMode>output</fileMode>
          <pixelType>real</pixelType>
        <brief>
          Newly mapped cube
        </brief>
        <description>
          This file is the map projected (level2) image.  If multiple input cubes were given in 'FROMLIST',
          they will all be projected into this output image.  A "count" cube is also created with the same
          filename with '-count-' appended.  The DN values in this output cube indicate how many input pixels
          were included in the average calculation to create the output pixel.
        </description>
        <filter>
          *.cub
        </filter>
      </parameter>
    </group>

    <group name="Output Average">
      <parameter name="METHOD">
        <type>string</type>
        <brief>Method used to calculate average for output pixels</brief>
        <default><item>CENTER</item></default>
        <description>
          This parameter is used to determine which input pixels get added to the average to create
          the output pixel.
        </description>
        <list>
           <option value="CENTER">
              <brief>Add to average if pixel centers overlap</brief>
              <description>
                Add the input pixel to the average of the output pixel if it intersects with the center
                of the output pixel.
              </description>
            </option>
           <option value="WHOLEPIXEL">
              <brief>Add to average if any part of the input pixel overlaps the output pixel</brief>
              <description>
                Add the input pixel to the average of the output pixel if it intersects with any part
                of the output pixel.
              </description>
            </option>
        </list>
      </parameter>
    </group>


    <group name="Output Map Resolution">
      <parameter name="PIXRES">
        <type>string</type>
        <brief>Defines how the pixel resolution in the output map file is obtained</brief>
        <default><item>CAMERA</item></default>
        <description>
          This parameter is used to specify how the pixel resolution is obtained for the output map
          projected cube.
        </description>
        <helpers>
          <helper name="H1">
            <function>LoadCameraRes</function>
            <brief>Load Camera Resolution </brief>
            <description>This helper button will load the default resolution from the camera</description>
	    <icon>$ISISROOT/appdata/images/icons/exec.png</icon>
          </helper>
          <helper name="H2">
            <function>LoadMapRes</function>
            <brief>Load Map File Resolution </brief>
            <description>This helper button will load the default resolution from the map file</description>
          </helper>
        </helpers>
        <list>
           <option value="CAMERA">
              <brief>Compute resolution from input cube</brief>
              <description>
                This option will automatically determine the resolution from the input  cube specified using the FROM parameter.
              </description>
              <exclusions>
                <item>RESOLUTION</item>
              </exclusions>
            </option>

           <option value="MAP">
              <brief>Read resolution from input map file</brief>
              <description>
                This option will use either the PixelResolution (meters/pixel) or Scale (pixels/degree) in the map file.
              </description>
              <exclusions>
                <item>RESOLUTION</item>
              </exclusions>
            </option>

           <option value="MPP">
              <brief> Get resolution from user in meters per pixel</brief>
              <description>
                This option allows the user to specify the resolution in meters per pixel using the RESOLUTION parameter
              </description>
              <inclusions>
                <item>RESOLUTION</item>
              </inclusions>
            </option>

           <option value="PPD">
              <brief> Get resolution from user in pixels per degree</brief>
              <description>
                This option allows the user to specify the resolution in pixels per degree using the RESOLUTION parameter
              </description>
              <inclusions>
                <item>RESOLUTION</item>
              </inclusions>
            </option>
        </list>
      </parameter>

      <parameter name="RESOLUTION">
        <type>double</type>
        <brief>Pixel resolution</brief>
        <description>
          Specifies the resolution in either meters per pixel or pixels per degree
        </description>
        <minimum inclusive="no">0.0</minimum>
      </parameter>
    </group>

    <group name="Output Map Ground Range">
      <parameter name="DEFAULTRANGE">
        <type>string</type>
        <brief>Defines how the default ground range is determined</brief>
        <default><item>MINIMIZE</item></default>
        <description>
          This parameter is used to specify how the default latitude/longitude ground range for the output map projected image
          is obtained.  The ground range can be obtained from the camera or map file.  Note the user can override the default
          using the MINLAT, MAXLAT, MINLON, MAXLON parameters.  The purpose of the ground range is to define the coverage of
          the map projected image.  Essentially, the ground range and pixel resolution are used to compute the
          size (samples and line) of the output image. Recall that any pixels that fall within the
          polar regions (-90 and 90 degrees latitude) will be assigned NULL values in the output.
        </description>

        <helpers>
          <helper name="H1">
            <function>LoadCameraRange</function>
            <brief>Load Camera Ground Range </brief>
            <description>This helper button will load the default ground range from the camera</description>
	    <icon>$ISISROOT/appdata/images/icons/exec.png</icon>
          </helper>
          <helper name="H2">
            <function>LoadMapRange</function>
            <brief>Load Map File Ground Range </brief>
            <description>This helper button will load the default ground range from the map file</description>
          </helper>
        </helpers>

        <list>
          <option value="MINIMIZE">
             <brief>Minimize output image size</brief>
             <description>
               This option will use the camera and projection in combination to ensure the output image size
               (samples, lines) is minimized.  Using a ground range can cause NULL padding for projections with
               curved meridians and/or parallels and hence large output images.  The amount of padding can be
               quite large for extremely high resolution maps.
             </description>
             <inclusions><item>LONSEAM</item></inclusions>
             <exclusions>
               <item>MINLAT</item>
               <item>MAXLAT</item>
               <item>MINLON</item>
               <item>MAXLON</item>
               <item>TRIM</item>
             </exclusions>
           </option>

           <option value="CAMERA">
              <brief> Compute default range from input cube</brief>
              <description>
                This option will automatically determine the minimum/maximum latitude/longitude from the input
                camera model cube specified using the FROM parameter.
              </description>
              <inclusions><item>LONSEAM</item></inclusions>
            </option>

           <option value="MAP">
              <brief> Read default range from map file</brief>
              <description>
                This option will read the minimum/maximum latitude/longitude from the input map file.
                All four values are expected to be defined.
              </description>
              <exclusions><item>LONSEAM</item></exclusions>
            </option>
        </list>
      </parameter>

      <parameter name="MINLAT">
        <type>double</type>
        <brief>Minimum latitude</brief>
        <internalDefault>Use default range</internalDefault>
        <description>
          The minimum latitude of the ground range. If this is entered by the user, it will override
          the default camera or map value.  By default, planetocentric latitudes are assumed unless
          the MAP file specifies otherwise.
        </description>

        <minimum inclusive="yes">-90.0</minimum>
        <maximum inclusive="yes">90.0</maximum>
      </parameter>

      <parameter name="MAXLAT">
        <type>double</type>
        <brief>Maximum latitude</brief>
        <internalDefault>Use default range</internalDefault>
        <description>
          The maximum latitude of the ground range.   If this is entered by the user, it will override
          the default camera or map value.  By default, planetocentric latitudes are assumed unless
          the MAP file specifies otherwise.
        </description>
        <minimum inclusive="yes">-90.0</minimum>
        <maximum inclusive="yes">90.0</maximum>
        <greaterThan><item>MINLAT</item></greaterThan>
      </parameter>

      <parameter name="MINLON">
        <type>double</type>
        <brief>Minimum longitude</brief>
        <internalDefault>Use default range</internalDefault>
        <description>
          The minimum longitude of the ground range.   If this is entered by the user, it will override
          the default camera or map value.  By default, positive east longitudes in the range of 0 to
          360 are assumed unless the MAP file specifies otherwise.
        </description>
      </parameter>

      <parameter name="MAXLON">
        <type>double</type>
        <brief>Maximum longitude</brief>
        <internalDefault>Use default range</internalDefault>
        <description>
          The maximum longitude of the ground range.   If this is entered by the user, it will override
          the default camera or map value.  By default, positive east longitudes in the range of 0 to
          360 are assumed unless the MAP file specifies otherwise.
        </description>
        <greaterThan><item>MINLON</item></greaterThan>
      </parameter>

      <parameter name="TRIM">
        <type>boolean</type>
        <default><item>FALSE</item></default>
        <brief>
          Null all pixels outside lat/lon boundaries
        </brief>
        <description>
          If this option is selected, pixels outside the latitude/longitude
          range will be trimmed (set to null).
          This is useful for certain projections whose lines of latitude and
          longitude are not parallel to image lines and sample columns.
        </description>
      </parameter>

      <parameter name="FOVRANGE">
        <type>string</type>
        <brief>The time range to be used to determine the FOV.</brief>
        <default><item>INSTANTANEOUS</item></default>
        <description>
          The field of view for each pixel is determined by the time range specified.
        </description>
        <list>
           <option value="INSTANTANEOUS">
              <brief>Uses the IFOV corresponding to the center pixel time.</brief>
              <description>
                The IFOV at the center of the exposure will be used
                to map each pixel.
              </description>
              <exclusions>
                <item>NUMIFOV</item>
              </exclusions>
            </option>
           <option value="FULLEXPOSURE">
              <brief>Uses the full FOV for the entire exposure time.</brief>
              <description>
                The full field of view will be used to map each pixel. This is determined by
                finding IFOVs at NUMIFOV times during the exposure. The maximum ground coverage
                area found by combining all of these IFOVs is used as the full FOV. This helps
                account for any smearing that occurs when drift occurs during exposure.
                <b>NOTE:</b> This option is currently not available for framing cameras.
              </description>
            </option>
        </list>
      </parameter>

      <parameter name="NUMIFOV">
        <type>integer</type>
        <brief>The number of instantaneous FOVs used to create the full FOV.</brief>
        <default><item>3</item></default>
        <description>
          The number of instantaneous FOVs used to create the full FOV. The
          IFOVs are spaced equally in time across the exposure duration. The first IFOV will
          always be the beginning of the exposure and the last IFOV will always
          be the end of the exposure. Warning: increasing this number will dramatically increase
          the processing time of <i>pixel2map</i>. This parameter will almost never need to be
          changed from a default of 3. If the input image was captured by a spot spectrometer,
          has a long exposure time, and has non-linear drift, then increasing this number slightly
          may help create a more accurate full FOV. Again, it is very rare, if at all, that this
          parameter value should be changed.
        </description>
        <minimum inclusive="yes">3</minimum>
      </parameter>
    </group>

    <group name="Longitude Seam Options">
      <parameter name="LONSEAM">
        <type>string</type>
        <default><item>AUTO</item></default>
        <brief>
          How should images at the longitude seam be handled
        </brief>
        <description>
          With this option you can turn on/off the automatic longitude domain switching that occurs
          when a file crosses the boundary of the longitude domain (0-360 or -180 to 180).  If
          the switching is turned off then you have the choice of making the program continue or
          exit when the cube does cross the boundary.
        </description>

        <list>
           <option value="AUTO">
              <brief>Automatically adjust Longitude Domain</brief>
              <description>
                If the cube crosses the longitude seam automatically compute the LongitudeDomain.
                When the cube is near 0 or 360 degrees the program will assume 180 LongitudeDomain.
                When the cube is near 180 or -180 degrees it will assume 360 LongitudeDomain.
              </description>
            </option>

           <option value="ERROR">
              <brief>Abort program if cube crosses seam</brief>
              <description>
                If the cube crosses the longitude seam the program will exit with an error message
              </description>
            </option>

            <option value="CONTINUE">
               <brief>Continue program if cube crosses seam</brief>
               <description>
                 If the cube crosses the longitude seam the program will continue.  The LongitudeDomain
                 in the map file will be used.  If the map file does not have a LongitudeDomain, 0-360
                 will be used. Note that this could create an extremely large image.
               </description>
             </option>
        </list>
      </parameter>
    </group>

  </groups>

  <examples>
    <!-- Example 1 : MRO CRISM -->
    <example>
      <brief>Default settings with MRO CRISM</brief>
      <description>
        In this example, we demonstrate projecting a CRISM image using the default <i>pixel2map</i>
        parameters. Note that the output retains the gaps in the data, indicating that the input
        pixels do not overlap spatially.
      </description>
      <terminalInterface>
        <commandLine>
          from=crism.cub
          to=crism_default.cub
        </commandLine>
        <description>
          Project the CRISM cube using default <i>pixel2map</i> settings.
        </description>
      </terminalInterface>
      <!-- <guiInterfaces>
        <guiInterface>
          <image>
            <brief></brief>
             <description>
            </description>
            <thumbnail />
          </image>
        </guiInterface>
      </guiInterfaces> -->
      <inputImages>
        <image src="assets/image/crism.png" width="640" height="420">
          <brief>CRISM input image</brief>
          <description>
            A CRISM image is being used for the input.
          </description>
          <thumbnail caption="Input CRISM image"
            src="assets/thumb/crism.png" width="200" height="200"/>
          <parameterName>FROM</parameterName>
        </image>
      </inputImages>
      <outputImages>
        <image src="assets/image/crism_default.png" width="534" height="990">
          <brief>Output projected image</brief>
          <description>
            Project output image using default settings. Note the gaps in the projection.
          </description>
          <thumbnail caption="Output projected image"
            src="assets/thumb/crism_default.png" width="200" height="200"/>
          <parameterName>TO</parameterName>
        </image>
        <image src="assets/image/crism_default-count-.png" width="534" height="990">
          <brief>Output count image</brief>
          <description>
            The count cube generated by <i>pixel2map</i>. Pixel values indicate how many input
            pixels were used to generate the average value for the respective output pixel.
          </description>
          <thumbnail caption="Output count image"
            src="assets/thumb/crism_default-count-.png" width="200" height="200"/>
          </image>
      </outputImages>
    </example>

    <!-- Example 2 : Cassini VIMS -->
    <example>
      <brief>LONSEAM=CONTINUE with Cassini VIMS</brief>
      <description>
        In this example, we project a VIMS-IR image using the LONSEAM=CONTINUE parameter setting.
        This means when we cross the longitude boundary in the image, the longitude domain
        is <em>not</em> automatically reset. The output image is split at the longitude boundary
        that it crosses; therefore the entire range of the target body is included in the output,
        a full 360 degree longitude. Note that a count cube is still created when running the
        commands below, it is just ignored in this example.
      </description>
      <terminalInterface>
        <commandLine>
          from=C1621694254_1.ir.band248.cub
          map=$ISISROOT/appdata/templates/maps/equirectangular.map
          to=default.cub
          lonseam=continue
        </commandLine>
        <description>
          Project a VIMS-IR cube into an equirectangular mapping. When the longitude boundary is
          reached, continue to project pixels into the cube's longitude domain. The image is split
          at the longitude boundary that it crosses, the entire range of the target body is included
          in the output.
        </description>
      </terminalInterface>
      <!-- <guiInterfaces>
        <guiInterface>
          <image>
            <brief></brief>
             <description>
            </description>
            <thumbnail />
          </image>
        </guiInterface>
      </guiInterfaces> -->
      <inputImages>
        <image src="assets/image/C1621694254_1.ir.band248.png" width="136" height="825">
          <brief>Ingested VIMS-IR cube</brief>
          <description>
            A VIMS-IR cube ingested with vims2isis.
          </description>
          <thumbnail caption="Input VIMS-IR cube"
             src="assets/thumb/C1621694254_1.ir.band248.png" width="200" height="200"/>
          <parameterName>FROM</parameterName>
        </image>
      </inputImages>
      <outputImages>
        <image src="assets/image/vims_ir_continue.png" width="1582" height="447">
          <brief>Map projected VIMS-IR cube across the longitude seam</brief>
          <description>
            The output cube is projected across the longitude seam. When using LONSEAM=CONTINUE,
            the output cube longitude domain will not be reset when the data crosses the
            longitude seam. For this image, a large gap of NULL pixels shows up in the output
            because the entire longitude range of the target body is included.
          </description>
          <thumbnail caption="Output projected VIMS-IR cube"
            src="assets/thumb/vims_ir_continue.png" width="200" height="200"/>
          <parameterName>TO</parameterName>
        </image>
      </outputImages>
    </example>

    <example>
      <brief>Instantaneous FOV with Dawn VIR</brief>
      <description>
        In this example, we project a DAWN VIR image using an instantaneous
        field of view and a full field of view to determine the output pixels. This demonstrates
        FOVRANGE=INSTANTANEOUS (default setting for FOVRANGE). Note that
        a count cube is still created when running the commands below, it is just ignored in this
        example. Compare this with FOVRANGE=FULLEXPOSURE in Example 4.
      </description>
      <terminalInterface>
        <commandLine>
          from=VIR_IR_1B_1_506266095_refl_1.b75.l1.cub
          map=$ISISROOT/appdata/templates/maps/equirectangular.map
          to=dawn_vir_instantaneous_fov.cub
        </commandLine>
        <description>
          Project the DAWN VIR image into an equirectangular projection using the default
          instantaneous field of view (FOVRANGE=INSTANTANEOUS) to determine the output pixel
          projections.
        </description>
      </terminalInterface>
      <!-- <guiInterfaces>
        <guiInterface>
          <image>
            <brief></brief>
             <description>
            </description>
            <thumbnail />
          </image>
        </guiInterface>
      </guiInterfaces> -->
      <inputImages>
        <image src="assets/image/VIR_IR_1B_1_506266095_refl_1.b75.l1.png" width="256" height="58">
          <brief>Input image for <i>pixel2map</i></brief>
          <description>
            This is the input DAWN VIR (IR) image for this example. Note the output "strips" and
            compare these with the output image in Example 4.
          </description>
          <thumbnail caption="Input image"
            src="assets/thumb/VIR_IR_1B_1_506266095_refl_1.b75.l1.png" width="200" height="200"/>
          <parameterName>FROM</parameterName>
        </image>
      </inputImages>
      <outputImages>
        <image src="assets/image/dawn_vir_instantaneous_fov.png" width="361" height="838">
          <brief>Output image using FOVRANGE=INSTANTANEOUS</brief>
          <description>
            This is the output image for the first run (FOVRANGE=INSTANTANEOUS).
          </description>
          <thumbnail caption="Output image FOVRANGE=INSTANTANEOUS"
            src="assets/thumb/dawn_vir_instantaneous_fov.png" width="200" height="200"/>
          <parameterName>TO</parameterName>
        </image>
      </outputImages>
    </example>
    <example>
      <brief>FULL FOV with Dawn VIR</brief>
      <description>
        In this example, we project a DAWN VIR image and use each pixel's full field of view to
        determine the output pixels. This example demonstrates FOVRANGE=FULLEXPOSURE. Note that
        a count cube is still created when running the commands below, it is just ignored in this
        example.
      </description>
      <terminalInterface>
        <commandLine>
          from=VIR_IR_1B_1_506266095_refl_1.b75.l1.cub
          map=$ISISROOT/appdata/templates/maps/equirectangular.map
          to=dawn_vir_full_fov.cub
          fovrange=fullexposure
        </commandLine>
        <description>
          Project the DAWN VIR image into an equirectangular projection using the full field of
          view of each pixel to determine the output pixel projections. This accounts for any smear
          that occurs with the long exposure times of the pixels.
        </description>
      </terminalInterface>
      <!-- <guiInterfaces>
        <guiInterface>
          <image>
            <brief></brief>
             <description>
            </description>
            <thumbnail />
          </image>
        </guiInterface>
      </guiInterfaces> -->
      <inputImages>
        <image src="assets/image/VIR_IR_1B_1_506266095_refl_1.b75.l1.png" width="256" height="58">
          <brief>Input image for <i>pixel2map</i></brief>
          <description>
            This is the input DAWN VIR (IR) image for this example.
          </description>
          <thumbnail caption="Input image"
            src="assets/thumb/VIR_IR_1B_1_506266095_refl_1.b75.l1.png" width="200" height="200"/>
          <parameterName>FROM</parameterName>
        </image>
      </inputImages>
      <outputImages>
        <image src="assets/image/dawn_vir_full_fov.png" width="361" height="838">
          <brief>Output image using FOVRANGE=FULLEXPOSURE</brief>
          <description>
            This is the output image for FOVRANGE=FULLEXPOSURE. When comparing to the previous
            example, note that the output image data accommodates drift (the "strips" are wider).
          </description>
          <thumbnail caption="Output image FOVRANGE=FULLEXPOSURE"
            src="assets/thumb/dawn_vir_full_fov.png" width="200" height="200"/>
          <parameterName>TO</parameterName>
        </image>
      </outputImages>
    </example>
  </examples>
</application>
