<?xml version="1.0" encoding="UTF-8"?>

<application name="spkwriter" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://isis.astrogeology.usgs.gov/Schemas/Application/application.xsd">
  <brief>
    Generate NAIF compatible SPICE SPK kernels from ISIS cubes
  </brief>

  <description>
      <p>
          <b>spkwriter</b> produces NAIF compatible SPICE  SPK kernels from one 
          or more ISIS cube files.  The cube files must have been initialized 
          with the  <b>spiceinit</b>  program.  They may also have undergone
          pointing adjustments by <b>jigsaw</b> or some other (bundle) 
          adjustment application.  
      </p>
      <p>
          The contents of the SPK kernels are extracted from the ISIS 
          <i>InstrumentPosition</i> Table (BLOB) in the ISIS file. These Tables
          are created by the <b>spiceinit</b> application and its contents
          further modified by ISIS pointing (bundle) adjustments.  The contents
          may not be in a state that can be written directly to the kernel.
          They must be converted (e.g., rotated/transformed) into the proper
          reference frames utilized by each mission/instrument. These frames are
          defined uniquely in each instrument camera model. 
      </p>
      <p>
          Users may provide one or more ISIS cube files to the application.  
           Each file is written to the SPK kernel as its own segment.    The 
          <i> ProductId</i> from the ISIS label is used as the NAIF SEGMENT ID. 
           This  information, along with other information pertaining to the 
           ISIS file and image data, are recorded in the kernel comment section. 
           A general description of the SPK kernel contents is provided by the
           application and the user can provide additional comments in a files 
           specified by the COMFILE parameter.    Should the user provide a 
           comments file, those comments will be added to the kernel file in a 
           user comment section contained in the default header provided by this 
           application.
       </p>
       <p>
            Each image is checked for overlap in start/end time ranges 
            involving the same ephemeris body and target.  Any files that have 
            common time coverages are identified and reported. Furthermore, the 
            user may select with the OVERLAP parameter how to treat occurances 
            of overlapping time ranges. It seems highly likely that images with 
            common time coverage is a conflict and an error should be generated 
            and the output SPK kernel is not created. However, if the user 
            chooses, they can be treated as warnings and the TO output SPK 
            kernel will be generated in this case.  It is up to the user to 
            determine if this is intended/valid behavior. 
       </p>
      <p>
          Provided in every SPK kernel file created is the complete list of all 
          the SPICE kernels, DEMs and extras loaded by          
          <b>spiceinit</b>.  In order to ensure the same geometric properties 
          when using this kernel, the same kernels listed for the ISIS file 
          segment must be supplied in any subsequent  run of
          <b>spiceinit</b>.  The <i>PolyDergree</i> is the degree of the
          polynomial used when writing each individual segment to the NAIF SPK 
          kernel.  The <i>CamVersion</i> value listed refers to the version of
          the ISIS camera model in use at the time the SPK data was created.
          Any subsequent code changes to the ISIS camera model may result in
          different geometric properties of the image.
      </p>
      <p>
          The following is an example of the contents of the comment section in 
          an output SPK kernel created by this application:
      </p>
      <PRE>
 ****************************************************************************
   USGS ISIS (spkwriter) Generated SPK Kernel
   Created By:   kbecker
   Date Created: 2011-04-07T22:32:24
 ****************************************************************************
 
 Position Data in the File
 -----------------------------------------------------------------------
 
       This file contains time ordered array of geometric states 
       (kilometers) and rates of change (kilometers/second) of body
       relative to center, specified relative to frame.
 
 
 Status
 -----------------------------------------------------------------------
 
       This kernel was generated for the purposes of storing C-Smithed
       position updates that may have been generated from ISIS processing
       techniques (controlled imaging, jitter analysis, etc...).  These
       SPK kernels are intended to mimick SPKs provided by individual
       missions (or NAV teams).
 

 Pedigree
 -----------------------------------------------------------------------
 
       This file was generated by an automated process.  The ISIS
       application spkwriter was used to read SPK kernel data
       contained within an ISIS cube file.  It then writes it as an
       individual segment in the SPK.  Hence, a list of files can be
       written to a single SPK kernel.  However, mixing the instruments
       contained in a single SPK kernel is discouraged.
 
 
 Angular Rates
 -----------------------------------------------------------------------
 
       This kernel typically contains state vectors of rates of change
       as a function of time but may only contain position vectors.  The
       ephemeris given is for the body moving relative to the center of
       motion.
 
 
 Usage Note
 -----------------------------------------------------------------------
 
       To make use of this file in a typical SPICE based application,
       users must supply at least a leapseconds kernel. This file is
       necessary for time-based conversions.  They should be the same
       kernels that were originally used to initialize the image.
 
       Segments in this file are actually individual ISIS files where the
       internally cached SPICE data is extracted and transformed into the
       appropriate content to satisfy NAIF's SPICE kernel storage
       requirements.  The contents of this kernel are summarized below.
  
        
User Comments
 -----------------------------------------------------------------------
 
         NONE

 Segment (by file) Summary
 -----------------------------------------------------------------------
 
       The follow sections describe each segment in this SPK kernel.  Each
       segment is a file in the input list.  When running ISIS spiceinit,
       the kernels listed for each file should be supplied to ensure proper
       geometry can be reproduced accurately.
 

-----------------------------------------------------------------------
  File:        viking.cub
  Segment ID:  084A14 (ProductId)
  StartTime:   1976-09-13T13:19:51.309
  EndTime:     1976-09-13T13:19:51.315
  Target Body: Body -27, VO1
  Center Body: Body 499, MARS
  RefFrame:    B1950
  Records:     3
  HasVV:       YES
  PolyDegree:  1
  CamVersion:  1
  Kernels:     
    $base/kernels/spk/de405.bsp
    $viking1/kernels/spk/viking1a.bsp
    $viking1/kernels/ck/vo1_sedr_ck2.bc
    $viking1/kernels/fk/vo1_v10.tf
    $base/kernels/pck/pck00009.tpc
    $viking1/kernels/iak/vikingAddendum003.ti
    $base/kernels/lsk/naif0009.tls
    $viking1/kernels/sclk/vo1_fict.tsc
    $viking1/kernels/sclk/vo1_fsc.tsc
    $base/dems/molaMarsPlanetaryRadius0005.cub
    viking.bsp
      </PRE>
      <p>
          To extract the contents of the SPICE SPK kernel it is recommended you 
          use the SPICE   <b>commnt</b> utility.  The form of the command to
          extract the contents is <b>commnt -r PSP_001446_1790_RED2_0.bc</b>.
          This SPICE utility can be downloaded from NAIF's web site from one of
          the supported operating system archtectures at <a href="ftp://naif.jpl.nasa.gov/pub/naif/utilities">
          ftp://naif.jpl.nasa.gov/pub/naif/utilities</a>.                                        
      </p>
      <p>
          The SUMMARY parameter is provided as a file name that will contain the 
          comments section of the output SPK kernel file.   This can be used in 
          addition to or in lieu of the TO parameter.  Getting the contents of 
          the comment section of the NAIF SPK SPICE kernel in the TO file 
          requires the NAIF utility program,  <b>commnt</b> . 
      </p>
      <p>
          To use the newly created SPK SPICE kernel in the ISIS environment, you 
          use the <b>spiceinit</b> program providing, at a minimum, the SPK 
          kernel created by <b>spkwriter</b> in the <i>SPK</i> parameter. The
          basic command would be:
          <br/> <br/>
          <b>spiceinit from=PSP_001446_1790_RED2_0.cub 
              SPK=PSP_001446_1790_RED2_0.bsp</b>
          <br/>
           <br/>
          This would be the best case scenario should all the other kernels 
          listed in the comments be selected.  If they are not the same, then 
          you will need to resort to explicitly providing all of them in the 
          <b>spiceinit</b> command line.  Here is the command using the above 
          list for PSP_001446_1790_RED2_0:<br/>
          <br/>
          <b>
              spiceinit from=PSP_001446_1790_RED2_0.cub<br/> 
                LS='$base/kernels/lsk/naif0009.tls'<br/>
                PCK='$base/kernels/pck/pck00009.tpc'<br/>
                TSPK='$base/kernels/spk/de405.bsp'<br/> 
                IK='$mro/kernels/ik/mro_hirise_v11.ti'<br/>
                SCLK='$mro/kernels/sclk/MRO_SCLKSCET.00041.65536.tsc'<br/>
                CK=PSP_001446_1790_RED2_0.bc<br/>
                FK='$mro/kernels/fk/mro_v14.tf'<br/>
                SPK='$mro/kernels/spk/mro_psp1.bsp'<br/>
                IAK='$mro/kernels/iak/hiriseAddendum006.ti'<br/>
                SHAPE=USER<br/>
                MODEL='$base/dems/molaMarsPlanetaryRadius0004.cub'<br/>
          </b>
      </p>
       <p>
          The other important thing to note is that when you provide explicit 
          filenames in <b>spiceinit</b> parameters, you typically will be 
          <i>required</i> to give the full path the file.  If you do not do 
          this, then camera models cannot properly initialize because it will 
          always look for the file in the current directory.  An example 
          command should be  <b>spiceinit from=viking.cub 
          EXTRA=$PWD/viking.bsp</b> 
       </p>
      <p>
          See the <a href="http://naif.jpl.nasa.gov/naif">NAIF website</a> for 
          more information . 
      </p>
  </description>

  <category>
    <categoryItem>Import and Export</categoryItem>
    <categoryItem>Geometry</categoryItem>
  </category>

  <history>
    <change name="Kris Becker" date="2011-05-02">
      Original version
    </change>
    <change name="Debbie A. Cook" date="2011-05-27">
      Changed default for type to Hermite
    </change>
    <change name="Kris Becker" date="2014-03-24">
        Corrected with Apollo instruemnt dateset. User 
        comments provided in a COMFILE are now included in the generic comments 
        instead of completely replacing them. Added OVERLAP parameter to allow 
        user to specify how start/end time conflicts are handled.  Fixes #1739.
    </change>
    <change name="Kristin Berry" date="2015-11-06">
       Updated to work on newly spiceinited images (no jigsaw or other position update) using SPICE SPK type 13.
    </change>
</history>

  <groups>
    <group name="Input Files">
        <parameter name="FROM">
          <type>cube</type>
          <fileMode>input</fileMode>
          <internalDefault>None</internalDefault>
          <brief>
            Input cube to extract SPICE from
          </brief>
          <description>
              Use this option to create a NAIF SPICE kernel from a single ISIS 
              cube.  It can be used in conjunction with the FROMLIST option.
          </description>
          <filter>
            *.cub
          </filter>
        </parameter>
      <parameter name="FROMLIST">
        <type>filename</type>
        <fileMode>input</fileMode>
        <internalDefault>None</internalDefault>
        <brief>
          Input cube file list to generate kernels from
        </brief>
        <description>
          This file contains a list of ISIS cubes that will be used to generate 
          SPICE kernels from.  Each file is expected to be a level 0 image that 
          has at least had spiceinit run on it.  The relevant SPICE positions 
          and velocities are extracted from each file, translated to appropriate
          coordinates compatible with established mission criteria and written
          to the specified SPICE kernel file.

          WARNING- Data from missions with multiple cameras imaging
          concurrently should not be put into the same kernel unless
          the concurrent images were treated as a single observation
          in the bundle adjustment.  For instance, a left and right
          camera imaging concurrently could be considered to be a
          single observation.  If these images are not treated as a
          single observation in the bundle adjustment, they will
          likely have different positions/velocities for the same
          time coverage.  In this case two runs of spkwriter would
          be necessary:  one run using only left images and the
          other run using only right images.
        </description>
        <filter>
          *.lis
        </filter>
      </parameter>
    </group>

      <group name="SPK Parameters">
          <parameter name="TO">
            <type>filename</type>
            <fileMode>output</fileMode>
            <internalDefault>None</internalDefault>
            <filter>*.bsp</filter>
            <brief>
              Name of SPICE SPK kernel to create
            </brief>
            <description>
              Name of the output NAIF SPK SPICE kernel that will be generated 
              from the input file list.  This format will be consistant with the 
              selected NAIF spice kernel format.  The kernels should be directly 
              usable as a source for <b>spiceinit</b>  on files that fall 
              within the time segments of the input file list.
            </description>
          </parameter>
         
          <parameter name="TYPE">
              <type>integer</type> 
              <default><item>13</item></default>
              <brief>
                  Specify the type of SPK kernel to create
              </brief>
              <description>
                  SPKTYPE allows the user to specify which type of kernel to 
                  create.  Valid values are 1 to 18 for SPK kernels. However, at 
                  this time, only a limited number of the available types are 
                  supported.  The primary reason we do not support other types 
                  is that many of the other types do not apply to ISIS cube 
                  epheremis. Please see the 
                  <a href="http://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/req/spk.html">NAIF SPK reference</a>
                  document for additional information regarding NAIF SPK kernel 
                  types.
              </description>
              <list>
                  <option value="9">
                      <brief>
                          Lagrange Interpolation -- Unequal Time Steps
                      </brief> 
                      <description>
                          The ninth SPK data type represents a continuous
                          ephemeris using a discrete set of states and a 
                          Lagrange interpolation method. The epochs (also called 
                          `time tags') associated with the states need not be
                          evenly spaced. For a request epoch not corresponding 
                          to the time tag of some state, the data type defines a 
                          state by interpolating each component of a set of 
                          states whose epochs are `centered' near the request 
                          epoch.  Further details can be found 
                         <a href="http://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/req/spk.html#Type%209:%20Lagrange%20Interpolation%20---%20Unequal%20Time%20Steps">here</a>.
                      </description>
                  </option>
                  <option value="13">
                      <brief>
                          Hermite Interpolation -- Unequal Time Steps
                      </brief>  
                      <description>
                           The thirteenth SPK data type represents a continuous 
                           ephemeris using a discrete set of states and a 
                           sliding window Hermite interpolation method. The 
                           epochs, also called "time tags," associated with the 
                           states need not be evenly spaced. For any request 
                           epoch, the data type defines a state by interpolating 
                           a set of consecutive states, or "window,"  centered 
                           as closely as possible to the request epoch.  
                           Interpolated position values are obtained for each 
                           coordinate by fitting a Hermite polynomial to the 
                           window's set of position and velocity values for that 
                           coordinate; interpolated velocity is obtained by 
                           differentiating the interpolating polynomials. 
                           Further details can be found
                          <a href="http://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/req/spk.html#Type%2013:%20Hermite%20Interpolation%20---%20Unequal%20Time%20Steps">here</a>.
                      </description>
                  </option>
              </list>
          </parameter>   

          <parameter name="COMFILE">
            <type>filename</type>
            <fileMode>input</fileMode>
            <internalDefault>None</internalDefault>
            <brief>
                Optional file containing comments that are written to the output 
                SPK kernel
            </brief>
            <description>
                This file is optional and its contents will be added to the output 
                SPK SPICE kernel file specified by the TO parameter.  It may 
                contain additional information that users will be able to see 
                using the NAIF SPICE <b>commnt</b> utility.  The command to use 
                to extract the comment from the SPICE kernel file is                                         
                <b>commnt -r spk_kernel.bsp</b> where spk_kernel.bsp is a NAIF 
                SPK SPICE kernel file.
            </description>
            <filter>
              *.txt
            </filter>
          </parameter>
    
          <parameter name="SUMMARY">
            <type>filename</type>
            <fileMode>output</fileMode>
            <internalDefault>None</internalDefault>
            <filter>*.txt</filter>
            <brief>
              Name of file to write summary/documentation of the SPK contents
            </brief>
            <description>
              This file will contain the summarization and documentation that describes
              contents of the SPK kernel.  This can be provided in addition to 
              or in lieu of the output SPK kernel parameter TO.  Each segment is
              sorted by start time of the image.  This is the same ordering as
              the SPK kernel.
            </description>
          </parameter>

          <parameter name="OVERLAP">
              <type>string</type> 
              <brief>
                   Specify behavior should images contain common time coverage 
              </brief>
              <description>
                  This option allows the user to specify how images that contain 
                  start/end time overlaps are treat.  Users can specify this 
                  condition as an error or a warning.  Specification of ERROR 
                  will result in program termination and no output SPK file is 
                  generated.  WARNING will log the images with overlaps and the 
                  output TO SPK kernel is still generated. 
              </description>
              <default><item>ERROR</item></default>
              <list>
                <option value="ERROR">
                  <brief>Do not allow time overlaps in output SPK kernel</brief>
                  <description>
                    This option will treat images that have time overlaps as an 
                    error.  The output TO SPK kernel will <b>not</b> be 
                    generated if this option is specifed and an error is 
                    generated.
                  </description>
                </option>
                <option value="WARNING">
                  <brief>Allow time overlaps in output SPK kernel</brief>
                  <description>
                    This option will treat images that have time overlaps as a 
                    warning. The output TO SPK kernel is generated if this 
                    option is specifed but the overlapping images are reported 
                    in the log file.
                  </description>
                </option>
              </list>
          </parameter>

      </group>
  </groups>
</application>
