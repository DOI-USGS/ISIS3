<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id: isisminer.xml 6513 2016-01-14 23:04:44Z kbecker@GS.DOI.NET $ -->
<application name="isisminer" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://isis.astrogeology.usgs.gov/Schemas/Application/application.xsd">

  <brief>
       Run a series of algorithms (Strategies) that perform various operations on input 
       sources (Resources)
  </brief>

  <description>
    <p>
      The <b>isisminer</b> application assists in the identification, manipulation, and output of
      data from a variety of data sources.  One main source of input is 
      <a href="../caminfo/caminfo.html" target="_blank">caminfo</a>.
      Processing in the isisminer program is controlled by the contents of a 
      PVL-based, object-structured, configuration file provided in the CONFIG 
      parameter. There are two main PVL objects used in the configuration of an                       
      isisminer program run:  the <b>IsisMiner</b> object and the <b>Strategy</b> object. 
    </p>
    <h3>Strategy Algorithms</h3>
    <p>
      The <b>IsisMiner</b> object contains a series of Strategy objects. Strategy 
      objects are associated with a defined algorithm that performs some 
      operation on data called a Resource. Strategy objects contain 
      parameters that are needed by the algorithm to process Resource data. The 
      order of Strategy objects is important as the algorithms are executed in 
      the order they occur in the <b>IsisMiner</b> object. Each Strategy object must be 
      associated with a known Strategy Type. Other objects may exist anywhere in 
      the CONFIG file but are ignored when parsing Strategy objects unless they 
      are part of the algorithm. One common use for other objects in the CONFIG 
      file is to include database profiles that are used to provide access 
      information for the <a href="#DatabaseReader">DatabaseReader</a> strategy 
      (see below).
    </p>
    <h3>Data Resources</h3>
    <p>
      Strategy algorithms operate on a Resource. A Resource is a data container 
      that stores a set of PVL keyword/values that can have data storage 
      extensions (called Assets and GisGeometries).  These Assets can contain 
      anything created by Strategy objects for further analysis or processing and 
      could be unique to a set of Strategies. Resources have three major 
      components: keyword/values, GIS geometries and Assets.  Most of the data 
      manipulations occur on keyword/value elements.  A Resource may contain a 
      GIS geometry that is used in algorithms that work on geometric regions 
      using GIS operators (<a href="#GisIntersect">GIS Intersect</a>, 
      <a href="#GisOverlap">GIS Overlap</a>, <a href="#GisUnion">GIS Union</a>, 
     <a href="#StereoPair">StereoPair</a> ). Currently, GIS geometries must be 
      in well-known-text (WKT) or well-known-binary (WKB) as conversions are 
      restricted to text representations of geometries (format requirements are 
      the same as functions like 
      <a href="http://www.postgis.org/docs/ST_GeomFromText.html">ST_GeomFromWKT</a> and 
      <a href="http://www.postgis.org/docs/ST_GeomFromWKB.html">ST_GeomFromWKB</a>, 
      respectively). Resources may also contain Assets. Assets are typically 
      another list of Resources created from Strategies that are attached to a 
      (parent) Resource. If Assets are represented as Resource lists, they can 
      be processed by almost all Strategy algorithms using the                              
      <a href="#AssetSidebar">AssetSidebar</a> strategy (see below).
    </p>
    <p>
      Resources can come from many sources. One of the most common input 
      sources are databases. SQL queries can be specified directly in the <a 
      href="#DatabaseReader">DatabaseReader</a> strategy. Each row 
      returned when the query is executed is converted into a Resource. Other 
      data sources are comma separated values (CSV) files (using the <a 
      href="#CsvReader">CsvReader</a> strategy) where each row is a 
      Resource and each column is a keyword/value. The keyword name in the case 
      of a CSV file is the name of the column as specified in the header. Users 
      can also read in ISIS control networks and process each Control Measure as 
      a Resource.  And, of course, ISIS cube files and other PVL file formats 
      are also input sources (see <a href="#PvlReader">PvlReader</a> strategy). 
      Strategies are designed to operate on a single Resource. This allows for a 
      very narrow scope of design considerations to make coding Strategies quite 
      easy. 
    </p>
   <h3>Control Options using Keyword Argument Substitution</h3>
    <p>
      Some very clever and sophisticated Strategy configurations can be created 
      but to make them generally useful, the user may need to change some 
      parameters within Strategies, such as output directories or file names 
      that can be modified at runtime without having to edit the CONFIG files 
      directly. To allow some control options, there are two optional 
      application parameters provided: GLOBALS and PARAMETERS.
    </p>
    <p>
      The GLOBALS parameter can specify the name of a file that contains PVL 
      keywords and values. The complete contents of all the keywords found in 
      the file, regardless of Object/Group structure are loaded immediately when 
      isisminer first runs.  The keywords contained in this file can be used as 
      substitutions in all or part of many keyword value specifications used 
      within most Strategies (described below).
    </p>
    <p>
      The PARAMETERS input parameter is provided so that users can create simple 
      keyword/value pairs on the command line that can be used in substitutions 
      of part of all keyword values used in Strategies in the same manner 
      GLOBALS keywords are substituted. For any keyword that is contained in 
      both the GLOBALS and PARAMETERS keyword set, keywords in PARAMETERS always 
      take precedence. This allows users to override keywords in GLOBALS as 
      needed during keyword lookup and replacement operations to fully determine 
      values of keywords in real time when Strategies are executed. Since equal 
      signs are not allowed in ISIS application parameters, keyword names and 
      values are separated by a colon.  Multiple keywords can be specified and 
      are separated by the @ symbol. For example, 
      <em>PARAMETERS=&quot;inputdir:$PWD@outputdir:$PWD/Results&quot;</em>
      will create two keywords, inputdir and outputdir, with inputdir set to the full path 
      of the current directory running the job and outputdir set to a 
      subdirectory in the current directory called <em>Results</em>.
    </p>
    <p>
      Essentially, the GLOBALS and PARAMETERS elements creates a hierarchical 
      lookup for keyword substitutions where PARAMETERS are searched first, then 
      GLOBALS, for argument substitution of elements within a keyword value. At 
      times, when individual Resources drive output operations (e.g., 
      <a href="#AssetSidebar">AssetSidebars</a>), the individual Resource keywords become available for 
      substitution as well and are the first set of keywords searched before 
      PARAMETERS and GLOBALS. Argument substitutions are specified using the 
      <em>%n</em> symbol in keyword values. Here, the <em>n</em> is a number from 1 to the 
      number of values corresponding to an associated keyword with the same name 
      but with <em>Args</em> appended to it.  The <em>n</em>th value of this keyword is 
      itself a keyword where its value is substituted in the corresponding %n 
      occurrence in the original keyword. For example, in the CSVReader strategy, 
      the name of a file to read the contents from is specified in the <em>CsvFile</em>
      keyword.  To allow arbitrary specification of the input file 
      without editing the CONFIG file to change it for each use of the CONFIG 
      file, the PARAMETERS option can be used to specify the path to a named 
      file or the entire file name by creating a keyword called 
      <em>CsvFileArgs</em>. This is the general form for creating a keyword 
      value substitution that uses two associated keywords with the first being 
      any keyword and the second keyword having <em>Args</em> appended to the 
      first keyword which contains other keywords that will be used to 
      substitute arguments with. 
    </p>
    <p>
      See the complete stereo example provided for isisminer that demonstrates 
      many of the concepts discussed here and in the Strategy descriptions 
      below. It will also provide output and describe the results of a MESSENGER 
      MDIS stereo processing run.
    </p>
    <h3>Descriptions of Strategies</h3>
    <p>
      The following section describes all the Strategy algorithms currently 
      available in <b>IsisMiner</b>. Strategies iterate through all <em>active</em> 
      Resources. One of the features in isisminer that provides a lot of 
      flexibility in the system is that Resources are never deleted unless users 
      provide explicit instructions to do so (see  <a href="#ResourceManager">ResourceManager</a>). 
      Each Resource has an inherent state that indicates if it is active, meaning 
      it is available for processing, or inactive. Strategies like the 
      <a href="#Limit">Limit</a> or <a href="#Filter">Filter</a> will evaluate 
      values of keywords for boolean equations or strings, respectively, where 
      true conditions keep Resource states as active, and false conditions set
      their states to inactive. Inactive Resources are not processed in 
      subsequent Strategies unless explicitly reactivated (again using the 
      <a href="#ResourceManager">ResourceManager</a>). Strategies typically 
      only use active Resources when normally processed. Exceptional is when a 
      Strategy provides options to select an additional processing set of 
      Resources (see <a href="#GisOverlap">GisOverlap</a>, 
      <a href="#StereoPair">StereoPair</a> and <a href="#Sidebar">Sidebar</a>). 
      Those Resources accept a complete isisminer configuration where the 
      object specification can be embedded within the Strategy object or a file 
      name can be provided that contains a complete isisminer configuration 
      (much like provided in CONFIG). This design allows users to progressively 
      select Resources for processing and reactivate the entire list at any 
      point in the execution of Strategies.  The Strategies below provide the 
      user with many options to help identify only data with specified/desired 
      characteristics for evaluation and subsequent processing.
    </p>

    <h3>Special Strategy Keywords</h3>
    <p>
       There are some keywords available that can be used in every 
       Strategy beyond their unique keywords described below. Many of these 
       keywords provide additional processing control or options that produce 
       information in the form of text to the standard output stream. The 
       following tables provide descriptions of the keywords that can be 
       used in all Strategies. Some will apply only under certain conditions 
       which are described in the context of the descriptions. All of these 
       keywords are optional except where indicated.
    </p> 
   <p>
       Some miscellaneous keywords are available that provide general 
       information and/or assist users in debugging Strategies that appear to 
       result in unexpected behavior.  Here are other keywords that users can 
       set and are available in all Strategies. 
    </p>
    <TABLE border = "1">
     <CAPTION><h4>Miscellaneous Keywords</h4></CAPTION>
        <TR>
          <TH>Keyword</TH>
          <TH>Disposition</TH>
          <TH>Description</TH>
        </TR>
     <TR>
        <TD>Program</TD>
        <TD>Constant</TD>
        <TD>
         Name of the program (isisminer).
        </TD>
      </TR>
     <TR>
        <TD>Version</TD>
        <TD>Constant</TD>
        <TD>
           A text string that provides the version of the application.
        </TD>
      </TR>
     <TR>
        <TD>Revision</TD>
        <TD>Constant</TD>
        <TD>
           The revision number of the program as provided in the source code repository.
        </TD>
      </TR>
     <TR>
        <TD>Runtime</TD>
        <TD>Constant</TD>
        <TD>
          A string that provides the time that the application was started. It is of 
          the form YYYY-MM-DDThh:mm:ss. 
        </TD>
      </TR>
     <TR>
        <TD>CONFIG</TD>
        <TD>Constant</TD>
        <TD>
          Provides the value (name of the file) given by the user in the CONFIG 
          parameter.
        </TD>
      </TR>
     <TR>
        <TD>PARAMETERS</TD>
        <TD>Constant</TD>
        <TD>
          Provides the value (keyword/value)  given by the user in the PARAMETERS 
          parameter.
        </TD>
     </TR>
     <TR>
        <TD>GLOBALS</TD>
        <TD>Constant</TD>
        <TD>
          Provides the value (name of the file) given by the user in the GLOBALS 
          parameter.
        </TD>
     </TR>
      <TR>
        <TD>ApplyToDiscarded</TD>
        <TD>Optional</TD>
        <TD>
          When <em>True</em>, all Resources regardless of active or discard state, are 
          processed in the current Strategy. This is handy when you want all Resources
         to be processed and would otherwise require use of a <a href="#Sidebar">Sidebar</a> 
          strategy to set states for all Resources.  
        </TD>
      </TR>
      <TR>
        <TD>ShowProgress</TD>
        <TD>Optional</TD>
        <TD>
          When <em>True</em>, a progress bar as seen in ISIS applications is created and 
          updated as each Resource is processed in a Strategy. This keyword can be 
          set in any Strategy definition. This is useful to ensure processing is 
          occurring in long Strategy algorithms. 
        </TD>
      </TR>
      <TR>
        <TD>Debug</TD>
        <TD>Optional</TD>
        <TD>
          If set to <em>True</em> in any Strategy definition, information in the form of 
          print statements are sent to standard output stream that report certain 
          information about processing that is occurring in a Strategy. This can 
          result in a large amount of information that developers use to determine 
          Strategy behavior. The reported form and content will vary widely and is solely 
          at the discretion of the developer.
        </TD>
      </TR>
    </TABLE>

    <p>
      The following table describes keywords that pertain to manipulation of 
      GIS  geometries. They are available to all Strategies that use GIS 
      geometries but only apply where indicated.
    </p>
   <TABLE border = "1">
   <CAPTION><h4>GisGeometry Related Keywords</h4></CAPTION>
      <TR>
        <TH>Keyword</TH>
        <TH>Disposition</TH>
        <TH>Description</TH>
      </TR>
      <TR>
        <TD>GisGeometry</TD>
        <TD>Optional</TD>
        <TD>
          Specifies the source of the geometry. The value of this keyword varies 
          according to the type of GIS geometry being processed. The geometry type 
          is specified in the GisType keyword.
        </TD>
      </TR>
      <TR>
        <TD>GisGeometryArgs</TD>
        <TD>Optional</TD>
        <TD>
          Allows user to provide keywords that are used as substitution values 
          in the GisGeometry keyword.  The value in GisGeometry may contain 
          strings of the form <em>%n</em> where n corresponds to the array index, 
          starting from 1, of the values in the GisGeometryArgs keyword. Each 
          value in the GisGeometryArgs array of values is expected to name a 
          valid keyword that can be resolved using the hierarchical parameter 
          search.
        </TD>
      </TR>
      <TR>
        <TD>GisGeometryKey</TD>
        <TD>Optional</TD>
        <TD>
          This is a shorthand method to specify a keyword in the Resource which 
          fully contains the GisGeometry. It will override any value specified 
          in GisGeometry and must name a valid Resource keyword containing a GIS 
          geometry. GisGeometryArgs can be used to substitute arguments that may 
          be contained in the value retrieved in the keyword specified by 
          GisGeometryKey.
        </TD>
      </TR>
      <TR>
        <TD>GisType</TD>
        <TD>Required</TD>
        <TD>
          Specifies the type of GIS geometry to be processed (converted from text 
          form). Valid types are WKT, WKB, CUBE or ISISCUBE.
        </TD>
      </TR>
      <TR>
        <TD>RemoveGisKeywordAfterImport</TD>
        <TD>Optional</TD>
        <TD>
          If set to <em>True</em>, then the keyword referenced in GisGeometryKey is 
          deleted from the Resource after its value is retrieved for processing. 
          This is an attempt to reduce memory if this value is no longer needed 
          as these strings can be quite large.
        </TD>
      </TR>
      <TR>
        <TD>GisSimplifyTolerance</TD>
        <TD>Optional</TD>
        <TD>
          This keyword, if present, specifies the tolerance in units of the GIS 
          geometry (typically in units of degrees) to use when applying a 
          <a href="http://www.postgis.org/docs/ST_SimplifyPreserveTopology.html">
          Douglas-Peucker</a> algorithm to simplify an imported geometry after 
          conversion from text. The tolerance in degrees can be converted to 
          pixels by using a simple formula of circumference at the equator. For 
          example, for Mercury the radius is 2440 km. At the equator the 
          circumference is 2 * pi * 2440 = 15,331 km. Each degree of contains 
          15,331/360 = 42 km.  If GisSimplifyTolerance = 0.005, the tolerance 
          is ~0.212 km (212 meters) at the equator. This tolerance was chosen 
          because our target shape model/map is ~200 meters/pixel. In a set of three
          consecutive points along the boundary, the minimum distance from the middle point
          of the set to the line segment that connects the first and third points is computed.
          If this distance is less than the tolerance, then these boundary points are eliminated. 
        </TD>
       </TR>
       <TR>
         <TD>GisGeometryPointsKey</TD>
         <TD>Optional</TD>
         <TD>
            If provided when GisSimplifyTolerance is specified, this is the base 
            name of a set of keywords that describe the simplified geometry. Three 
            keywords are created from the GIS geometry simplification process. 
            If the value of GisGeometryPointsKey = GisSimplePoints, then the 
            keywords GisSimplePoints contains the total number of points after 
            simplification. GisSimplePointsOriginal contains the total number of 
            points prior to simplification and GisSimplePointsTolerance is the 
            value of GisSimplifyTolerance. These keywords are written to each 
            Resource from which GIS geometries are converted from text.
         </TD>
        </TR>
      <TR>
        <TD>GisMethod</TD>
        <TD>Optional</TD>
        <TD>
          When applying geometry operators in Strategies, the GEOS system 
          provides a very efficient, geometry-based, RTree search algorithm to 
          make multiple search queries very fast. If the search is limited to one 
          geometry operating on all active Resource geometries, then creating the 
          RTree is unnecessary and the operation can be applied to every geometry. 
          This will be faster than creating the RTree from all Resource geometries 
          and then applying the RTree search for a single geometry. Set the value 
          of this keyword to <em>direct</em> if you want to use direct GIS operators. Or 
          use <em>rtree</em> for use of the RTree search. Defaults to 
          <em>direct</em>. This value does not apply to 
          <a href="#GisOverlap">GisOverlap</a> or <a href="#StereoPair">StereoPair</a>.
        </TD>
      </TR>
    </TABLE>
 

    <a name="top"></a>
    <h3> Types of Strategies</h3>
    <ul>
      <li><a href="#AssetSidebar">AssetSidebar Strategy Description</a></li>
      <li><a href="#Calculator">Calculator Strategy Description</a></li>
      <li><a href="#CnetReader">Control Network Reader Strategy Description</a></li>
      <li><a href="#CsvReader">CSV Reader Strategy Description</a></li>
      <li><a href="#CsvWriter">CSV Writer Strategy Description</a></li>
      <li><a href="#DatabaseReader">Database Reader Strategy Description</a></li>
      <li><a href="#Filter">Filter Strategy Description</a></li>
      <li><a href="#GisIntersect">GIS Intersect Strategy Description</a></li>
      <li><a href="#GisOverlap">GIS Overlap Strategy Description</a></li>
      <li><a href="#GisUnion">GIS Union Strategy Description</a></li>
      <li><a href="#IsNumeric">IsNumeric Strategy Description</a></li>
      <li><a href="#Limit">Limit Strategy Description</a></li>
      <li><a href="#NumericalSort">Numerical Sort Strategy Description</a></li>
      <li><a href="#PdsTableCreator"> PDS Table Creator Description</a></li>
      <li><a href="#PdsTableFormat">PDS Table Format Strategy Description</a></li>
      <li><a href="#PdsTableReader">PDS Table Reader Strategy Description</a></li> 
      <li><a href="#PvlReader">PVL Reader Strategy Description</a></li>
      <li><a href="#ResourceManager">Resource Manager Strategy Description</a></li>
      <li><a href="#RunCommand">Run Command Strategy Description</a></li>
      <li><a href="#Sidebar">Sidebar Strategy Description</a></li>
      <li><a href="#StereoPair">StereoPair Strategy Description</a></li>
    </ul>

    <!-- Document AssetSidebar Strategy --> 
    <p>
      <h1><a name="AssetSidebar">AssetSidebar Strategy Description</a></h1>
      The <strong>AssetSidebar</strong> strategy provides the ability to process 
      Resource Assets with most other isisminer Strategies.
    </p>
    <p>
      This Strategy can be used to add Assets to any active Resource. By 
      providing the <em>Operation</em> keyword with a value of <em>Create</em>,
      the user can then process an Asset to be added to the active Resources (with 
      the <a href="#PvlReader">PvlReader</a> or <a href="#CsvReader">CsvReader</a>
      strategies, for example). Note that when using <em>create</em> as a value for the
      <em>Operation</em> keyword, the specified Strategy in the AssetSidebar strategy
      will not be applied to any existing Assets contained in the active Resources. In fact, 
      any Asset that exists in a Resource of the same name will be deleted and replaced with
      the results of the AssetSidebar processing. Note that some Strategies create Assets
      directly in the course of executing its algorithm and do not require an AssetSidebar
      to create them.
    </p>
    <p>
      When creating Assets, users have several options to create the Resource 
      list for the Asset. Using the  <em>CreateSource</em> keyword with a 
      value of <em>Copy</em>, a copy of all Resources in the input list is 
      generated prior to executing the Strategies to process the Assets. The 
      active/deactive status of each new Resource in this list is managed 
      independently from the list outside of the AssetSidebar processing it. However,
      keywords,  other Assets, and the GIS Geometry remain identical to those of the 
      parent Resource. To create a completely independent 
      copy of the Resources, set <em>CreateSource</em>  to <em>Clone</em>. 
      This option clones all the status and data of each Resource and creates a
      completely new Resource.  To start from scratch and create an Asset by 
      other means, use <em>None</em>. Defaults to <em>Copy</em> the 
      Resource list.
    </p>
    <p>
      This Strategy may also be used to apply a specified Strategy to any 
      active Resource's Assets. For <em>Operation</em> set to <em>Process</em>, the 
      specified Strategy in the AssetSidebar will be applied to the active 
      Resources' Assets and replace the processed Asset in active Resources as 
      new Assets. This mode is particularly useful for processing Assets created 
      directly by other Strategies.
    </p>
    
    <TABLE border = "1">
    <CAPTION><h4>AssetSidebar Strategy Object Keywords</h4></CAPTION>
      <TR>
        <TH>Keyword</TH>
        <TH>Disposition</TH>
        <TH>Description</TH>
      </TR>
      <TR>
        <TD>Name</TD>
        <TD>Required</TD>
        <TD>
          User sets the name of the AssetSidebar strategy.
        </TD>
      </TR>
      <TR>
        <TD>Type</TD>
        <TD>Required</TD>
        <TD>
          Identifies the AssetSidebar strategy - must be <em>AssetSidebar</em> or it will
          not be recognized as a valid Strategy by isisminer.
        </TD>
      </TR>
      <TR>
        <TD>Description</TD>
        <TD>Optional</TD>
        <TD>
          User provides a description of the AssetSidebar strategy.
        </TD>
      </TR>
      <TR>
        <TD>Asset</TD>
        <TD>Required</TD>
        <TD>
          Specify the name of the Asset to create or append to the active Resource.
        </TD>
     </TR> 
     <TR>
        <TD>Operation</TD>
        <TD>Optional</TD>
        <TD>
          Specifies how Assets will be processed (see the AssetSidebar 
          description). Valid values are <em>process</em> and <em>create</em>.
          Use <em>process</em> if you want to process an existing list and preserve the resulting
          contents. In this mode, you can delete them all after processing the 
          Resource lists that exist for each Resource (a list of Resources 
          attached to a Resource).
        </TD>
      </TR>
     <TR>
        <TD>CreateSource</TD>
        <TD>Optional</TD>
        <TD>
          <br><h2 align="center">Asset Creation Options</h2></br>
          <TABLE BORDER="1">
            <CAPTION align="top">
              When creating new Assets, users have options that include 
              creating Assets from all existing Resources, activated and 
              deactivated. To create Assets whose contents and status are 
              preserved, this Strategy is designed to create separate 
              management of Asset Resources that are not affected from other 
              processes (Strategies). Incoming lists can be copied, cloned or 
              an empty list can be chosen to start from scratch. It should be 
              noted that the <a href="#ResourceManager">ResourceManager</a> 
              strategy can be used to manipulate the resulting list contents.
            </CAPTION>
            <TR>
              <TH>Parameter</TH>
              <TH>Description</TH>
            </TR>
            <TR>
              <TD> Copy </TD>
              <TD>
                This option will create a <em>shallow</em> copy of all 
                existing Resources as candidates for the newly created Asset. 
                This option creates a copy of the Resource data but all its 
                contents are still shared with the parent Resource it was 
                created from. However, its active status can be managed 
                independent of its parent. When a copy is created, its 
                current active status is propagated to the copy.
              </TD>
            </TR>
            <TR>
                <TD>Clone</TD>
                <TD>
                  This option will make a copy of every Resource in the 
                  current list just like the <em>Copy</em> option but performs 
                  a deep copy of all data <em>except</em> other Assets. 
                  Existing Assets are all deleted when cloned. Resources that 
                  remain in this new Asset now become unique and live as long 
                  as the Asset remains in the Resource it was created for.
                </TD> 
              </TR>
              <TR>
              <TD>None</TD>
              <TD>
                Starts from scratch and generates an initial empty list of 
                Resources for the Asset prior to executing Strategies. It is 
                assumed other Strategy options available in  
                <em>isisminer</em> will be used to create the Resources in 
                the new Asset. 
              </TD>
            </TR>
          </TABLE>
        </TD>
      </TR>
      <TR>
        <TD>IsisMiner</TD>
        <TD>Optional</TD>
        <TD>
          PVL object containing an <b>IsisMiner</b> definition to run on the Assets. 
          Either this or StrategyConfigFile must be specified. 
        </TD>
      </TR>
      <TR>
        <TD>StrategyConfigFile</TD>
        <TD>Optional</TD>
        <TD>
          The CONFIG file to run on the Assets. Either this or an <b>IsisMiner</b> object must be 
          specified.
        </TD>
      </TR>
      <TR>
        <TD>StrategyConfigFileArgs</TD>
        <TD>Optional</TD>
        <TD>
          Replace placeholders in StrategyConfigFile of the form <em>%1</em>, 
          <em>%2</em>, etc. up to <em>%99</em> with the arguments specified.
          Each placeholder is replaced by its corresponding argument in order. 
        </TD>
      </TR>
    </TABLE>
    
    <p>
      The following is an example of an AssetSidebar strategy
      <pre>
Object = Strategy
  Name        = TestCreateAsset
  Type        = AssetSidebar
  Asset       = AssetA
  Operation   = Create
  CreateSource = None
  Description = "Adds AssetA (Assets read from test.csv) to 
  the active Resources" 
  Object = IsisMiner 
    Object = Strategy
      Name = ReadAssetTest
      Type = CsvReader
      CsvFile = "test.csv"
      HasHeader = True
      SkipLines = 0
      IgnoreComments = False
      Delimiter = ", "
    EndObject
  EndObject
EndObject
      </pre>
    </p>
    <p align="right"><a href="#top"><font size="1">
      Return to List of Strategy Types
    </font></a></p>
    <!-- End AssetSidebar Strategy -->
    
    <!-- Document Calculator Strategy -->
    <p>
      <h1><a name="Calculator">Calculator Strategy Description</a></h1>
      The <strong>Calculator</strong> provides the ability to do calculations
      on Resource keywords and to store the results in a keyword that is 
      immediately added to the Resource. If any equation fails for a Resource, then
      that Resource is discarded and no further equations are executed for that 
      Resource.
    </p>
    <p>
      There are two ways equations can be specified. The basic method 
      requires two keywords to compute, execute, and store the results in each 
      Resource. The <em>Equation</em> keyword stores the complete equation to 
      execute for each Resource and uses the <em>Result</em> keyword value to 
      name the keyword to store the result of the equation. 
    </p>
    <p>
      An alternative form uses a PVL Group named <em>Equations</em> which 
      contains a sequence of keywords whose values are equations. A keyword of 
      the same name is created in each Resource with the value of each 
      successfully computed equation. Values of previous equations can be used 
      in subsequent equations. No other keyword may exist in the 
      <em>Equations</em> group as every keyword is expected to be a valid 
      equation. 
    </p>
    <p>
      Currently this Strategy supports scalars in the form of integers and doubles.
      In addition, it supports the circle constant <b>pi</b> and Euler's constant <b>e</b>.
      Functions, such as <b>sin</b> and <b>cos</b>, are followed by parentheses and a list of
      arguments. Operators such as <b>*</b> and <b>+</b> are placed in between their arguments.
      If a token is not recognized as a scalar, operator, or function, then it is assumed
      to be a keyword, and will be replaced by the corresponding value in the
      Resource.
    </p>
    <p>
      <b>All trigonometric functions expect angles in radians, not degrees 
      so use the rads() function!</b>
    </p>
    <p>
      The following table shows all currently supported operators and functions sorted
      by precedence (0 is the highest precedence). Functions have a precedence of 1 and
      operators have a precedence of 2 or higher, according to order of operations.
      All examples are valid equations using 'x' and 'y' as variables:
    </p>  
   
    <TABLE border = "1">
      <TR>
        <TH>Precedence<br />Level</TH>
        <TH>Operator</TH>
        <TH>Description</TH>
        <TH>Example</TH>
      </TR>
      <TR>
        <TD>0</TD>
        <TD>{ [ ( ) ] }</TD>
        <TD>Parentheses, brackets, or braces</TD>
        <TD>y*(x+[30-{x/pi}])</TD>
      </TR>  
      <TR>
        <TD>1</TD>
        <TD>-- or neg</TD>
        <TD>Negative sign</TD>
        <TD>--x + y or neg(x) + y</TD>
      </TR>  
      <TR>
        <TD>1</TD>
        <TD>abs</TD>
        <TD>Absolute value</TD>
        <TD>abs(y - x)</TD>
      </TR>  
      <TR>
        <TD>1</TD>
        <TD>min</TD>
        <TD>Minimum</TD>
        <TD>x + min(5, y) + min(y, z)</TD>
      </TR>  
      <TR>
        <TD>1</TD>
        <TD>max</TD>
        <TD>Maximum</TD>
        <TD>20 * max(x,y)</TD>
      </TR>   
      <TR>
        <TD>1</TD>
        <TD>sin</TD>
        <TD>Sine</TD>
        <TD>x * sin(123/321)</TD>
      </TR>  
      <TR>
        <TD>1</TD>
        <TD>cos</TD>
        <TD>Cosine</TD>
        <TD>cos(.02*50)</TD>
      </TR>  
      <TR>
        <TD>1</TD>
        <TD>tan</TD>
        <TD>Tangent</TD>
        <TD>tan(x/y)</TD>
      </TR>  
      <TR>
        <TD>1</TD>
        <TD>csc</TD>
        <TD>Cosecant</TD>
        <TD>12.3 + csc(x)</TD>
      </TR>  
      <TR>
        <TD>1</TD>
        <TD>sec</TD>
        <TD>Secant</TD>
        <TD>sin(pi/60) + (sec(y))^2</TD>
      </TR>  
      <TR>
        <TD>1</TD>
        <TD>cot</TD>
        <TD>Cotangent</TD>
        <TD>x + cot(x) - 42</TD>
      </TR>  
      <TR>
        <TD>1</TD>
        <TD>asin</TD>
        <TD>Arcsine</TD>
        <TD>0.006 ^ asin(x*5)</TD>
      </TR>  
      <TR>
        <TD>1</TD>
        <TD>acos</TD>
        <TD>Arccosine</TD>
        <TD>acos(1/[2*pi])</TD>
      </TR>  
      <TR>
        <TD>1</TD>
        <TD>atan</TD>
        <TD>Arctangent</TD>
        <TD>atan(x/e)</TD>
      </TR>  
      <TR>
        <TD>1</TD>
        <TD>atan2</TD>
        <TD>Arctangent2</TD>
        <TD>atan2(--10)</TD>
      </TR>  
      <TR>
        <TD>1</TD>
        <TD>sinh</TD>
        <TD>Hyperbolic sine</TD>
        <TD>55 + sinh(y)</TD>
      </TR>  
      <TR>
        <TD>1</TD>
        <TD>cosh</TD>
        <TD>Hyperbolic cosine</TD>
        <TD>cosh(x^pi)</TD>
      </TR>  
      <TR>
        <TD>1</TD>
        <TD>tanh</TD>
        <TD>Hyperbolic tangent</TD>
        <TD>tanh(x)</TD>
      </TR>  
      <TR>
        <TD>1</TD>
        <TD>log or ln</TD>
        <TD>Natural log</TD>
        <TD>ln(abs(1/[y-x]))</TD>
      </TR>  
      <TR>
        <TD>1</TD>
        <TD>log10</TD>
        <TD>Log base 10</TD>
        <TD>99 + log10(x-160)</TD>
      </TR>  
      <TR>
        <TD>1</TD>
        <TD>sqrt</TD>
        <TD>Square root</TD>
        <TD>sqrt(abs[1000 - y])</TD>
      </TR>  
      <TR>
        <TD>1</TD>
        <TD>rads</TD>
        <TD>Convert degrees to radians</TD>
        <TD>x / cos(rads(x))</TD>
      </TR>  
      <TR>
        <TD>1</TD>
        <TD>degs</TD>
        <TD>Convert radians to degrees</TD>
        <TD>degs(acos(x))</TD>
      </TR>  
      <TR>
        <TD>1</TD>
        <TD>and</TD>
        <TD>Bitwise and</TD>
        <TD>and(x, y)</TD>
      </TR>
      <TR>
        <TD>1</TD>
        <TD>or</TD>
        <TD>Bitwise or</TD>
        <TD>or(x, y)</TD>
      </TR>
      <TR>
        <TD>1</TD>
        <TD>mod</TD>
        <TD>Modulus <b><i>(Note: the arguments are rounded to the nearest integer)</i></b></TD>
        <TD>mod(x, y)</TD>
      </TR>
      <TR>
        <TD>1</TD>
        <TD>fmod</TD>
        <TD>Float modulus, remainder of division</TD>
        <TD>fmod(x, y)</TD>
      </TR>
      <TR>
        <TD>2</TD>
        <TD>^</TD>
        <TD>Exponentiation</TD>
        <TD>x ^ 3</TD>
      </TR>  
      <TR>
        <TD>3</TD>
        <TD>*</TD>
        <TD>Multiplication</TD>
        <TD>10 * x</TD>
      </TR>  
      <TR>
        <TD>3</TD>
        <TD>/</TD>
        <TD>Division</TD>
        <TD>y / x</TD>
      </TR>  

      <TR>
        <TD>4</TD>
        <TD>&lt;&lt;</TD>
        <TD>Bitwise left shift</TD>
        <TD>x &lt;&lt; 4</TD>
      </TR>  
      <TR>
        <TD>4</TD>
        <TD>>></TD>
        <TD>Bitwise right shift</TD>
        <TD>y + (x >> 3)</TD>
      </TR>  
      <TR>
        <TD>5</TD>
        <TD>+</TD>
        <TD>Addition</TD>
        <TD>123 + 0.004 + x</TD>
      </TR>  
      <TR>
        <TD>5</TD>
        <TD>-</TD>
        <TD>Subtraction</TD>
        <TD>10 - (--x)</TD>
      </TR>
      <TR>
        <TD>6</TD>
        <TD>&amp;</TD>
        <TD>Bitwise and</TD>
        <TD>x &amp; y</TD>
      </TR>
      <TR>
        <TD>6</TD>
        <TD>|</TD>
        <TD>Bitwise or</TD>
        <TD>x | y</TD>
      </TR>
      <TR>
        <TD>6</TD>
        <TD>&amp;&amp;</TD>
        <TD>Logical and</TD>
        <TD>x &amp;&amp; y</TD>
      </TR>
      <TR>
        <TD>6</TD>
        <TD>||</TD>
        <TD>Logical or</TD>
        <TD>x || y</TD>
      </TR>
      <TR>
        <TD>6</TD>
        <TD>%</TD>
        <TD>Float modulus, remainder of division</TD>
        <TD>x % y</TD>
      </TR>
      <TR>
        <TD>6</TD>
        <TD>></TD>
        <TD>Greater than <b><i>(Note: result is 0 or 1)</i></b></TD>
        <TD>x > y</TD>
      </TR>  
      <TR>
        <TD>6</TD>
        <TD>&lt;</TD>
        <TD>Less than <b><i>(Note: result is 0 or 1)</i></b></TD>
        <TD>x * (x &lt; y) </TD>
      </TR>  
      <TR>
        <TD>6</TD>
        <TD>&lt;=</TD>
        <TD>Less than or equal <b><i>(Note: result is 0 or 1)</i></b></TD>
        <TD>x &lt;= 0.505</TD>
      </TR>  
      <TR>
        <TD>6</TD>
        <TD>>=</TD>
        <TD>Greater than or equal <b><i>(Note: result is 0 or 1)</i></b></TD>
        <TD>x * (x >= 101)</TD>
      </TR>  
      <TR>
        <TD>6</TD>
        <TD>==</TD>
        <TD>Equal to <b><i>(Note: result is 0 or 1)</i></b></TD>
        <TD>x == (y/2)</TD>
      </TR>  
      <TR>
        <TD>6</TD>
        <TD>!=</TD>
        <TD>Not equal to <b><i>(Note: result is 0 or 1)</i></b></TD>
        <TD>x != y</TD>
      </TR> 
      </TABLE>     

    <TABLE BORDER="1">
      <CAPTION><h4>Calculator Strategy Object Keywords</h4></CAPTION>
      <TR>
        <TH>Keyword</TH>
        <TH>Disposition</TH>
        <TH>Description</TH>
      </TR>
      <TR>
        <TD>Name</TD>
        <TD>Required</TD>
        <TD>
          User-defined name of the Calculator strategy.
        </TD>
      </TR>
      <TR>
        <TD>Type</TD>
        <TD>Required</TD>
        <TD>
          Identifies the Calculator strategy - must be <em>Calculator</em> or 
          it will not be recognized as a valid Strategy by isisminer.
        </TD>
      </TR>
      <TR>
        <TD>Description</TD>
        <TD>Optional</TD>
        <TD>
          User provides a description of the Calculator strategy.
        </TD>
      </TR>
      <TR>
        <TD>Initializers</TD>
        <TD>Optional</TD>
        <TD>
          PVL Group containing Resource keywords to be initialized with initial
          values. The PVL names are the keywords and the values are the
          initializers. In some cases, results need to be initialized if they do 
          not already exist in the Resources.
        </TD>
      </TR>
      <TR>
        <TD>Equation</TD>
        <TD>Optional</TD>
        <TD>
          A single equation to be stored in Result. If this and Equations is
          specified, this equation will be executed and stored first.
        </TD>
      </TR>
      <TR>
        <TD>Result</TD>
        <TD>Optional</TD>
        <TD>
          The keyword where the result of Equation will be stored.
        </TD>
      </TR>
      <TR>
        <TD>Equations</TD>
        <TD>Optional</TD>
        <TD>
          The PVL Group where all keyword values are an equation. The names of 
          the keywords containing the equations in the Equations group are used 
          to store the results of the calculation in each active Resource as a 
          new keyword. If Equation is specified, these equations will be executed 
          after the equation specified in the Equation keyword value.
        </TD>
      </TR>
    </TABLE>

    <p>
      The following is an example of a Calculator strategy:
      <pre>
Object = Strategy
  Name = Trigonometry
  Type = Calculator
  Description = "Calculate trigonometric functions of angle."
  Group = Initializers
    Sine    = 0
    Cosine  = 0
    Tangent = 0
  EndGroup
  Group = Equations
    Sine    = "sin(angle)"
    Cosine  = "cos(angle)"
    Tangent = "tan(angle)"
  EndGroup
EndObject
      </pre>
    </p>
    <p align="right"><a href="#top"><font size="1">
      Return to List of Strategy Types
    </font></a></p>
    <!-- End of Calculator Strategy Documentation -->

    <!-- Document CnetReader Strategy -->
    <p>
      <h1><a name="CnetReader">Control Network Reader Strategy Description</a></h1>
      The <strong>CnetReader</strong> strategy creates Resources from a provided control
      network file. Each Resource is created from a ControlMeasure group in the control 
      network. The keywords of the ControlMeasure group become the keywords of the Resource.
    </p>
    <p>
      If the Identity keyword is not provided or its value is an empty string, each Resource is 
      named with a unique number (starting at 0). 
    </p>

    <TABLE BORDER="1">
      <CAPTION><h4>CnetReader Strategy Object Keywords</h4></CAPTION>
      <TR>
        <TH>Keyword</TH>
        <TH>Disposition</TH>
        <TH>Description</TH>
      </TR>
      <TR>
        <TD>Name</TD>
        <TD>Required</TD>
        <TD>
          User-defined name of the CnetReader strategy.
        </TD>
      </TR>
      <TR>
        <TD>Type</TD>
        <TD>Required</TD>
        <TD>
          Identifies the CnetReader strategy - must be <em>CnetReader</em> or it will
          not be recognized as a valid Strategy by isisminer.
        </TD>
      </TR>
      <TR>
        <TD>Description</TD>
        <TD>Optional</TD>
        <TD>
          User provides a description of the CnetReader strategy.
        </TD>
      </TR>
      <TR>
        <TD>CnetFile</TD>
        <TD>Required</TD>
        <TD>
          User provided control network file.
        </TD>
      </TR>
      <TR>
        <TD>CnetFileArgs</TD>
        <TD>Optional</TD>
        <TD>
          Used for providing any arguments to be substituted in CnetFile's value.
        </TD>
      </TR>
      <TR>
        <TD>Identity</TD>
        <TD>Optional</TD>
        <TD>
          The name given to each Resource. Intended to be used with the
          IdentityArgs parameter to give each Resource a unique name.
          If Identity does not have a value, the Resource names are set as 
          unique serial numbers starting at 0.
        </TD>
      </TR>
      <TR>
        <TD>IdentityArgs</TD>
        <TD>Optional</TD>
        <TD>
          Replace placeholders in Identity of the form <em>%1</em>, <em>%2</em>,...,
          <em>%99</em>, with the arguments specified. Each placeholder is
          replaced by its corresponding argument in order. The
          arguments are assumed to be keywords.
        </TD>
      </TR>
    </TABLE>

    <p>
      The following is an example of a CnetReader strategy:
      <pre>
Object = Strategy
  Name          = ControlNetworkReader
  Type          = CnetReader
  CnetFile      = "%1/Alph_VIS.net"
  CnetFileArgs  = "inputdir"
  Identity      = "%1_%2"
  IdentityArgs  = (PointId, SerialNumber)
  Description   = "Read from a control network file"
EndObject
      </pre>
    </p>
    <p align="right"><a href="#top"><font size="1">
      Return to List of Strategy Types
    </font></a></p>
    <!-- End of CnetReader Strategy documentation -->

    <!-- Document CsvReader Strategy -->
    <p>
      <h1><a name="CsvReader">CSV Reader Strategy Description</a></h1>
      The <strong>CsvReader</strong> strategy creates Resources from the
      rows of a Comma-Separated Values (CSV) file. Each row becomes a
      Resource with the keyword names from the CSV file header. The keyword
      values become the values of the corresponding columns in that row.
      If the CSV file does not have a header, the default keyword names are
      <em>Column0</em>, <em>Column1</em>, etc.
    </p>
    <p>
      The CSV file must have the following properties. The rows must be
      delimited by a new line. The columns must be delimited by a single
      character. The number of columns in each row must be the same for
      all rows. If IgnoreComments is set to <em>True</em>, then Comments must be
      on their own line and be preceded by a <b>#</b>.
    </p>

    <TABLE BORDER="1">
      <CAPTION><h4>CsvReader Strategy Object Keywords</h4></CAPTION>
      <TR>
        <TH>Keyword</TH>
        <TH>Disposition</TH>
        <TH>Description</TH>
      </TR>
      <TR>
        <TD>Name</TD>
        <TD>Required</TD>
        <TD>
          User-defined name of the CsvReader strategy.
        </TD>
      </TR>
      <TR>
        <TD>Type</TD>
        <TD>Required</TD>
        <TD>
          Identifies the CsvReader strategy - must be <em>CsvReader</em> or 
          it will not be recognized as a valid Strategy by isisminer.
        </TD>
      </TR>
      <TR>
        <TD>Description</TD>
        <TD>Optional</TD>
        <TD>
          User provides a description of the CsvReader strategy.
        </TD>
      </TR>
      <TR>
        <TD>CsvFile</TD>
        <TD>Required</TD>
        <TD>
          The CSV file that the Resources will be created from. The rows must be 
          delimited by a new line. The columns must be delimited by a single 
          character.
        </TD>
      </TR>
      <TR>
        <TD>CsvFileArgs</TD>
        <TD>Optional</TD>
        <TD>
          Replace arguments in CsvFile of the form <em>%1</em>, <em>%2</em>, etc.
          up to <em>%99</em> with the values of keywords specified in this array of 
          keywords. Each argument is replaced by its corresponding keyword value 
          in order. The keywords are assumed to be Resource or global keyword 
          names.
        </TD>
      </TR>
      <TR>
        <TD>HasHeader</TD>
        <TD>Optional</TD>
        <TD>
          If <em>True</em>, then the first row of the CSV file will be assumed 
          to be the header and used to create keywords of column header names 
          in each Resource (row). If <em>False</em>, the first row is assumed to be data 
          and the keyword will be named using the combination of the 
          ColumnBaseName appended with the column index number. Defaults to 
          <em>True</em>.
        </TD>
      </TR>
      <TR>
        <TD>Header</TD>
        <TD>Optional</TD>
        <TD>
          The list of keywords that the values in each column will be stored
          in. The column values will be associated with keywords from left to
          right unless <em>Index</em> is used.
        </TD>
      </TR>
      <TR>
        <TD>Index</TD>
        <TD>Optional</TD>
        <TD>
          The column indices in the CSV file that the keywords in
          <em>Header</em> will use for their values.  The first entry will be
          the value for the first keyword in <em>Header</em>, the second entry
          will be the value for the second keyword, etc.
        </TD>
      </TR>
      <TR>
        <TD>SkipLines</TD>
        <TD>Optional</TD>
        <TD>
          The number of lines to be skipped at the beginning of the CSV 
          file. Defaults to 0.
        </TD>
      </TR>
      <TR>
        <TD>IgnoreComments</TD>
        <TD>Optional</TD>
        <TD>
          If <em>True</em>, lines beginning with <b>#</b> will be ignored. If
          <em>False</em>, all text is processed, regardless of the presence
          of a <b>#</b> character. Defaults to <em>False</em>.
        </TD>
      </TR>
      <TR>
        <TD>Delimiter</TD>
        <TD>Optional</TD>
        <TD>
          The delimiter used to separate columns of the CSV file. It
          must be a single character. Defaults to a comma, <b>[ , ]</b>.
        </TD>
      </TR>
      <TR>
        <TD>RowBaseName</TD>
        <TD>Optional</TD>
        <TD>
          The default base keyword name to use as the Identity of each Resource. 
          The default Resource names are the base name appended with the row 
          index number. For example <em>Row0</em>, <em>Row1</em>, etc.
          Defaults to <em>Row</em>.
        </TD>
      </TR>
      <TR>
        <TD>Identity</TD>
        <TD>Optional</TD>
        <TD>
          The name given to each Resource. Intended to be used with the
          IdentityArgs parameter to give each Resource a unique name.
          If Identity is not specified, the Resource names are created according 
          to the RowBaseName description.
        </TD>
      </TR>
      <TR>
        <TD>IdentityArgs</TD>
        <TD>Optional</TD>
        <TD>
          Replace arguments in Identity of the form <em>%1</em>, <em>%2</em>,...,
          <em>%99</em>, with the values of the assumed keywords specified in this keyword 
          parameter.  Each argument is replaced by its corresponding keyword value 
          in order. The keywords are assumed to be Resource or global keyword 
          names.
        </TD>
      </TR>
      <TR>
        <TD>ColumnBaseName</TD>
        <TD>Optional</TD>
        <TD>
          The base name used for the default keyword names identifying each 
          column read from the CSV file. If no header is specified, the keyword 
          names will be the value of this keyword with the column index number 
          appended to it, starting at zero. For example <em>Column0</em>, 
          <em>Column1</em>, <em>Column2</em>, etc. Defaults to
          <em>Column</em>.
        </TD>
      </TR>
      <TR>
        <TD>GisGeometry</TD>
        <TD>Optional</TD>
        <TD>
          The Geometry to be added to the Resources. Must be in either
          well-known-text or well-known-binary format.
        </TD>
      </TR>
      <TR>
        <TD>GisGeometryKey</TD>
        <TD>Optional</TD>
        <TD>
          The keyword used to reference the Geometry. The name of the column in 
          each row in the CSV file that contains that contains a GIS geometry in 
          well-known text (WKT) or well-known binary (B) format.  When 
          converted from its text representation to binary form, it will be 
          added to the Resource (row) as its defining geometry. This keyword, if 
          provided, takes precedence over GisGeometry and GisGeometryRef. Note 
          that special GIS keywords described above will apply to the conversion 
          of these GIS columns to their binary form.
        </TD>
      </TR>
      <TR>
        <TD>GisGeometryRef</TD>
        <TD>Optional</TD>
        <TD>
          Identical to GisGeometryKey
        </TD>
      </TR>
      <TR>
        <TD>GisGeometryArgs</TD>
        <TD>Optional</TD>
        <TD>
          Replace arguments in the GIS geometry keyword of the form <em>%1</em>, 
          <em>%2</em>,..., <em>%99</em>, with the values of the assumed keywords
          specified in this keyword parameter.  Each argument is replaced by its corresponding
          keyword value in order. The keywords are assumed to be Resource or global keyword 
          names.
        </TD>
      </TR>
      <TR>
        <TD>GisType</TD>
        <TD>Optional</TD>
        <TD>
          The text format of the Geometry. If a Geometry is specified, this
          keyword is required. Supports WKT (well-known-text) and
          WKB (well-known-binary).
        </TD>
      </TR>
      <TR>
        <TD>RemoveGisKeywordAfterImport</TD>
        <TD>Optional</TD>
        <TD>
          If <em>True</em>, the Geometry keyword will be removed from the Resources
          after the Geometry has been added to the Resources. These GIS geometry 
          definitions can be quite large consisting of many characters. To help 
          manage memory, remove these keywords once they are converted to reduce 
          memory requirements.
        </TD>
      </TR>
    </TABLE>

    <p>
      The following is an example of a CsvReader strategy:
      <pre>
Object = Strategy
  Name = ReadFilterData
  Type = CsvReader
  CsvFile        = "%1/csvreader_data.csv"
  CsvFileArgs    = "inputdir"
  HasHeader      = False
  SkipLines      = 0
  IgnoreComments = False
  Delimiter      = ","
  Identity = "%1_%2"
  IdentityArgs = ( SourceProductId,  StereoSource )
EndObject
      </pre>
    </p>
    <p align="right"><a href="#top"><font size="1">
      Return to List of Strategy Types
    </font></a></p>
    <!-- End of CsvReader Strategy Documentation -->

    <!-- Document CsvWriter Strategy -->
    <p>
      <h1><a name="CsvWriter">CSVWriter Strategy Description</a></h1>
      The <strong>CsvWriter</strong> strategy provides users with the
      ability to export Resources to a Comma-Separated Values (CSV) file.
      Each row corresponds to a Resource and each column corresponds to a
      keyword specified by the Keywords parameter. If the Header parameter
      is set to <em>True</em>, the keyword names are stored in the first row of the CSV
      file. Each Resource is written to the CSV file as a row with the
      corresponding keyword values written to each column. If a Resource does
      not have a specified keyword, the value of the DefaultValue parameter is
      written instead.
    </p>
    <p>
      Resource geometries can be written to the CSV file as keywords using
      the GisGeometryKey parameter in the format specified by the
      GisType parameter. The two supported formats are well-known binary (WKB)
      and well-known text (WKT).
    </p>
    <p>
      <b>
        Note: Writing a geometry to a CSV file in WKT format while using the
        default comma delimiter may result in the CSV file being unreadable by
        <a href="#CsvReader">CsvReader</a>. Change the delimiter to a different
        character if using WKT format.
      </b>
    </p>
    <p>
      Rows in the CSV file will be delimited by a new line. Columns are
      delimited by the character specified by the Delimiter parameter, which
      defaults to a comma.
    </p>

    <TABLE BORDER="1">
      <CAPTION><h4>CsvWriter Strategy Object Keywords</h4></CAPTION>
      <TR>
        <TH>Keyword</TH>
        <TH>Disposition</TH>
        <TH>Description</TH>
      </TR>
      <TR>
        <TD>Name</TD>
        <TD>Required</TD>
        <TD>
          User-defined name of the CsvWriter strategy.
        </TD>
      </TR>
      <TR>
        <TD>Type</TD>
        <TD>Required</TD>
        <TD>
          Identifies the CsvWriter strategy - must be <em>CsvWriter</em> or 
          it will not be recognized as a valid Strategy by isisminer.
        </TD>
      </TR>
      <TR>
        <TD>Description</TD>
        <TD>Optional</TD>
        <TD>
          User provides a description of the CsvWriter strategy.
        </TD>
      </TR>
      <TR>
        <TD>CsvFile</TD>
        <TD>Required</TD>
        <TD>
          The output CSV file. Can use arguments specified by CsvFileArgs.
        </TD>
      </TR>
      <TR>
        <TD>CsvFileArgs</TD>
        <TD>Optional</TD>
        <TD>
          Replace arguments in the CsvFile keyword of the form <em>%1</em>,
          <em>%2</em>,..., <em>%99</em>, 
          with the values of the assumed keywords specified in this keyword 
          parameter.  Each argument is replaced by its corresponding keyword value 
          in order. The keywords are assumed to be Resource or global keyword 
          names.
        </TD>
      </TR>
      <TR>
        <TD>Mode</TD>
        <TD>Optional</TD>
        <TD>
          The mode in which to write the CSV file. If <em>Create</em>, a new
          file is created or an existing file with the same name is overwritten. 
          If <em>Append</em>, the output CSV file will be appended to the file. 
          Defaults to <em>Create</em>.
        </TD>
      </TR>
      <TR>
        <TD>Keywords</TD>
        <TD>Required</TD>
        <TD>
          A list of the keywords in the Resources to be written to
          the CSV file. The keyword names are written to the header
          of the CSV file as the name of each column. Each Resource is written 
          as a row with the corresponding keyword values written in each column. 
          Only the keywords specified will be written, all other keywords
          in the Resources are ignored.
        </TD>
      </TR>
      <TR>
        <TD>Header</TD>
        <TD>Optional</TD>
        <TD>
          Option to write a header to the CSV file. Defaults to <em>True</em>,
          which writes the values specified by the Keywords parameter
          to the header of the CSV file. <em>False</em> does not write a
          header to the CSV file, which is useful for appending
          to another CSV file with the same header.
        </TD>                
      </TR>
      <TR>
        <TD>Delimiter</TD>
        <TD>Optional</TD>
        <TD>
          The character or string used to separate fields in a row.
          Defaults to a comma.
        </TD>                
      </TR>
      <TR>
        <TD>DefaultValue</TD>
        <TD>Optional</TD>
        <TD>
          If a Resource does not have a keyword that is specified by
          the Keywords parameter, it will write this value to the
          column in the corresponding row CSV file instead.
          Defaults to <em>NULL</em>.
        </TD>                
      </TR>
      <TR>
        <TD>SkipEmptyLists</TD>
        <TD>Optional</TD>
        <TD>
          If <em>True</em>, it will not add empty Resources to the CSV file.
          Defaults to <em>False</em>.
        </TD>                
      </TR>
      <TR>
        <TD>GisGeometryKey</TD>
        <TD>Optional</TD>
        <TD>
          The keyword to write the geometry to. If the keyword already exists
          in a Resource, then the keyword value will be overwritten with the 
          text version of the GIS geometry. The geometry will be written in the 
          text format specified by GisType. Takes precedence over 
          GisGeometryRef.
        </TD>                
      </TR>
      <TR>
        <TD>GisGeometryRef</TD>
        <TD>Optional</TD>
        <TD>
          Identical to GisGeometryKey.
        </TD>                
      </TR>
      <TR>
        <TD>GisType</TD>
        <TD>Optional</TD>
        <TD>
          The text format to write the geometry in. The two supported formats
          are <em>WKT</em> (well-known-text format) and <em>WKB</em> (well-known-binary format). 
          Defaults to <em>WKB</em>. Note that WKT uses commas, which may render the CSV file
          unreadable if the delimiter is set to a comma.
        </TD>                
      </TR>
    </TABLE>

    <p>
      The following is an example of a CsvWriter strategy:
      <pre>
Object = Strategy
  Type     = CsvWriter
  Name     = mdismla
  CSVFile  = "mdis_mla_ridelong.lis"
  Mode     = Create
  Header   = True
  Keywords = (YearDoy, SourceProductId, StartTime, EtStartTime, 
              ExposureDuration, CenterLongitude, CenterLatitude,
              PixelResolution, MeanGroundResolution,
              IncidenceAngle, EmissionAngle, PhaseAngle, 
              SubSolarGroundAzimuth, SubSpacecraftGroundAzimuth, 
              ParallaxX, ParallaxY, ShadowX, ShadowY)
  Delimiter = ","
  DefaultValue = "NULL"
EndObject
      </pre>
    </p>
    <p align="right"><a href="#top"><font size="1">
      Return to List of Strategy Types
    </font></a></p>
    <!-- End of CsvWriter Strategy Documentation-->

    <!-- Document DatabaseReader Strategy -->
    <p>
      <h1><a name="DatabaseReader">DatabaseReader Strategy Description</a></h1> 
      The <strong>DatabaseReader</strong> strategy provides direct SQL queries 
      to databases. Data rows retrieved from a query are stored as Resources. 
      Using the Target parameter, new Resources can either be stored on their 
      own as Resources, or as Assets in existing Resources. Using an Asset 
      target is really a shortcut approach to creating Assets in Resources that 
      normally would require an <a href="#AssetSidebar">AssetSidebar</a> strategy.
    </p>
    <p>
      The access details of the database can be stored in a configuration 
      file in a profile of the Database object. The configuration file 
      containing the Database object is specified by the DbConfig parameter. The 
      database profile is specified by the DbProfile parameter. A special 
      parameter called <em>DbFile</em> is provided for SQLite files. This 
      shortened specification for SQLite files eliminates the need for creating 
      an elaborate Database configuration for file-based databases.
    </p>
    <p>
       Generally, any valid SQL query can be used that returns rows from the 
       results of the query issued to any database. Any database that is 
       supported by the Qt system configuration shipped with each ISIS release 
       can accept SQL queries. This typically includes PostgreSQL, MySQL and 
       SQLite. When specifying the query in the <em>Query</em>, some special 
       quoting may  be needed in order to comply with SQL syntax. Before a query 
       is sent to the database, all occurrences of <em>&amp;quot;</em> and 
       <em>&amp;apos;</em> in the query string are replaced with double quotes
       <b>[ " ]</b> and single quotes <b>[ ' ]</b>, respectively.
    </p>
    <TABLE BORDER="1">
      <CAPTION><h4>DatabaseReader Strategy Object Keywords</h4></CAPTION> 
      <TR>
        <TH>Keyword</TH>
        <TH>Disposition</TH>
        <TH>Description</TH>
      </TR>
      <TR>
        <TD>Name</TD>
        <TD>Required</TD>
        <TD>
          The user-defined name for the strategy.
        </TD>
      </TR>
      <TR>
        <TD>Type</TD>
        <TD>Required</TD>
        <TD>
          The type of the Strategy. This parameter must be <em>DatabaseReader</em> or 
          the Strategy will not be identified as a DatabaseReader strategy.
        </TD>
      </TR>
      <TR>
        <TD>Description</TD>
        <TD>Optional</TD>
        <TD>
          The user-provided description for the Strategy.
        </TD>
      </TR>
      <TR>
        <TD>DbConfig</TD>
        <TD>Required</TD>
        <TD>
          The configuration file containing the Database object of the 
          database. 
        </TD>
      </TR>
      <TR>
        <TD>DbConfigArgs</TD>
        <TD>Optional</TD>
        <TD>
          Replace arguments in the DbConfig keyword of the form <em>%1</em>, <em>%2</em>,..., 
          <em>%99</em>, with the values of the assumed keywords specified in this keyword 
          parameter.  Each argument is replaced by its corresponding keyword value 
          in order. The keywords are assumed to be Resource or global keyword 
          names.
        </TD>
      </TR>
      <TR>
        <TD>DbProfile</TD>
        <TD>Required</TD>
        <TD>
          The Name of the database Profile to use in the Database Object in the
          configuration file specified by the DbConfig parameter.
        </TD>
      </TR>
      <TR>
        <TD>DbFile</TD>
        <TD>Optional</TD>
        <TD>
          A SQLite database file to use as the database. Takes precedence over
          a database identified by DbConfig and DbProfile.
        </TD>
      </TR>
      <TR>
        <TD>DbFileArgs</TD>
        <TD>Optional</TD>
        <TD>
          Replace arguments in the DbFile keyword of the form <em>%1</em>, 
          <em>%2</em>,..., <em>%99</em>, 
          with the values of the assumed keywords specified in this keyword 
          parameter.  Each argument is replaced by its corresponding keyword value 
          in order. The keywords are assumed to be Resource or global keyword 
          names.
        </TD>
      </TR>
      <TR>
        <TD>Query</TD>
        <TD>Required</TD>
        <TD>
          The SQL query to be sent to the database. Double quotes should be
          escaped by using <em>&amp;quot;</em>.
        </TD>
      </TR>
      <TR>
        <TD>QueryArgs</TD>
        <TD>Optional</TD>
        <TD>
          Replace arguments in the Query keyword of the form <em>%1</em>, 
          <em>%2</em>,..., <em>%99</em>, 
          with the values of the assumed keywords specified in this keyword 
          parameter.  Each argument is replaced by its corresponding keyword value 
          in order. The keywords are assumed to be Resource or global keyword 
          names.
        </TD>
      </TR>
      <TR>
        <TD>QueryStore</TD>
        <TD>Optional</TD>
        <TD>
          The Keyword to store the Query used to create the Resource in the
          new Resources. If this parameter is not specified, the Keyword will
          not be stored in the Resources.
        </TD>
      </TR>
      <TR>
        <TD>Target</TD>
        <TD>Required</TD>
        <TD>
          Specify how resulting query rows will be stored. If this parameter is 
          set to <em>Resource</em>, the Query will be executed once and each retrieved 
          row will be stored as a new Resource. If this parameter is set to 
          <em>Asset</em>, the Query will be executed once for each Resource, and all 
          rows retrieved for the Query will be stored in each Resource as an 
          Asset containing the list of new Resources, one Resource per row.
        </TD>
      </TR>
      <TR>
        <TD>Asset</TD>
        <TD>Optional</TD>
        <TD>
          If the Target parameter is set to <em>Asset</em>, this parameter is the name
          of the Asset added to each Resource. If the Target parameter is set
          to <em>Asset</em>, this parameter is required.
        </TD>
      </TR>
      <TR>
        <TD>RowBaseName</TD>
        <TD>Optional</TD>
        <TD>
          The base of the default Name of each new Resource. The default
          Resource Names are created from the base and a number. The default
          base is <em>Row</em>.
        </TD>
      </TR>
      <TR>
        <TD>Identity</TD>
        <TD>Optional</TD>
        <TD>
          The Name of each new Resource. This parameter is intended to be
          used with the IdentityArgs parameter to give each Resource
          a unique name. If the Name is not unique or it is empty, the
          default Name will be used.
        </TD>
      </TR>
      <TR>
        <TD>IdentityArgs</TD>
        <TD>Optional</TD>
        <TD>
          Replace arguments in the Identity keyword of the form <em>%1</em>, 
          <em>%2</em>,..., <em>%99</em>, with the values of the assumed
          keywords specified in this keyword parameter.  Each argument is replaced
          by its corresponding keyword value in order. The keywords are assumed to
          be Resource or global keyword names.
        </TD>
      </TR>
      <TR>
        <TD>GisGeometry</TD>
        <TD>Optional</TD>
        <TD>
          The default Geometry to be added to each new Resource. It must be in
          either well-known-text or well-known-binary format. If the default
          Geometry is used and this parameter is not specified, no Geometry will
          be added to the new Resources.
        </TD>
      </TR>
      <TR>
        <TD>GisGeometryKey</TD>
        <TD>Optional</TD>
        <TD>
          The Keyword in the new Resources containing the Geometry to be added
          to those Resources. If the Keyword does not exist, the default
          Geometry is used. This parameter takes precedence over GisGeometryRef.
        </TD>
      </TR>
      <TR>
        <TD>GisGeometryRef</TD>
        <TD>Optional</TD>
        <TD>
          Identical to GisGeometryKey.
        </TD>
      </TR>
      <TR>
        <TD>GisGeometryArgs</TD>
        <TD>Optional</TD>
        <TD>
          Replace arguments in the GisGeometry keyword of the form <em>%1</em>, <em>%2</em>,..., 
          <em>%99</em>, with the values of the assumed keywords specified in this keyword 
          parameter.  Each argument is replaced by its corresponding keyword value 
          in order. The keywords are assumed to be Resource or global keyword 
          names.
        </TD>
      </TR>
      <TR>
        <TD>GisType</TD>
        <TD>Optional</TD>
        <TD>
          The text format of the Geometry to be added to each new Resource. If
          this parameter is set to <em>WKT</em>, the Geometry is interpreted as
          well-known-text. If <em>WKB</em>, it is interpreted as well-known-binary.
          This parameter is required if GisGeometry, GisGeometryKey, or
          GisGeometryRef are specified.
        </TD>
      </TR>
      <TR>
        <TD>RemoveGisKeywordAfterImport</TD>
        <TD>Optional</TD>
        <TD>
          Whether the Keyword containing the Geometry should be removed from
          the new Resources. If this parameter is set to <em>True</em>, the Geometry
          Keyword will be removed. If it is set to <em>False</em>, the Keyword will remain 
          in the new Resources. Defaults to <em>False</em>.
        </TD>
      </TR>
    </TABLE>

    <p>
      The following is an example of a valid configuration file named mdis.conf
      with a DatabaseReader strategy within an IsisMiner object and a Database 
      object:
      <pre>
Object = IsisMiner
  Object = Strategy
    Name = MDISSelection
    Type = DatabaseReader
   
    DbConfig = mdis.conf
    DbProfile = MDIS
   
    Query = "select  i.SourceProductId, i.YearDoy, 
              g.StartTime, i.EtStartTime, i.ExposureDuration,
              g.CenterLongitude, g.CenterLatitude, i.ObservationType,
              g.PixelResolution, g.MeanGroundResolution,
              g.IncidenceAngle, g.EmissionAngle, g.PhaseAngle, 
              g.SubSolarGroundAzimuth, g.SubSpacecraftGroundAzimuth, 
              g.ParallaxX, g.ParallaxY, g.ShadowX, g.ShadowY,
              p.GisFootprint
                from Polygon p
                INNER JOIN Image i
                ON p.SourceProductId=i.SourceProductId 
                INNER JOIN Geometry g
                ON p.SourceProductId=g.SourceProductId 
                INNER JOIN Statistics s
                ON p.SourceProductId=s.SourceProductId
                where (i.Center=747.7 or i.Center=748.7) 
                 order by g.PixelResolution"
    Target = Resource
    Identity = "%1"
    IdentityArgs = "SourceProductId"
    GisGeometryRef = GisFootprint
    GisType        = WKB
    RemoveGisKeywordAfterImport = True
  EndObject
EndObject

Object = Database
  DefaultProfile = "MDIS"
  Group = Profile
      Name = "MDIS"
      Dbname = "Messenger_DOY_2011095_TO_2013011_gis.db"
      Type = SQLite
      Description = "MDIS Sqlite database"
  EndGroup
EndObject
      </pre>
    </p>
    <p align="right"><a href="#top"><font size="1">
      Return to List of Strategy Types
    </font></a></p>
    <!-- End of DatabaseReader Strategy Documentation -->

    <!-- Document Filter Strategy -->
    <p>
      <h1><a name="Filter">Filter Strategy Description</a></h1> 
      The <strong>Filter</strong> strategy provides users with the ability 
      to activate (<em>Include</em>) or deactivate (<em>Exclude</em>) 
      Resources that have or do not have keywords with certain values. 
    </p>
    <p>
      All comparisons are case-insensitive. The keyword used to filter Resources 
      is specified in the <em>Keyword</em> key in the Filter Strategy object 
      definition found in the Strategy object. Only the first value in the 
      named Resource <em>Keyword</em> will be checked unless the [optional] 
      <em>CheckAll</em> keyword is set to <em>True</em>. 
    </p>
    <p>
      Values contained in the <em>Include</em> keyword in the Strategy object 
      will be compared with values in the Resource key specified in the 
      <em>Keyword</em> key.  If a value exists in both keywords, then the Resource 
      is retained (as active).
      Values contained in the <em>Exclude</em> keyword in the Strategy 
      object that exist in the Resource key will deactivate a Resource. 
    </p>
    <p>
      Both <em>Include</em> and <em>Exclude</em> keywords may exist in the 
      Filter Strategy object. In this case, values are first checked in the 
      <em>Include</em> list then the <em>Exclude</em> list. Whichever occurs 
      first, that action is taken for the Resource. If none of the keyword 
      values exist in either <em>Include</em> or <em>Exclude</em> keywords, 
      then disposition of the Resource depends on the lists.  If the 
      <em>Include</em> list is not empty and the <em>Exclude</em> list is 
      empty, the Resource is deactivated. Otherwise, the Resource is retained 
      as active.
    </p>
    <p>
       If needed, users can provide a regular expression string that will use  
       Qt's <a href="http://doc.qt.io/qt-4.8/qregexp.html">QRegExp</a> class 
       implementation to apply to keyword values. If given, this test is applied 
       after the <em>Include</em> and before the <em>Exclude</em> test to 
       determine if the value satisfies the regular expression. If after all the 
       tests are applied and this string was supplied, the Resource is discarded 
       since it did not succeed in its test.
    </p>
    <p>
      If neither <em>Include</em> nor  <em>Exclude</em> 
      keywords exist, then no action is taken for the Resources.           
    </p>

    <TABLE BORDER="1">
      <CAPTION><h4>Filter Strategy Object Keywords</h4></CAPTION> 
      <TR>
        <TH>Keyword</TH>
        <TH>Disposition</TH>
        <TH>Description</TH>
      </TR>
      <TR>
        <TD>Name</TD>
        <TD>Required</TD>
        <TD>
          User-defined name of the Filter strategy.
        </TD>
      </TR>
      <TR>
        <TD>Type</TD>
        <TD>Required</TD>
        <TD>
          Identifies the Filter strategy - must be <em>Filter</em> or it will 
          not be recognized as a valid Strategy by isisminer.
        </TD>
      </TR>
      <TR>
        <TD>Description</TD>
        <TD>Optional</TD>
        <TD>
          User provides a description of the Filter strategy.
        </TD>
      </TR>
      <TR>
        <TD>Keyword</TD>
        <TD>Required</TD>
        <TD>
          Specifies the name of an existing Resource keyword that will 
          be checked for Include and Exclude values.
        </TD>
      </TR>
      <TR>
        <TD>CheckAll</TD>
        <TD>Optional</TD>
        <TD>
          Boolean flag to check all values in the keyword (<em>True</em>) or 
          just the first value  (<em>False</em>).  Defaults to <em>True</em>.
        </TD>
      </TR>
      <TR>
        <TD>Include</TD>
        <TD>Optional</TD>
        <TD>
          Specify one or more values to check for in the Keyword for 
          existence.  If it exists, the keyword is retained (as activated) 
          unless the Exclude parameter is also present - in that case, the 
          rules of Exclude apply. If it does not exist, it is deactivated 
          regardless of the Exclude parameter.
        </TD>
      </TR>
     <TR>
        <TD>RegExp</TD>
        <TD>Optional</TD>
        <TD>
          A single regular expression string can be given in this parameter to 
          test values in the keyword. The syntax in the regular expression must 
          strictly follow the requirements of the Qt  
          <a href="http://doc.qt.io/qt-4.8/qregexp.html">QRegExp</a> 
          class. If the string satisfies the regular expression, it is retained 
          as active or it will be discarded.
        </TD>
      </TR>
     <TR>
        <TD>WildCardMode</TD>
        <TD>Optional</TD>
        <TD>
           When using a RegExp, this parameters accepts a value of <em>True</em> or <em>False</em> 
           to signal use of the QRegExp::WildcardUnix mode for regular 
           expressions. If <em>True</em>, QRegExp::WildcardUnix mode is set. If <em>False</em>, 
           the default QRegExp::RegExp mode is used.
        </TD>
      </TR>
      <TR>
        <TD>Exclude</TD>
        <TD>Optional</TD>
        <TD>
          Specify one or more values to look for in the Keyword.
          If found, the Keyword is deactivated. Otherwise, if <em>Include</em> is not 
          specified, the Keyword is retained.
        </TD>
      </TR>
    </TABLE>

    <p>
      The following is an example of a Filter strategy:
      <pre>
Object = Strategy
  Name = TossIgnores
  Type = Filter
  Description = "Deactivate all ControlMeasures that are ignored" 
  Keyword = Ignore 
  Exclude = True 
EndObject
      </pre>
    </p>
    <p align="right"><a href="#top"><font size="1">
      Return to List of Strategy Types
    </font></a></p>
    <!-- End of Filter Strategy documentation -->

    <!-- Document GisIntersect Strategy --> 
    <p>
      <h1><a name="GisIntersect">GISIntersect Strategy Description</a></h1>
      The <strong>GisIntersect</strong> strategy provides users with the ability 
      to select Resources that intersect with a given geometry. Resource 
      geometries must be created when Resources are created (typically from 
      <a href="#CsvReader">CsvReader</a> and 
      <a href="#DatabaseReader">DatabaseReader</a>). Users can define a geometry using the 
      <em>GisGeometry</em> keyword. <em>GisType</em> specifies the type or format
      of geometry provided in this keyword.  Resources which overlap the given 
      geometry are activated and Resources which do not overlap the given 
      geometry are deactivated. Overlaps are determined using the GIS intersect 
      operator.
    </p>
    <TABLE BORDER="1">
      <CAPTION><h4>GisIntersect Strategy Object Keywords</h4></CAPTION> 
      <TR>
        <TH>Keyword</TH>
        <TH>Description</TH>
      </TR>
      <TR>
        <TD>Name</TD>
        <TD>Required</TD>
        <TD>
          User-defined name of the GisIntersect strategy.
        </TD>
      </TR>
      <TR>
        <TD>Type</TD>
        <TD>Required</TD>
        <TD>
          Identifies the GisIntersect strategy - must be <em>GisIntersect</em> or it will 
          not be recognized as a valid Strategy by isisminer.
        </TD>
      </TR>
      <TR>
        <TD>Description</TD>
        <TD>Optional</TD>
        <TD>
          User provides a description of the GisIntersect strategy.
        </TD>
      </TR>
      <TR>
        <TD>GisType</TD>
        <TD>Required</TD>
        <TD>
          Specifies the type of the geometry. Valid options are WKT, WKB, pvlWKT, pvlWKB, or 
          IsisCube. WKT and WKB are common GIS file formats that indicate well-known-text and
          well-known-binary, respectively. If GisType is pvlWKT or pvlWKB, GisGeometry must be
          the path to a PVL file which contains a valid WKT or WKB geometry. 
        </TD>
      </TR>
      <TR>
        <TD>GisGeometry</TD>
        <TD>Required</TD>
        <TD>
          The actual geometry or geometry source. This can either be directly equal to a WKB or 
          WKT value like 
          <em>POLYGON ((0.00 22.50, 90.00 22.50, 90.00 65.00, 0.00 65.00, 0.00 22.50))</em>
          or can be set to the path to a PVL file containing a valid geometry.  If GisGeometry is set to a
          file name, the associated file must be a PVL file with a valid WKT or WKB geometry, or be
          an ISIS cube. 
        </TD>
      </TR>
      <TR>
        <TD>GisGeometryArgs</TD>
        <TD>Optional</TD>
        <TD>
          Replace arguments in the GisGeometry keyword of the form <em>%1</em>, <em>%2</em>,..., 
          <em>%99</em>, with the values of the assumed keywords specified in this keyword 
          parameter.  Each argument is replaced by its corresponding keyword value 
          in order. The keywords are assumed to be Resource or global keyword 
          names.
        </TD>
      </TR>
      <TR>
        <TD>BoundingBox</TD>
        <TD>Optional</TD>
        <TD>
          Specify whether or not to use a bounding box from the source. Possible 
        values are <em>True</em> or <em>False</em>. 
        Default value is <em>False</em>. 
        </TD>
      </TR>
      <TR>
        <TD>ComputeRatio</TD>
        <TD>Optional</TD>
        <TD>
          Specify whether or not to compute the overlap ratio and add it to the 
        Resource. Options are <em>True</em> or <em>False</em>. 
        Default value is <em>False</em>. 
        </TD>
      </TR>
      <TR>
        <TD>RatioRef</TD>
        <TD>Optional</TD>
        <TD>
          Specify which Keyword to insert the calculated overlap ratio in, if 
        ComputeRatio = <em>True</em>. 
        </TD>
      </TR>
      <TR>
        <TD>GisGeometryRef</TD>
        <TD>Optional</TD>
        <TD>
          Used when using a file name as a GisGeometry source. This indicates the 
        Keyword in the associated PVL file that the WKT or WKB geometry value 
        will be found in. 
        </TD>
      </TR>
    </TABLE>

    <p>
      The following is an example of a GisIntersect strategy:
      <pre>
Object = Strategy
  Name = DeactiveNonintersecting
  Type = GisIntersect
  Description = "Define bounding box (lower left, upper right (lon lat)) 
                       around Degas"
  GisType = "WKT"
  GisGeometry =  "LINESTRING(225.00 30.00, 240.00 45.00)"
  BoundingBox = True
  ComputeRatio = True
EndObject
      </pre>
    </p>
    <p align="right"><a href="#top"><font size="1">
      Return to List of Strategy Types
    </font></a></p>
    <!-- End of GisIntersect Strategy documentation --> 

    <!-- Document GisOverlap Strategy -->
    <p>
      <h1><a name="GisOverlap">GisOverlap Strategy Description</a></h1>
      The <strong>GisOverlap</strong> strategy provides users with the ability
        to determine Resources that have overlapping GIS footprints. This Strategy 
        algorithm is useful to identify images that have common coverage which is 
        the first requirement for determining stereo 
        (see also <a href="#StereoPair">StereoPair</a> strategy).
    </p>
    <p>
        Parameters to this algorithm can define the ratio (or percentage) of 
        common overlap for the two GIS geometries. As implied, all Resources must 
        have GIS geometries in order to participate in the overlap determination.
    </p>
    <p>
        Overlap candidates are determined from other Resources for every 
        incoming active Resource and a list of Resources that are determined 
        from another isisminer Strategy configuration. The configuration can 
        either be specified directly in the GisOverlap Strategy object (an   
        embedded <em>IsisMiner</em> object called a <em>CandidateMiner</em>) or come from 
        an external file called <em>CandidateConfigFile</em>. Candidate overlap 
        Resources can be either part of the incoming Resource list (active and 
        inactive) or from a completely different source. 
    </p>
    <p>
       Once overlaps are determined for a Resource, the candidate and its 
       source are merged/combined into a single Resource and added to an Asset 
       of the primary Resource. Keywords from both Resources are combined into a 
       single Resource by renaming each keyword from both Resources and 
       propagating them to the merged Asset Resource. An <em>A</em> is appended to the 
       source Resource keywords and a <em>B</em> is appended to the candidate Resource 
       keywords before they are merged to distinguish keywords. The suffix of 
       keyword sources can be specified by the user using the                                                         
       <em>MergeSuffixA</em> and <em>MergeSuffixB</em> keywords, respectively. 
       The identity of the merged Resource is a combination of the two Resource 
       identities separated by an underscore character. 
    </p>
    <p>
       Once the list of overlapping Resources is determined, the user can opt to 
       immediately process the overlaps. If a second isisminer configuration is 
       provided called <em>OverlapMiner</em> or <em>OverlapConfigFile</em>, the 
       list of overlapping Resources that are contained combined Resources and 
       geometries is run though the Strategy list in the OverlapMiner 
       configuration. This option is useful to eliminate the need for 
       intermediate storage which could cause memory issues.
    </p>
    <TABLE BORDER="1">
      <CAPTION><h4>GisOverlap Strategy Object Keywords</h4></CAPTION> 
      <TR>
        <TH>Keyword</TH>
        <TH>Disposition</TH>
        <TH>Description</TH>
      </TR>
      <TR>
        <TD>Name</TD>
        <TD>Required</TD>
        <TD>
          User-defined name of the GisOverlap strategy.
        </TD>
      </TR>
      <TR>
        <TD>Type</TD>
        <TD>Required</TD>
        <TD>
          Identifies the GisOverlap strategy - must be <em>GisOverlap</em> or it will 
          not be recognized as a valid Strategy by isisminer.
        </TD>
      </TR>
      <TR>
        <TD>OverlapMinimum</TD>
        <TD>Optional</TD>
        <TD>
          Specifies the minimum common overlap ratio of the two geometries with 
          respect to the primary Resource to be valid. If the computed ratio is 
          less than this value, the Resource will not be deemed a valid overlap 
          due to lack of common coverage. Defaults to 0.0. 
        </TD>
      </TR>
      <TR>
        <TD>OverlapMaximum</TD>
        <TD>Optional</TD>
        <TD>
          Specifies the maximum common overlap ratio of the two geometries with 
          respect to the primary Resource to be valid. If the computed ratio is 
          greater than this value, the Resource will not be deemed a valid 
          overlap due to too much common coverage. Defaults to 1.0. 
        </TD>
      </TR>
      <TR>
        <TD>OverlapRatioKey</TD>
        <TD>Optional</TD>
        <TD>
          Provides the name of the keyword to retain the common overlap ratio.  
          If not provided, it will be stored in the merged Resource as the 
          keyword <em>OverlapRatio</em>. 
        </TD>
      </TR>
      <TR>
        <TD>Asset</TD>
        <TD>Optional</TD>
        <TD>
          Provides the name of the Asset created containing all the Resources 
          determined to have overlap GIS geometries from the candidate list. If 
          not provided, <em>GisOverlap</em> will be the default.
        </TD>
      </TR>
      <TR>
        <TD>MergeSuffixA</TD>
        <TD>Optional</TD>
        <TD>
          To provide uniqueness of keywords that are common to both Resources 
          when they are combined, a suffix is added to the primary Resource. Use 
          this keyword to specify the keyword suffix. If not provided, <em>A</em> is 
          the default.
        </TD>
      </TR>
      <TR>
        <TD>MergeSuffixB</TD>
        <TD>Optional</TD>
        <TD>
          To provide uniqueness of keywords that are common to both Resources 
          when they are combined, a suffix is added to the Resource that 
          overlaps the primary Resource. Use this keyword to specify the keyword 
          suffix of the overlapping Resource. If not provided, <em>B</em> is the 
          default.
        </TD>
      </TR>
      <TR>
        <TD>OverlapMerge</TD>
        <TD>Optional</TD>
        <TD>
           <br><h2 align="center">GIS Operators</h2></br>
          <TABLE BORDER="1">
            <CAPTION align="top">
              Users can determine how to merge the GIS geometries of overlapping 
              Resources using the following options. Note the resulting geometry 
              is stored in the combined Resource of the primary and overlapping 
              Resources. Note also that two additional keywords are added to the 
              combined Resources that provide the centroid coordinate of the 
              resulting geometry. These keywords are 
              <em>GisOverlapCentroidX</em> and <em>GisOverlapCentroidY</em> that 
              provide the center coordinate of the geometry X (typically 
              longitude) and Y (latitude). These become useful for computing 
              common stereo data.
            </CAPTION>
            <TR>
              <TH>Parameter</TH>
              <TH>Description</TH>
            </TR>
            <TR>
              <TD> Intersection </TD>
              <TD>
                  Combines the two GIS footprints as an intersection. This will 
                  result in a GIS geometry that contains the area of common 
                  overlap.
        </TD>
      </TR>
      <TR>
        <TD>Union</TD>
        <TD>
                  Combines the two GIS footprints as a union. This will create a 
                  geometry made of the area of both Resource geometries.
              </TD> 
            </TR>

            <TR>
        <TD>Centroid</TD>
              <TD>
                  This option creates a point geometry of the centroid computed 
                  from the intersection of the two geometries. 
        </TD>
      </TR>
      <TR>
        <TD>ResourceA</TD>
        <TD>
                  Propagates the geometry of the primary Resource used in the 
                  overlap determination. 
              </TD> 
            </TR>
            <TR>
              <TD>ResourceB</TD>
              <TD>
                  Propagates the geometry of the matching/overlapping Resource 
                  used in the overlap determination. It is the Resource found in 
                  the list used to match the primary Resource. 
              </TD> 
            </TR>
            <TR>
              <TD>None</TD>
              <TD>No geometry will be created. This is the default.</TD>
            </TR>
          </TABLE>
        </TD>
      </TR>

      <TR>
        <TD>CandidateMiner</TD>
        <TD>Optional (Object)</TD>
        <TD>
          To select the Resource list used to evaluate overlapping geometries, 
           users have several ways to create the list.  A complete 
           <strong>isisminer</strong> configuration object called (and named) 
          <em>CandidateMiner</em> can be  provided that will be executed on the 
           full Resource list to generate a list of candidate Resources for 
           comparisons of overlaps. This configuration must be a compliant, 
           properly formatted <em>isisminer</em>object with the only difference 
           being the name of the object. It may also be provided in a file 
           called <em>CandidateConfigFile</em>. Either a CandidateMiner object 
           or configuration file may be provided, but not both.  If no candidate options 
           are provided, the current active list of Resources will be used. 
        </TD>
      </TR>
      <TR>
        <TD>CandidateConfigFile</TD>
        <TD>Optional (File)</TD>
        <TD>
          This option can be used in lieu of a <em>CandidateMiner</em> object to 
          specify a set of Strategies to select overlap candidates. You may also 
          provide arguments to that can be translated when executed to resolve 
          the file name by providing a keyword called 
          <em>CandidateConfigFileArgs</em> that contains keywords that translate 
           occurrences of <em>%1</em> to <em>%n</em> strings in the name of the file. 
        </TD>
      </TR>
      <TR>
        <TD>OverlapMiner</TD>
        <TD>Optional (Object)</TD>
        <TD>
           For efficiency purposes only, users can immediately process the 
           overlap list of a given Resource at the time it is completely 
           determined. Simply provide an <strong>isisminer</strong> 
           configuration object called (and named) 
          <em>OverlapMiner</em> that will be executed on the 
           overlap Resource at the time each one is fully determined.  This 
           configuration must be a compliant, properly formatted                     
           <em>isisminer</em>object with the only difference being the name of 
           the object. It may also be provided in a file called         
           <em>OverlapConfigFile</em>. Either an OverlapMiner object or a configuration 
           file may be provided, but not both.  If no overlap options are 
           provided, no action is taken on the overlap list.
        </TD>
      </TR>
      <TR>
        <TD>OverlapConfigFile</TD>
        <TD>Optional (File)</TD>
        <TD>
          This option can be used in lieu of a <em>OverlapMiner</em> object to 
          specify a set of Strategies to process overlap Resource results. You 
          may also provide arguments to that can be translated when executed to 
          resolve the file name by providing a keyword called 
          <em>OverlapConfigFileArgs</em> that contains keywords that translate 
           occurrences of <em>%1</em> to <em>%n</em> strings in the name of the file. 
        </TD>
      </TR>

    </TABLE>
    <p>
      The following is an example using the GisOverlap strategy. In this example 
      we are reading image data from an SQLite database containing WAC and NAC 
      MESSENGER data created from caminfo runs. It determines all the images 
      overlapping a square geometry around Debussy crater.
      <pre>
Object = IsisMiner

  Object = Strategy
  Name = MDISSelection
    Type = DatabaseReader

    DbConfig = wac_nac_overlaps.conf
    DbProfile = MDIS
    Mode = Select

    #  Select strings that need double quotes must use &quot; since they cannot
    #  be stored in keyword values.  These strings will be prescanned before
    #  issuing to the DB and they will be properly replaced.
    Query = "select  i.SourceProductId, i.YearDoy, i.File,
              g.StartTime, i.EtStartTime, i.ExposureDuration, i.ObservationId,
              g.CenterLongitude, g.CenterLatitude, i.ObservationType,
              g.PixelResolution, g.MeanGroundResolution,
              g.IncidenceAngle, g.EmissionAngle, g.PhaseAngle, 
              g.SubSolarGroundAzimuth, g.SubSpacecraftGroundAzimuth, 
              ParallaxX, ParallaxY, ShadowX, ShadowY,
              p.GisFootprint
                from Polygon p
                INNER JOIN Image i
                ON p.SourceProductId=i.SourceProductId 
                INNER JOIN Geometry g
                ON p.SourceProductId=g.SourceProductId 
                INNER JOIN Statistics s
                ON p.SourceProductId=s.SourceProductId"

  # Resource targets are for reading multiple rows from the DB.  The fields
  # from each row are created as Resources.
    Target = Resource
    Identity = "%1"
    IdentityArgs = "SourceProductId"

  #  Can specify a GIS keyword that will be converted on input
    GisGeometryRef = GisFootprint
    GisType        = WKB
    RemoveGisKeywordAfterImport = True
  EndObject

 Object = Strategy
    Type = GisIntersect
    Name = SelectDebussy
    GisType = WKT 
    #  Define bounding box (lower left, upper right (lon lat)) around Debussy
    #  crater
    GisGeometry = "LINESTRING(11.56 -34.91, 13.83 -33.03)"
    BoundingBox = True
    ComputeRatio = True
    RatioRef = DebussyOverlapRatio
    ShowProgress = True
  EndObject

# Since there is no CandidateMiner specified so the current active list is 
#  processed, recursively. Meaning each Resource is checked for overlap
#  of all other active Strategies
  Object = Strategy
    Type = GisOverlap
    Name = DebussyOverlaps
    Description = "Check for image overlaps near Debussy"
    ShowProgress = True
    OverlapMinimum = 0.5
    OverlapMerge = Intersection
  EndObject

  Object = Strategy
    Type = AssetSidebar
    Name = WriteOverlapFiles
    Description = "Write CSV files of overlap data"
    Asset = GisOverlap

    Object = IsisMiner
      Object = Strategy
        Type = CsvWriter
        Name = WriteOverlaps
        Description = "Write individual files with overlap data"

        SkipEmptyLists = True
        CsvFile = "overlaps/%1.csv"
        CsvFileArgs = "Identity"
        Keywords = ("SourceProductIdA", "SourceProductIdB",
                    "OverlapRatioA", "OverlapRatioB",
                    "YearDoyA", "YearDoyB", 
                    "CenterLongitudeA", "CenterLatitudeA",
                    "CenterLongitudeB", "CenterLatitudeB",
                    "GisOverlapCentroidX", "GisOverlapCentroidY",
                    "PixelResolutionA", "PixelResolutionB", 
                    "EmissionAngleA", "EmissionAngleB", "IncidenceAngleA",
                    "IncidenceAngleB", "PhaseAngleA", "PhaseAngleB")
      EndObject
    EndObject

  EndObject

EndObject


Object = Database
  DefaultProfile = "MDIS"
  Group = Profile
    Name = "MDIS"
    Dbname = "Messenger_Monochrome_DOY_2011095_TO_2014304_gis.db"
    Type = SQLite
    Description = "MDIS Sqlite database"
  EndGroup
EndObject

End
      </pre>
    </p>
    <p align="right"><a href="#top"><font size="1">
      Return to List of Strategy Types
    </font></a></p>
    <!-- End of GisOverlap Strategy Strategy documentation -->

    <!-- Document GisUnion Strategy -->
    <p>
      <h1><a name="GisUnion">GISUnion Strategy Description</a></h1>
      The <strong>GIS Union</strong> strategy provides users with the ability to
      create unions between GIS geometries. Each geometry which the Strategy
      operates on is unioned with the other supplied geometries, and the output
      is a union which best fits all of the input geometries.
    </p>
    <p>
      If the union geometry is present and good, an entry will be added to the
      Resource with the parameter <em>RatioRef</em> as the key and the overlap 
      ratio as the value. The double parameters <em>OverlapMinimum</em>
       and <em>OverlapMaximum</em> indicate the acceptable range for the overlap 
      ratio. Geometries with overlap ratios which do not fit the constraints will 
      be discarded. 
    </p>

    <TABLE BORDER="1">
      <CAPTION><h4>GisUnion Strategy Object Keywords</h4></CAPTION>
      <TR>
        <TH>Keyword</TH>
        <TH>Disposition</TH>
        <TH>Description</TH>
      </TR>
      <TR>
        <TD>Name</TD>
        <TD>Required</TD>
        <TD>
          User-defined name of the GisUnion strategy.
        </TD>
      </TR>
      <TR>
        <TD>Type</TD>
        <TD>Required</TD>
        <TD>
          Identifies the GisUnion strategy - must be <em>GisUnion</em> or it will
          not be recognized as a valid Strategy by isisminer.
        </TD>
      </TR>
      <TR>
        <TD>Description</TD>
        <TD>Optional</TD>
        <TD>
          User provides a description of the GisUnion strategy.
        </TD>
      </TR>
      <TR>
        <TD>OverlapMinimum</TD>
        <TD>Optional</TD>
        <TD>
          User provides a value for the minimum valid overlap ratio. Defaults to 0.0.
        </TD>
      </TR>
      <TR>
        <TD>OverlapMaximum</TD>
        <TD>Optional</TD>
        <TD>
          User provides a value for the maximum valid overlap ratio. Defaults to 1.0.
        </TD>
      </TR>
      <TR>
        <TD>RatioRef</TD>
        <TD>Optional</TD>
        <TD>
          User provides a keyword name which will be used as the column of 
          overlap ratios stored in the Resource. Defaults to 
          <em>UnionOverlapRatio</em>.
        </TD>
      </TR>
    </TABLE>

    <p>
      The following is an example of a GisUnion strategy:
      <pre>
Object = Strategy
  Name = UnionHighOverlap
  Type = GisUnion
  Description = "Union remaining geometries which have a high overlap ratio."
  OverlapMinimum = 0.65
  OverlapMaximum = 1.0
  RatioRef = "HighOverlapRatio"
EndObject
      </pre>
    </p>
    <p align="right"><a href="#top"><font size="1">
      Return to List of Strategy Types
    </font></a></p>
    <!-- End of GisUnion Strategy documentation -->

    <!-- Document IsNumeric Strategy Documentation -->
    <p>
      <h1><a name="IsNumeric">IsNumeric Strategy Description</a></h1>
      The <strong>IsNumeric</strong> strategy provides users with the ability
      to check if Resource keyword values are numeric. Resources with a
      non-numeric value are deactivated.
    </p>
    <p>
      A keyword value is considered numeric if it can be converted to a floating
      point number. If the keyword does not exist in the Resource, then its value
      is not considered numeric.
    </p>

    <TABLE BORDER="1">
      <CAPTION><h4>IsNumeric Strategy Object Keywords</h4></CAPTION>
      <TR>
        <TH>Keyword</TH>
        <TH>Disposition</TH>
        <TH>Description</TH>
      </TR>
      <TR>
        <TD>Name</TD>
        <TD>Required</TD>
        <TD>
          User-defined name of the IsNumeric strategy.
        </TD>
      </TR>
      <TR>
        <TD>Type</TD>
        <TD>Required</TD>
        <TD>
          Identifies the IsNumeric strategy - must be <em>IsNumeric</em> or it will
          not be recognized as a valid Strategy by isisminer.
        </TD>
      </TR>
      <TR>
        <TD>Description</TD>
        <TD>Optional</TD>
        <TD>
          User provides a description of the IsNumeric strategy.
        </TD>
      </TR>
      <TR>
        <TD>Keyword</TD>
        <TD>Required</TD>
        <TD>
          Specifies the name (or names - you can list more than one keyword to 
          check) of an existing Resource keyword that will be included if it is 
          numeric.
        </TD>
      </TR>
    </TABLE>

    <p>
      The following is an example of an IsNumeric strategy:
      <pre>
Object = Strategy
  Name = RemoveNotApplicable
  Type = IsNumeric
  Description = "Deactivate all responses which did not respond to rating."
  Keyword = Rating
EndObject
      </pre>
    </p>
    <p align="right"><a href="#top"><font size="1">
      Return to List of Strategy Types
    </font></a></p>
    <!-- End of IsNumeric Strategy documentation -->

    <!-- Document Limit Strategy -->
    <p>
      <h1><a name="Limit">Limit Strategy Description</a></h1>
      The <strong>Limit</strong> strategy provides users with the ability
      to check if Resource keyword values are within user-defined limits. Values 
      that are outside of the limits result in Resource deactivation.
    </p>
    <p>
      If keyword values are within the limits, the Resource disposition is set 
      to activated. If the keyword is not within the limits provided, the 
      Resource disposition is set to deactivated.
    </p>
    <p>
       This Strategy uses the <a href="#Calculator">Calculator</a> strategy. Any 
       equation constructed that is valid for the Calculator strategy is valid 
       for Limit.  This includes the use of Equations group to use more than one 
       equation. The difference here is the value of the last equation is used 
       to evaluate a true (!0) or false (0) limit for the Resource. Also note, 
       that a side effect of using the Equations group is that any new keyword 
       created by an equation remains in the Resource.
    </p>

    <TABLE BORDER="1">
      <CAPTION><h4>Limit Strategy Object Keywords</h4></CAPTION>
      <TR>
        <TH>Keyword</TH>
        <TH>Disposition</TH>
        <TH>Description</TH>
      </TR>
      <TR>
        <TD>Name</TD>
        <TD>Required</TD>
        <TD>
          User-defined name of the Limit strategy.
        </TD>
      </TR>
      <TR>
        <TD>Type</TD>
        <TD>Required</TD>
        <TD>
          Identifies the Limit strategy - must be <em>Limit</em> or it will
          not be recognized as a valid Strategy by isisminer.
        </TD>
      </TR>
      <TR>
        <TD>Equation</TD>
        <TD>Optional</TD>
        <TD>
          Specifies an equation using Resource keywords that will be checked 
          for true (!0) or false (0) results.
        </TD>
      </TR>
      <TR>
        <TD>Equations</TD>
        <TD>Optional</TD>
        <TD>
          This group can be used instead of the Equation keyword to define a 
          series of equations executed in sequence. The last resulting 
          computation will be used to check for true (!0) or false (0) results. 
          Either the Equation keyword or Equations group must be specified.
        </TD>
      </TR>
    </TABLE>

    <p>
      Following are few examples of Limit strategies:
      <pre>
Object = Strategy 
  Type = Limit
  Name = EmissionAngle
  Equation = "((emissionangle &gt; 30) &amp;&amp; (emissionangle &lt; 80))"
EndObject
      </pre>
      This shows an example of using a series of equations to determine limits:
      <pre>
Object = Strategy
  # This algorithm will select only images where the center latitude
  # and longitudes are within the defined region provided in the GLOBALS
  # parameter file.
  Name = SelectRegion
  Type = Limit
  Description = "Find all images with center image geometry in the
                 defined region"

  # This set of equations will result in 1 if test are good, meaning the
  # clat/clon is in the defined region. If any test fails, InRegion = 0
  # (false) and the Resource is disabled. Note this also defines the GIS
  #  bounding box.
  Group = Equations
    InRegion = 1
    InRegion = "InRegion * (CenterLongitude &gt;  RegionLowerLeftLongitude)"
    InRegion = "InRegion * (CenterLatitude  &gt;  RegionLowerLeftLatitude)"
    InRegion = "InRegion * (CenterLongitude &lt;= RegionUpperRightLongitude)"
    InRegion = "InRegion * (CenterLatitude  &lt;= RegionUpperRightLatitude)"
  EndGroup
EndObject
      </pre>
    </p>
    <p align="right"><a href="#top"><font size="1">
      Return to List of Strategy Types
    </font></a></p>
    <!-- End of Limit Strategy documentation -->

    <!-- Document NumericalSort Strategy -->
    <p>
      <h1><a name="NumericalSort">NumericalSort Strategy Description</a></h1> 
      The <strong>NumericalSort</strong> strategy provides users with the ability 
      to sort Resources according to a numerically-valued keyword 
      (<em>SortKey</em>). Resources may be sorted in Ascending or Descending 
      order according to the value specified in <em>Order</em>.
    </p>
    <p>
      <em>SortKey</em> must have a numerical value for each Resource that will 
      be sorted. See the <a href="#IsNumeric">IsNumeric</a> strategy.
    </p>
    <p>
      <em>Order</em> may be specified as either Ascending or Descending. If not provided,
      the Resources will be sorted in Ascending order.
    </p>

    <TABLE BORDER="1">
      <CAPTION><h4>NumericalSort Strategy Object Keywords</h4></CAPTION> 
      <TR>
        <TH>Keyword</TH>
        <TH>Disposition</TH>
        <TH>Description</TH>
      </TR>
      <TR>
        <TD>Name</TD>
        <TD>Required</TD>
        <TD>
          User-defined name of the NumericalSort strategy.
        </TD>
      </TR>
      <TR>
        <TD>Type</TD>
        <TD>Required</TD>
        <TD>
          Identifies the NumericalSort strategy - must be <em>NumericalSort</em> or it will 
          not be recognized as a valid Strategy by isisminer.
        </TD>
      </TR>
      <TR>
        <TD>Description</TD>
        <TD>Optional</TD>
        <TD>
          User provides a description of the NumericalSort strategy.
        </TD>
      </TR>
      <TR>
        <TD>SortKey</TD>
        <TD>Required</TD>
        <TD>
          Specifies the name of an existing Resource keyword that will 
          be used to sort the Resources. The keyword's values for each Resource
          must be numerical.
        </TD>
      </TR>
      <TR>
        <TD>Order</TD>
        <TD>Optional</TD>
        <TD>
          The order, ascending or descending, that Resources can be
          sorted in. Defaults to Ascending.
        </TD>
      </TR>
    </TABLE>

    <p>
      The following is an example of a NumericalSort strategy:
      <pre>
Object = Strategy
  Name = RankSort
  Type = NumericalSort
  Description = "Sorts the Resources in ascending order by Rank" 
  SortKey = Rank
  Order = Ascending
EndObject
      </pre>
    </p>
    <p align="right"><a href="#top"><font size="1">
      Return to List of Strategy Types
    </font></a></p>
    <!-- End of NumericalSort Strategy documentation -->

    <!-- Document PdsTableCreator Strategy -->
    <p>
      <h1><a name="PdsTableCreator">PDS Table Creator Strategy Description</a></h1>
      The <strong>PdsTableCreator</strong> strategy is used to create and write a PDS table
      file from column Resources. When the PDS table format file is created the column 
      Resources are converted to PdsColumns, and all active Resources are written to the file.
    </p>
    <p>
      Records are delimited by a new line. Fields are delimited as specified by the
      Delimiter parameter, which defaults to a comma.
    </p>

    <TABLE BORDER="1">
      <CAPTION><h4>PdsTableCreator Strategy Object Keywords</h4></CAPTION>
      <TR>
        <TH>Keyword</TH>
        <TH>Disposition</TH>
        <TH>Description</TH>
      </TR>
      <TR>
        <TD>Name</TD>
        <TD>Required</TD>
        <TD>
          User-defined name of the PdsTableCreator strategy.
        </TD>
      </TR>
      <TR>
        <TD>Type</TD>
        <TD>Required</TD>
        <TD>
          Identifies the PdsTableCreator strategy - must be <em>PdsTableCreator</em> or 
          it will not be recognized as a valid Strategy by isisminer.
        </TD>
      </TR>
      <TR>
        <TD>PdsFormatFile</TD>
        <TD>Required</TD>
        <TD>
          The output format file. Can use arguments specified by PdsFormatFileArgs.
        </TD>
      </TR>
      <TR>
        <TD>PdsFormatFileArgs</TD>
        <TD>Optional</TD>
        <TD>
          Replace placeholders in PdsFormatFile of the form <em>%1</em>, 
          <em>%2</em>,..., <em>%99</em>,
          with the arguments specified. Each placeholder is replaced by
          its corresponding argument in order. 
        </TD>
      </TR>
      <TR>
        <TD>PdsTableFile</TD>
        <TD>Required</TD>
        <TD>
          The output Pds table file. Can use arguments specified by PdsTableFileArgs.
        </TD>
      </TR>
      <TR>
        <TD>PdsTableFileArgs</TD>
        <TD>Optional</TD>
        <TD>
          Replace placeholders in PdsTableFile of the form <em>%1</em>, 
          <em>%2</em>,..., <em>%99</em>,
          with the arguments specified. Each placeholder is replaced by
          its corresponding argument in order.
        </TD>
      </TR>
      <TR>
        <TD>Mode</TD>
        <TD>Required</TD>
        <TD>
          The mode in which to write the Pds Table file. If <em>Create</em>, a new
          file is created or an existing file with the same name is
          overwritten. If <em>Append</em>, the output Pds Table file will be appended
          to the file. Defaults to <em>Create</em>.
        </TD>
      </TR>
      <TR>
        <TD>Delimiter</TD>
        <TD>Optional</TD>
        <TD>
          The character or string used to separate fields in a record. Defaults to a comma.
        </TD>                
      </TR>
      <TR>
        <TD>DefaultValue</TD>
        <TD>Optional</TD>
        <TD>
          If a Resource does not have a keyword that is specified by
          the Keywords parameter, it will write this value to the
          column in the corresponding row Pds Table file instead.
          Defaults to <em>NULL</em>.
        </TD>
      </TR>
    </TABLE>

    <p>
      The following is an example of a PdsTableCreator strategy:
      <pre>
Object = Strategy
  Name = TestAppendTableWriter
  Type = PdsTableCreator
  PdsFormatFile = "%1/TestGeneralFormat.txt"
  PdsFormatFileArgs = "inputdir"
  PdsTableFile = "%1/TestAppend.TAB"
  PdsTableFileArgs = "outputdir"
  Mode = Append
  Delimiter = ","
  DefaultValue = "NULL"
EndObject
      </pre>
    </p>
    <p align="right"><a href="#top"><font size="1">
      Return to List of Strategy Types
    </font></a></p>
    <!-- End of PdsTableCreator Strategy Documentation-->

    <!-- Document PdsTableFormat Strategy -->
    <p>
      <h1><a name="PdsTableFormat">PDS Table Format Strategy Description</a></h1>
      The <strong>PdsTableFormat</strong> strategy is used to create and write a PDS table
      format descriptor file for a PDS table. When the PDS table format file is created, the columns are 
      created according to the byte size of the Resource, and then that data is stored in the format file. 
      The Resources in the column are delimited by the delimiter.
    </p>
    <p>
      Records are delimited by a new line. Fields are delimited as specified by the
      Delimiter parameter, which defaults to a comma.
    </p>

    <TABLE BORDER="1">
      <CAPTION><h4>PdsTableFormat Strategy Object Keywords</h4></CAPTION>
      <TR>
        <TH>Keyword</TH>
        <TH>Disposition</TH>
        <TH>Description</TH>
      </TR>
      <TR>
        <TD>Name</TD>
        <TD>Required</TD>
        <TD>
          User-defined name of the PdsTableFormat strategy.
        </TD>
      </TR>
      <TR>
        <TD>Type</TD>
        <TD>Required</TD>
        <TD>
          Identifies the PdsTableFormat strategy - must be <em>PdsTableFormat</em> or 
          it will not be recognized as a valid Strategy by isisminer.
        </TD>
      </TR>
      <TR>
        <TD>PdsFormatFile</TD>
        <TD>Required</TD>
        <TD>
          The output format file. Can use arguments specified by PdsFormatFileArgs.
        </TD>
      </TR>
      <TR>
        <TD>PdsFormatFileArgs</TD>
        <TD>Optional</TD>
        <TD>
          Replace arguments in the PdsFormatFile keyword of the form <em>%1</em>, <em>%2</em>,
          ..., <em>%99</em>, with the values of the assumed keywords specified in this 
          keyword parameter.  Each argument is replaced by its corresponding 
          keyword value in order. The keywords are assumed to be Resource or 
          global keyword names.
        </TD>
      </TR>
      <TR>
        <TD>KeywordFormatFile</TD>
        <TD>Optional</TD>
        <TD>
          Name of a file containing individual PDS keyword file formatting 
          directives. Provides user with customization options. Defaults to 
          $ISISROOT/appdata/translations/pdsExportRootGen.typ.
        </TD>
      </TR>
      <TR>
        <TD>KeywordFormatFileArgs</TD>
        <TD>Optional</TD>
        <TD>
          Replace arguments in the KeywordFormatFile keyword of the form <em>%1</em>, <em>%2</em>,
          ..., <em>%99</em>, with the values of the assumed keywords specified in this 
          keyword parameter.  Each argument is replaced by its corresponding 
          keyword value in order. The keywords are assumed to be Resource or 
          global keyword names.
        </TD>
      </TR>
      <TR>
        <TD>Delimiter</TD>
        <TD>Optional</TD>
        <TD>
          The character or string used to separate fields in a record. Defaults to a comma.
        </TD>                
      </TR>
      <TR>
        <TD>Column</TD>
        <TD>Optional</TD>
        <TD>
          The names of the columns to be written to the format files created.
        </TD>
      </TR>
      <TR>
        <TD>DataType</TD>
        <TD>Optional</TD>
        <TD>
          The type of data within the columns.
        </TD>
      </TR>
      <TR>
        <TD>Unit</TD>
        <TD>Optional</TD>
        <TD>
          The unit associated with the data in the column.
        </TD>                
      </TR>
      <TR>
        <TD>DataDescription</TD>
        <TD>Optional</TD>
        <TD>
          User provides a description of the data stored in the column.
        </TD>
      </TR> 
      <TR>
        <TD>{Column Name}_BYTES</TD>
        <TD>Optional</TD>
        <TD>
          Specifies the size of the column, named in Column, in order to make it more efficient,
          in order to eliminate the need to traverse the entire table to determine the largest element
          in the column. 
          <pre>Example: POINT_ID_BYTES = 32</pre>
        </TD>                
      </TR>
    </TABLE>

    <p>
      The following is an example of a PdsTableFormat strategy:
      <pre>
Object = Strategy 
  Name = PdsTableFormat
  Type = PdsTableFormat
  PdsFormatFile = "POINTCLOUDTAB.FTM"
  PdsFormatFileArgs = "outputdir"
  Delimiter = ","
  Column = ("POINT_ID", "STATUS") 
  DataType = ("CHARACTER", "CHARACTER")
  Unit = ("NONE", "NONE") 
  DataDescription = ("Unique point identifier.", "Status of point") 
  POINT_ID_BYTES = 32 
  STATUS_BYTES= 32
EndObject 
      </pre>
    </p>
    <p align="right"><a href="#top"><font size="1">
      Return to List of Strategy Types
    </font></a></p>
    <!-- End of PdsTableFormat Strategy Documentation-->

    <!-- Document PdsTableReader Strategy -->
    <p>
      <h1><a name="PdsTableReader">PDS Table Reader Strategy Description</a></h1>
      The <strong>PdsTableReader</strong> strategy loads a PDS formatted table using 
      a label containing a description of the columns in the table (contained in 
      <em>PdsLabelFile</em>). 
    </p>
    <p>
      If the <em>Identity</em> keyword is not provided or its value is an empty string, 
      each Resource created will be named the row number. Rows are read 
      (starting at 0) from the PDS table data in  <em>PdsTableFIle</em>. 
    </p>
    <p>
     
    </p>

    <TABLE BORDER="1">
      <CAPTION><h4>PdsTableReader Strategy Object Keywords</h4></CAPTION>
      <TR>
        <TH>Keyword</TH>
        <TH>Disposition</TH>
        <TH>Description</TH>
      </TR>
      <TR>
        <TD>Name</TD>
        <TD>Required</TD>
        <TD>
          User-defined name of the PdsTableReader strategy.
        </TD>
      </TR>
      <TR>
        <TD>Type</TD>
        <TD>Required</TD>
        <TD>
          Identifies the PdsTableReader strategy - must be <em>PdsTableReader</em> or it will
          not be recognized as a valid Strategy by isisminer.
        </TD>
      </TR>
      <TR>
        <TD>Description</TD>
        <TD>Optional</TD>
        <TD>
          User provides a description of the PdsTableReader strategy
        </TD>
      </TR>
      <TR>
        <TD>PdsLabelFile</TD>
        <TD>Required</TD>
        <TD>
          User provides file containing label describing the columns in the table.
        </TD>
      </TR>
      <TR>
        <TD>PdsLabelFileArgs</TD>
        <TD>Optional</TD>
        <TD>
          Replace arguments in the PdsLabelFile keyword of the form <em>%1</em>, <em>%2</em>,
          ..., <em>%99</em>, with the values of the assumed keywords specified in this 
          keyword parameter.  Each argument is replaced by its corresponding 
          keyword value in order. The keywords are assumed to be Resource or 
          global keyword names.
        </TD>
      </TR>
      <TR>
        <TD>PdsTableFile</TD>
        <TD>Optional</TD>
        <TD>
          User may need to provide the name of the table file containing data. This 
          may not be needed if the base file name is the same as the label file but 
          ends in <b>.tab</b>.
        </TD>
      </TR>
      <TR>
        <TD>PdsTableFileArgs</TD>
        <TD>Optional</TD>
        <TD>
          Replace arguments in the PdsTableFile keyword of the form <em>%1</em>, <em>%2</em>,
          ..., <em>%99</em>, with the values of the assumed keywords specified in this 
          keyword parameter.  Each argument is replaced by its corresponding 
          keyword value in order. The keywords are assumed to be Resource or 
          global keyword names.
        </TD>
      </TR>
      <TR>
        <TD>Identity</TD>
        <TD>Optional</TD>
        <TD>
          The name given to each Resource. Intended to be used with the
          IdentityArgs parameter to give each Resource a unique name.
          If Identity does not have a value, the Resource names are set as PvlN, N being
          the position of the PVL file in FromList.
        </TD>
      </TR>
      <TR>
        <TD>IdentityArgs</TD>
        <TD>Optional</TD>
        <TD>
          Replace arguments in the Identity keyword of the form <em>%1</em>, <em>%2</em>,
          ..., <em>%99</em>, with the values of the assumed keywords specified in this 
          keyword parameter.  Each argument is replaced by its corresponding 
          keyword value in order. The keywords are assumed to be Resource or 
          global keyword names.
        </TD>
      </TR>
      <TR>
        <TD>TableName</TD>
        <TD>Optional</TD>
        <TD>
          The name of the table object in the label file may use different names. 
          Users will need to provide the name of the PVL object containing the 
          descriptions of each column. Defaults to <em>TABLE</em>.
        </TD>
      </TR>
      <TR>
        <TD>UseFormattedName</TD>
        <TD>Optional</TD>
        <TD>
          Some of the tables will contain column names that contain underscores       
          and some special characters.  If set to <em>True</em>, all white space 
          characters are converted to spaces.  Spaces are then compressed to one 
          space. Any left/right parentheses are removed.  Then the conversion to 
          camel-case is performed. Camel case always converts the first character 
          in the name to uppercase. Each space or underscore character is removed
          and the character following it is converted to uppercase.
          All other characters are converted to lowercase. 
        </TD>
      </TR>
    </TABLE>

    <p>
      The following is an example of an PdsTableReader strategy:
      <pre>
Object = Strategy
  Name             = PdsTableReaderTestDefault
  Type             = PdsTableReader
  PdslabelFile     = "%1/index.lbl"
  PdslabelFileArgs = "inputdir"
  TableName        = "INDEX_TABLE"
  Identity         = "%1"
  IdentityArgs     = File_Name
  UseFormattedName = False
  Description      = "Test the default functionality of PdsTableReader"
EndObject

      </pre>
    </p>
    <p align="right"><a href="#top"><font size="1">
      Return to List of Strategy Types
    </font></a></p>
    <!-- End of PdsTableReader Strategy documentation -->

    <!-- Document PvlReader Strategy -->
    <p>
      <h1><a name="PvlReader">PVL Reader Strategy Description</a></h1>
      The <strong>PvlReader</strong> strategy creates Resources from a list of 
      paths to PVL files (contained in <em>FromList</em>). Each PVL file becomes 
      a Resource where the keywords in the PVL file become the keywords of the 
      Resource. Resources may be created against any provided constraints (                                                           
      <em>Includes</em>, <em>Excludes</em>, and <em>KeyListFile</em>), which 
      describe which keywords become part of the created Resource.
    </p>
    <p>
      If the <em>Identity</em> keyword is not provided or its value is an empty string, 
      each Resource created will be named as PvlN. N is the position number (starting at 0)
      of the PVL file contained in <em>FromList</em>. The basename, Pvl, can be changed by
      setting <em>PvlBaseName</em>.
    </p>
    <p>
      For example, if <em>FromList</em> contains PVL Files ~/somepvl.pvl and ~/someotherpvl.pvl,
      their default <em>Identity</em> values would be Pvl0 and Pvl1, respectively.
    </p>
    <p> 
      The <em>Includes</em> keyword operates on PVL Objects and Groups (containers). 
      When provided by itself, the <em>Includes</em> keyword will exclusively include the
      keywords belonging to the containers specified. Since Groups must be contained in Objects,
      you cannot include a Group without also including its containing Object. Similarly, you 
      must include the Root Object since all PVL files have a Root Object container. For example:
      <pre>
Object = Outer
    Id = 001
    Group = ExtraInfo
        Name = outside
        Time = today
    EndGroup
    Group = OtherInfo
        Info = "No information present"
    EndGroup
    Group = Important
        Level = High
    EndGroup
    Object = Inner
        Data = "Some test data"
    EndObject
EndObject
      </pre>
      To include the ExtraInfo Group, the <em>Includes</em> keyword should be specified,
      which will include the Id, Name, and Time keywords in the created Resource.
      <pre>Includes = (Root, Outer, ExtraInfo)</pre>
    </p>
    <p> 
      The <em>Excludes</em> keyword operates on PVL Objects and Groups (containers). 
      When provided by itself, the <em>Excludes</em> keyword will exclude the keywords belonging
      to the containers specified, while all other containers and keywords will be included.
    </p>
    <p> 
      When both <em>Includes</em> and <em>Excludes</em> are provided, an Object and all of its
      keywords and Groups will be included except for any excluded Groups (Inclusions are
      applied to Objects while exclusions are applied to Groups). 
    </p>
    <p> 
      Referring to the <em>Includes</em> example, to include the Outer Object except for its 
      OtherInfo Group, you would specify the following:
      <pre>
Includes = (Root, Outer)
Excludes = OtherInfo
      </pre>
    </p>
    <p> 
      The <em>KeyListFile</em> keyword operates on PVL Keywords and expects a file containing
      PVL Keywords. If provided, only the keywords in the file will be included in the 
      created Resource. Note that these keywords will only be included if their containers 
      are included or not excluded.
    </p>

    <TABLE BORDER="1">
      <CAPTION><h4>PvlReader Strategy Object Keywords</h4></CAPTION>
      <TR>
        <TH>Keyword</TH>
        <TH>Disposition</TH>
        <TH>Description</TH>
      </TR>
      <TR>
        <TD>Name</TD>
        <TD>Required</TD>
        <TD>
          User-defined name of the PvlReader strategy.
        </TD>
      </TR>
      <TR>
        <TD>Type</TD>
        <TD>Required</TD>
        <TD>
          Identifies the PvlReader strategy - must be <em>PvlReader</em> or it will
          not be recognized as a valid Strategy by isisminer.
        </TD>
      </TR>
      <TR>
        <TD>Description</TD>
        <TD>Optional</TD>
        <TD>
          User provides a description of the PvlReader strategy.
        </TD>
      </TR>
      <TR>
        <TD>FromList</TD>
        <TD>Required</TD>
        <TD>
          User provides file containing a list of paths to PVL files.
        </TD>
      </TR>
      <TR>
        <TD>FromListArgs</TD>
        <TD>Optional</TD>
        <TD>
          Replace arguments in the FromList keyword of the form <em>%1</em>, <em>%2</em>,
          ..., <em>%99</em>, with the values of the assumed keywords specified in this 
          keyword parameter.  Each argument is replaced by its corresponding 
          keyword value in order. The keywords are assumed to be Resource or 
          global keyword names.
        </TD>
      </TR>
      <TR>
        <TD>Identity</TD>
        <TD>Optional</TD>
        <TD>
          The name given to each Resource. Intended to be used with the
          IdentityArgs parameter to give each Resource a unique name.
          If Identity does not have a value, the Resource names are set as PvlN, N being
          the position of the PVL file in FromList.
        </TD>
      </TR>
      <TR>
        <TD>IdentityArgs</TD>
        <TD>Optional</TD>
        <TD>
          Replace arguments in the Identity keyword of the form <em>%1</em>, <em>%2</em>,
          ..., <em>%99</em>, with the values of the assumed keywords specified in this 
          keyword parameter.  Each argument is replaced by its corresponding 
          keyword value in order. The keywords are assumed to be Resource or 
          global keyword names.
        </TD>
      </TR>
      <TR>
        <TD>Includes</TD>
        <TD>Optional</TD>
        <TD>
          Used to exclusively include Objects and Groups when creating a Resource from a read
          PVL file.
        </TD>
      </TR>
      <TR>
        <TD>Excludes</TD>
        <TD>Optional</TD>
        <TD>
          Used to ignore/exclude Objects and Groups when creating a Resource from a read PVL 
          file.
        </TD>
      </TR>
      <TR>
        <TD>KeyListFile</TD>
        <TD>Optional</TD>
        <TD>
          Used to exclusively include any PVL Keywords in the provided file when creating a 
          Resource from a read PVL file.
        </TD>
      </TR>
      <TR>
        <TD>KeyListFileArgs</TD>
        <TD>Optional</TD>
        <TD>
          Replace arguments in the KeyListFile keyword of the form <em>%1</em>, 
          <em>%2</em>, ..., <em>%99</em>, with the values of the assumed keywords specified in 
          this keyword parameter.  Each argument is replaced by its 
          corresponding keyword value in order. The keywords are assumed to be 
          Resource or global keyword names.
        </TD>
      </TR>
      <TR>
        <TD>PvlBaseName</TD>
        <TD>Optional</TD>
        <TD>
          The base of the default name of each Resource. The default Resource names are the base
          name and a number. For example: <em>Pvl0</em>, <em>Pvl1</em>, etc. Defaults to 
          <em>Pvl</em>.
        </TD>
      </TR>
    </TABLE>
    
    <p>
      The following is an example of an PvlReader strategy:
      <pre>
Object = Strategy
  Name          = PvlReader
  Type          = PvlReader
  FromList      = "%1/testpvl.pvl"
  FromListArgs  = "inputdir"
  Identity      = "%1"
  IdentityArgs  = Id
  KeyListFile   = "%1/keystoinclude.lis"
  KeyListFileArgs = "inputdir"
  Description   = "A PvlReader Strategy that includes the keywords contained in keystoinclude.lis
                             when creating the Resource from testpvl.pvl"
EndObject
      </pre>
    </p>
    <p align="right"><a href="#top"><font size="1">
      Return to List of Strategy Types
    </font></a></p>
    <!-- End of PvlReader Strategy documentation -->


    <!-- Document ResourceManager Strategy -->
    <p>
      <h1><a name="ResourceManager">Resource Manager Strategy Description</a></h1> 
      The <strong>ResourceManager</strong> strategy provides users with the ability to apply 
      simple operations to Resources.  These operations are ResetDiscard, 
      ToggleDiscard, DeleteDiscard, DeleteAsset, and HasAsset. For more 
      information, please see the table below.  
    </p>
    <p> For DeleteAsset and HasAsset, the Asset is specified in the Operations Keyword as <br />
      Operations = HasAsset::AssetName or Operations = DeleteAsset::AssetName.
    </p>
    <TABLE BORDER="1">
      <CAPTION><h4>ResourceManager Strategy Object Keywords</h4></CAPTION> 
      <TR>
        <TH>Keyword</TH>
        <TH>Disposition</TH>
        <TH>Description</TH>
      </TR>
      <TR>
        <TD>Name</TD>
        <TD>Required</TD>
        <TD>
          User-defined name of the ResourceManager strategy.
        </TD>
      </TR>
      <TR>
        <TD>Type</TD>
        <TD>Required</TD>
        <TD>
          Identifies the ResourceManager strategy - must be <em>ResourceManager</em> or it will 
          not be recognized as a valid Strategy by isisminer.
        </TD>
      </TR>
      <TR>
        <TD>Description</TD>
        <TD>Optional</TD>
        <TD>
          User provides a description of the ResourceManager strategy.
        </TD>
      </TR>
      <TR>
        <TD>Operations</TD>
        <TD>Required</TD>
        <TD>
          <br><h2 align="center">Operations</h2></br>
          <TABLE BORDER="1">
            <CAPTION align="top">
              This specifies which operation to perform on the Resource. A list of operations can 
              also be specified as Operations={Operation1, Operation2, ...}.
            </CAPTION>
            <TR>
              <TH>Parameter</TH>
              <TH>Description</TH>
            </TR>
            <TR>
              <TD> ResetDiscard </TD>
              <TD> Re-activates all discarded Resources.</TD>
            </TR>
            <TR>
              <TD>ToggleDiscard</TD>
              <TD> 
                Activates all deactivated Resources Resources and deactivates all
                activated Resources.
              </TD>
            </TR>
            <TR>
              <TD>DeleteDiscard</TD>
              <TD>Removes all deactivated Resources.</TD>
            </TR>
            <TR>
              <TD>DeleteAsset</TD> 
              <TD>
                Deletes a given Asset from all Resources that have it. Must be of form
                DeleteAsset::AssetName.
              </TD>
            </TR>
            <TR>
              <TD>HasAsset</TD> 
              <TD>
                Discards Resources without a given Asset. Must be of form HasAsset::AssetName.
              </TD>
            </TR>
          </TABLE>
        </TD>
      </TR>
    </TABLE>
    <p>
      The following is an example of a ResourceManager strategy:
      <pre>
Object = Strategy
  Name = SwitchActivated
  Type = ResourceManager
  Description = "Swap activated (Included) and deactivated (Excluded) entries in a Resource."
  Operations = ToggleDiscard
EndObject
      </pre>
      <p>
          A second example with multiple management operations
      </p>
        <pre>
# Clear the entire Resource list (useful in Sidebar Strategies)
Object = Strategy
  Name = ClearResources
  Type = ResourceManager
  Description = "Delete all Resources"
  Operations = ( ResetDiscard, ToggleDiscard, DeleteDiscard )
EndObject
        </pre>
    </p>
    <p align="right"><a href="#top"><font size="1">
      Return to List of Strategy Types
    </font></a></p>
    <!-- End of ResourceManager Strategy documentation -->

    <!-- Document RunCommand Strategy -->
    <p>
      <h1><a name="RunCommand">Run Command Strategy Description</a></h1> 
        The <strong>RunCommand</strong> strategy allows shell commands to be 
        executed for each Resource. In addition, there is frequently a need to 
        run commands prior to and after individual Resource processing. For this 
        purpose, groups called <em>PreCommands</em> and <em>PostCommands</em> 
        contain commands  that are executed before and after, respectively, 
        processing each Resource.
    </p>
    <p>
        Commands can be formulated using the keyword argument substitution 
        options available for using global parameter pools for replacing 
        arguments in commands with Resource keyword values. One keyword, 
        <em>CommandArgs</em>, is available to list all the Resource and global 
        pool variables that are to be used in replacement. All commands can use 
        a <em>%1</em> to <em>%n</em> where n is the total number of keywords list in the 
        <em>CommandArgs</em> keyword. This one list of keywords is used to 
        substitute for all commands. 
    </p>
    <TABLE BORDER="1">
      <CAPTION><h4>RunCommand Strategy Object Keywords</h4></CAPTION> 
      <TR>
        <TH>Keyword</TH>
        <TH>Disposition</TH>
        <TH>Description</TH>
      </TR>
      <TR>
        <TD>Name</TD>
        <TD>Required</TD>
        <TD>
          User-defined name of the RunCommand strategy.
        </TD>
      </TR>
      <TR>
        <TD>Type</TD>
        <TD>Required</TD>
        <TD>
          Identifies the RunCommand strategy - must be <em>RunCommand</em> or it 
          will not be recognized as a valid Strategy by isisminer.
        </TD>
      </TR>
      <TR>
        <TD>Description</TD>
        <TD>Optional</TD>
        <TD>
          User provides a description of the RunCommand strategy.
        </TD>
      </TR>
      <TR>
        <TD>Command</TD>
        <TD>Optional</TD>
        <TD>
          Provides a single command that will be executed once for each active 
          Resource.
        </TD>
      </TR>
     <TR>
        <TD>Commands</TD>
        <TD>Optional</TD>
        <TD>
          This is a Group in the RunCommand strategy that can contain more than 
          one command to execute for each Resource.  This can exist with the 
          Command keyword but contents of this group will be executed after the 
          Command content.
        </TD>
      </TR>
     <TR>
        <TD>PreCommands</TD>
        <TD>Optional</TD>
        <TD>
          The contents of this group contains optional commands that will be run 
          once before any Resources (and their commands) are executed. For 
          example, this group is useful for creating directories prior to 
          processing any Resource commands.
        </TD>
      </TR>
     <TR>
        <TD>PostCommands</TD>
        <TD>Optional</TD>
        <TD>
          The contents of this group contains optional commands that will be run 
          after all Resources (and their commands) are executed. For example, 
          this group is useful for running an ISIS application after processing 
          all Resources.
        </TD>
      </TR>
     <TR>
        <TD>CommandArgs</TD>
        <TD>Optional</TD>
        <TD>
          This keyword contains keywords that will be used to substitute any 
          occurrences of keyword arguments (i.e., <em>%1</em>, <em>%2</em>,...) in all commands 
          regardless of which group the command is from.
        </TD>
      </TR>
    </TABLE>
    <p>
      The following is an example of a RunCommand strategy. The <em>&amp;quot;</em> 
      text is required and should be included in the configuration of your 
      command. The <em>&amp;quot;</em> and <em>&amp;apos;</em> are substituted prior to issuing 
      the command to the shell for execution. This is required because of PVL syntax rules.
      <pre>
Object = Strategy
  Name         = RunManyCommands
  Type         = RunCommand
  Description  = "Tests running many command"

  CommandArgs = (outputdir, SourceProductId, StartTime)
  # Ensure the output file exists
  Group = PreCommands
    Command0 = "touch %1/runmanycommands.txt"
  EndGroup

  # Append the Resource name and start time
  Group = Commands
    Command1 = "echo &amp;quot;Resource name %2 and date %3.&amp;quot; >> %1/runmanycommands.txt"
  EndGroup
EndObject

      </pre>
    </p>
    <p align="right"><a href="#top"><font size="1">
      Return to List of Strategy Types
    </font></a></p>
    <!-- End of RunCommand Strategy documentation -->

    <!-- Document Sidebar Strategy -->
    <p>
      <h1><a name="Sidebar">Sidebar Strategy Description</a></h1>
      The <strong>Sidebar</strong> strategy allows complete isisminer
      configurations to be run within a single Strategy. The configuration
      can be loaded from a file or from an embedded <b>IsisMiner</b> object.
      The configuration can be run without affecting the active state of
      Resources with the SavePoint keyword. It can be run without deleting
      or creating Resources with the <em>SaveDelete</em> keyword.
    </p>
    <p>
       Sidebar strategies are useful for running Strategies that have the 
       potential to throw out Resources or alter a current state that may be 
       undesirable. For these cases, you can use a Sidebar that saves all the 
       Resources, activated and deactivated, their current states and preserves 
       any operations that may alter or discard Resources. It can also be used 
       to process an entirely new set of Resources while retaining the current 
       state of existing Resources.
    </p>
    <p>
        Sidebar strategies can be inserted anywhere in the sequence of 
        Strategies but are best placed strategically at critical points in the 
        processing sequence where preservation of the current active Resource 
        state is needed.
    </p>

    <TABLE BORDER="1">
      <CAPTION><h4>Sidebar Strategy Object Keywords</h4></CAPTION>
      <TR>
        <TH>Keyword</TH>
        <TH>Disposition</TH>
        <TH>Description</TH>
      </TR>
      <TR>
        <TD>Name</TD>
        <TD>Required</TD>
        <TD>
          User-defined name of the Sidebar strategy.
        </TD>
      </TR>
      <TR>
        <TD>Type</TD>
        <TD>Required</TD>
        <TD>
          Identifies the Side strategy - must be <em>Sidebar</em> or 
          it will not be recognized as a valid Strategy by isisminer.
        </TD>
      </TR>
      <TR>
        <TD>Description</TD>
        <TD>Optional</TD>
        <TD>
          User provides a description of the Sidebar strategy.
        </TD>
      </TR>
     <TR>
        <TD>IsisMiner</TD>
        <TD>Optional (Object)</TD>
        <TD>
          PVL Object containing an <b>IsisMiner</b> definition to be run on the list 
          of Resources. Either this or StrategyConfigFile must be specified.
        </TD>
      </TR>
      <TR>
        <TD>StrategyConfigFile</TD>
        <TD>Optional (File)</TD>
        <TD>
          File containing run parameters on the Resources. If this file is not given, 
          an <b>IsisMiner</b> object must be specified.
        </TD>
      </TR>
      <TR>
        <TD>StrategyConfigFileArgs</TD>
        <TD>Optional</TD>
        <TD>
          Replace placeholders in StrategyConfigFile of the form <em>%1</em>, <em>%2</em>,
          etc. up to <em>%99</em> with the arguments specified. Each placeholder
          is replaced by its corresponding argument in order.
        </TD>
      </TR>
      <TR>
        <TD>SavePoint</TD>
        <TD>Optional</TD>
        <TD>
          If <em>True</em>, the activeness of all the Resources will be retained after
          the sidebar configuration has run. If <em>False</em>, any Resources that are
          discarded during the configuration will remain discarded and lost to 
          subsequent processing. Defaults to <em>True</em>.
        </TD>
      </TR>
      <TR>
        <TD>SaveDelete</TD>
        <TD>Optional</TD>
        <TD>
          If <em>True</em>, any Resources that are deleted by the side configuration
          will be restored. In addition, any Resources that are created during
          the configuration will be deleted. If <em>False</em>, deleted Resources will
          remain deleted and created Resources will remain. Defaults to 
          the value of SavePoint.
        </TD>
      </TR>
    </TABLE>
    <p>
      The following is an example of a Sidebar strategy:
      <pre>
Object = Strategy
  Name = SetUpResources
  Type = SideBar
  SavePoint = True
  SaveDelete = False
  StrategyConfigFile = "%1/setup.conf"
  StrategyConfigFileArgs = "inputdir"
EndObject
      </pre>
    </p>
    <p align="right"><a href="#top"><font size="1">
      Return to List of Strategy Types
    </font></a></p>
    <!-- End of Sidebar Strategy Documentation -->

    <!-- Document StereoPair Strategy -->
    <p>
      <h1><a name="StereoPair">StereoPair Strategy Description</a></h1>
        The <strong>StereoPair</strong> strategy provides users with the ability
        to determine, from Resources that have overlapping GIS footprints, 
        stereo pairs that pass a series of constraints. This Strategy algorithm 
        takes direct advantage of both the <a href="#GisOverlap">GisOverlap</a> 
        and <a href="#Calculator">Calculator</a> strategies in characteristics 
        of those Strategies are incorporated into this Strategy. The 
        configuration for the GisOverlap and Calculator strategies (i.e., all 
        keyword parameters) are included in the StereoPair configuration as 
        their functionality is used in the determination of 
        ranked (best) stereo pairs. GisOverlap performs the preliminary 
        requirement of image overlap determination and ratio limits, disposition 
        of overlap geometry and merging of the stereo pair Resources into one 
        Resource. The Calculator strategy computes the stereo strength for a 
        pair from the results of <em>ImageStrength</em> and 
        <em>StereoStrength</em> keyword sets. Each keyword in the groups 
        evaluates to values greater than or equal to 0 and less than or equal 
        to 1 where 1 is the highest value for a keyword (unless a multiplier is 
        used).
    </p>
    <p>
        Parameters for this algorithm define two levels of stereo constraints 
        that are described in 
        <a  href="http://www.hou.usra.edu/meetings/lpsc2015/pdf/2703.pdf">[Becker  2015]</a>.
        The first level of constraints are typically for constraining   
        photometric (incidence, emission, phase) and geometric angles. The 
        constraints for these limits are located in the <em>ImageStrength</em> 
        group. Each keyword there should exist in each Resource or have a 
        keyword map specified in the <em>KeywordMap</em> group. The second level 
        constraints contained in the <em>StereoStrength</em> group are stereo 
        limits and are applied to values computed from the stereo algorithm with 
        contributions from both pair Resources. The format for keywords in both 
        of these groups are four element vectors but only 3 values are required.  
        For example, to limit the emission angle between 0 and 50 degrees, the 
        form of the keyword in the <em>ImageStrength</em> group is 
        <strong>Emission = (0.0, 50, 15.0 [, 1.0])</strong>. The first value in 
        this keyword is the minimum value, the second is the maximum value and 
        the third value is the value for emission that provides the best stereo 
        conditions.  The last optional value is a multiplier of the computed 
        strength, or rank, for each keyword limit that can be used to weight the 
        computed strength of the limit beyond the 0 - 1 range.
    </p>
    <p>
       The rank of each keyword is computed using the following scheme based 
       upon this form of limit keywords in both <em>ImageStrength</em> and 
      <em>StereoStrength</em>:   <strong>LimitKey = (t0, t1, t2, t3)</strong>
      where all t0 through t3 values are numerical numbers and t0 is the 
      minimum, t1 is maximum, t2 is the best value in the range and t3 is a 
      weighting factor.  The formula to compute the rank of each keyword is as
      follows:
      <pre>
range = max(abs(t2-t0), abs(t1-t2))
rank = 1 - abs(t2-value)/range
rank *= t3          
      </pre>
      The end result of rank is then stored in a keyword comprised of the name 
      of the keyword with <em>Rank</em> appended to it.  For example if the Emission 
      keyword above is provided as a limit, and an image has an Emission angle 
      value of 30 degrees, the rank computed and stored in <strong>EmissionRank 
      = 1 - abs(15 - 30)/max(abs(15-0),abs(50-15)) = 0.57 * 1 (t3)</strong>. 
      All keyword ranks for a stereo Resource are summed for each group and the 
      values are available in <em>ImageStrengthRank</em> and 
      <em>StereoStrengthRank</em>. The <em>ImageStrengthRank</em> is computed as 
      the average of the two image's rank. These values are typically summed in 
      the Equation keyword in the Strategy definition to specify how to rank the 
      strength of an individual stereo pair.  These values can be sorted and 
      reported to users (using an <a href="#AssetSidebar">AssetSidebar</a>).  
      The typical equation used to compute the rank of a stereo pair,
      <em>StereoPairRank</em> in this example, is a combination of the two ranks:
      <pre>
#  Now specify how the stereo quality is determined.
Equation = "imagestrengthrank * 1.0 + stereostrengthrank * 1.0"
Result = StereoPairRank
      </pre>
      The <em>StereoPairRank</em> will contain an indication of the strength of 
      a stereo pair. This keyword and image keywords are combined in a Resource 
      made up of both Resources by merging the keywords from the Resources. The 
      keywords from each Resource have a unique suffix appended to the name of 
      the keyword before they are added. The <a href="#GisOverlap">GisOverlap</a> keywords 
      <em>MergeSuffixA</em> and <em>MergeSuffixB</em> may be used to specify 
      keyword suffixes for each image as they are merged. <em>MergeSuffixA</em> 
      is used to identify the primary stereo image, <em>MergeSuffixB</em> the 
      secondary or matched stereo image. Defaults for merge suffix keywords are 
      <em>A</em> and <em>B</em> respectively.
    </p>
    <p>
       If data is provided by caminfo, then the values required by this Strategy 
       are provided at the center image pixel coordinate. This may not provide 
       accurate results, particularly for the <em>StereoStrength</em> group of 
       keywords, because the values are likely not of the latitude/longitude 
       within the overlapping region of the images. However, the computation of 
       the <em>StereoAngle</em> could be more accurate if you were to take 
       advantage of <a href="#GisOverlap">GisOverlap</a> <em>OverlapMerge</em> options.
       The centroid (longitude/latitude) values for all of these options is computed and 
       stored in new keywords GisOverlapCentroidX (longitude) and 
       GisOverlapCentroidY (latitude) making this coordinate the same point in 
       both stereo image pairs. By setting a parameter in the 
       <em>KeywordMap</em> group as <strong>CenterLongitude = 
       GisOverlapCentroidX</strong> and <strong>CenterLatitude = 
       GisOverlapCentroidY</strong> the <em>StereoAngle</em> is computed from a 
       common surface point. If desired, the user can specify whether to use the
       stereo angle in the computation of the <em>VerticalPrecision</em> stereo
       keyword rather than the <em>ParallaxHeightRatio</em>. Take note the equation
       to compute <em>StereoPairRank</em> can be changed as desired or weights can 
       be provided in the fourth limit keyword value to emphasize or 
       de-emphasize any limit.
    </p>
    <TABLE BORDER="1">
      <CAPTION><h4>StereoPair Strategy Object Keywords</h4></CAPTION> 
      <TR>
        <TH>Keyword</TH>
        <TH>Disposition</TH>
        <TH>Description</TH>
      </TR>
      <TR>
        <TD>OverlapMinimum</TD>
        <TD>Optional</TD>
        <TD>
          Specifies the minimum common overlap ratio of the two geometries with 
          respect to the primary Resource to be valid. If the computed ratio is 
          less than this value, the Resource will not be deemed a valid overlap 
          due to lack of common coverage. Defaults to 0.0. 
        </TD>
      </TR>
      <TR>
        <TD>OverlapMaximum</TD>
        <TD>Optional</TD>
        <TD>
          Specifies the maximum common overlap ratio of the two geometries with 
          respect to the primary Resource to be valid. If the computed ratio is 
          greater than this value, the Resource will not be deemed a valid 
          overlap due to too much common coverage. Defaults to 1.0. 
        </TD>
      </TR>
      <TR>
        <TD>OverlapRatioKey</TD>
        <TD>Optional</TD>
        <TD>
          Provides the name of the keyword to retain the common overlap ratio.  
          If not provided, it will be stored in the merged Resource as the 
          keyword <em>OverlapRatio</em>. 
        </TD>
      </TR>
      <TR>
        <TD>Asset</TD>
        <TD>Optional</TD>
        <TD>
          Provides the name of the Asset created containing all the Resources 
          determined to have overlap GIS geometries from the candidate list. If 
          not provided, <em>GisOverlap</em> will be the default.
        </TD>
      </TR>
      <TR>
        <TD>MergeSuffixA</TD>
        <TD>Optional</TD>
        <TD>
          To provide uniqueness of keywords that are common to both Resources 
          when they are combined, a suffix is added to the primary Resource. Use 
          this keyword to specify the keyword suffix. If not provided, <em>A</em> is 
          the default.
        </TD>
      </TR>
      <TR>
        <TD>MergeSuffixB</TD>
        <TD>Optional</TD>
        <TD>
          To provide uniqueness of keywords that are common to both Resources 
          when they are combined, a suffix is added to the Resource that 
          overlaps the primary Resource. Use this keyword to specify the keyword 
          suffix of the overlapping Resource. If not provided, <em>B</em> is the 
          default.
        </TD>
      </TR>
      <TR>
        <TD>OverlapMerge</TD>
        <TD>Optional</TD>
        <TD>
           <br><h2 align="center">GIS Operators</h2></br>
          <TABLE BORDER="1">
            <CAPTION align="top">
              Users can determine how to merge the GIS geometries of overlapping 
              Resources using the following options. Note the resulting geometry 
              is stored in the combined Resource of the primary and overlapping 
              Resources. Note also that two additional keywords are added to the 
              combined Resources that provide the centroid coordinate of the 
              resulting geometry. These keywords are 
              <em>GisOverlapCentroidX</em> and <em>GisOverlapCentroidY</em> that 
              provide the center coordinate of the geometry X (typically 
              longitude) and Y (latitude). These become useful for computing 
              common stereo data.
            </CAPTION>
            <TR>
              <TH>Parameter</TH>
              <TH>Description</TH>
            </TR>
            <TR>
              <TD> Intersect </TD>
              <TD>
                Combines the two GIS footprints as an intersection. This will 
                result in a GIS geometry that contains the area of common 
                overlap.
              </TD>
              </TR>
              <TR>
                <TD>Union</TD>
                <TD>
                  Combines the two GIS footprints as a union. This will create a 
                  geometry made of the area of both Resource geometries.
                </TD> 
              </TR>
              <TR>
                <TD>Centroid</TD>
                <TD>
                  This option creates a point geometry of the centroid computed 
                  from the intersection of the two geometries. 
                </TD>
              </TR>
              <TR>
                <TD>ResourceA</TD>
                <TD>
                  Propagates the geometry of the primary Resource used in the 
                  overlap determination. 
               </TD> 
            </TR>
            <TR>
              <TD>ResourceB</TD>
              <TD>
                Propagates the geometry of the matching/overlapping Resource 
                used in the overlap determination. It is the Resource found in 
                the list used to match the primary Resource. 
              </TD> 
            </TR>
            <TR>
              <TD>None</TD>
              <TD>No geometry will be created. This is the default.</TD>
            </TR>
          </TABLE>
        </TD>
      </TR>
      <TR>
        <TD>CandidateMiner</TD>
        <TD>Optional (Object)</TD>
        <TD>
          To select the Resource list used to evaluate stereo geometries, 
          users have several ways to create the list.  A complete 
          <strong>isisminer</strong> configuration object called (and named) 
          <em>CandidateMiner</em> can be  provided that will be executed on the 
          full Resource list to generate a list of candidate Resources for 
          comparisons of stereo potential. This configuration must be a 
          compliant, properly formatted <em>isisminer</em>object with the only 
          difference being the name of the object. It may also be 
          provided in a file called <em>CandidateConfigFile</em>. Either a 
          CandidateMiner object or configuration file may be provided, but not both. 
          If no candidate options are provided, the current active list of 
          Resources will be used. 
        </TD>
      </TR>
      <TR>
        <TD>CandidateConfigFile</TD>
        <TD>Optional (File)</TD>
        <TD>
          This option can be used in lieu of a <em>CandidateMiner</em> object to 
          specify a set of Strategies to select stereo candidates. You may also 
          provide arguments to that can be translated when executed to resolve 
          the file name by providing a keyword called 
          <em>CandidateConfigFileArgs</em> that contains keywords that translate 
          occurrences of <em>%1</em> to <em>%n</em> strings in the name of the file. 
        </TD>
      </TR>
      <TR>
        <TD>OverlapMiner</TD>
        <TD>Optional (Object)</TD>
        <TD>
          For efficiency purposes only, users can immediately process the 
          stereo list of a given Resource at the time it is completely 
          determined. Simply provide an isisminer
          configuration object called (and named) 
          <em>OverlapMiner</em> that will be executed on the 
          stereo Resource at the time each one is fully determined.  This 
          configuration must be a compliant, properly formatted                     
          <em>IsisMiner</em> object with the only difference being the name of 
          the object. It may also be provided in a file called         
          <em>OverlapConfigFile</em>. Either an OverlapMiner object or configuration 
          file may be provided, but not both.  If no overlap options are 
          provided, no action is taken on the stereo list.
        </TD>
      </TR>
      <TR>
        <TD>OverlapConfigFile</TD>
        <TD>Optional (File)</TD>
        <TD>
          This option can be used in lieu of a <em>OverlapMiner</em> object to 
          specify a set of Strategies to process stereo Resource results. You 
          may also provide arguments to that can be translated when executed to 
          resolve the file name by providing a keyword called 
          <em>OverlapConfigFileArgs</em> that contains keywords that translate 
          occurrences of <em>%1</em> to <em>%n</em> strings in the name of the file. 
        </TD>
      </TR>
      <TR>
        <TD>PixelPrecisionMatch</TD>
        <TD>Optional</TD>
        <TD>
          This parameter specifies the expected matching precision of image 
          pairs. This value is used to compute the expected vertical precision 
          of the stereo data. Specifically, it specifies the ability to match 
          features in the stereo pairs, measured in pixels. If not provided, the 
          default is 0.2.
        </TD>
      </TR>
     <TR>
        <TD>ImageStrength</TD>
        <TD>Recommended (Group)</TD>
        <TD>
          This group contains keywords that define individual image parameter 
          minimum, maximum, best and (optional) multiplier/scale value. The  
          keyword names contained in this group may be mapped to other keywords 
          using the <em>KeywordMap</em> group. (Mapped) Keywords specified in 
          this group must exist in both the primary and matching stereo images. 
          The Resource is not evaluated for stereo potential. The intended 
          values here are used to screen any images that do not satisfy 
          individual image parameters.
          <br><h2 align="center">Individual Image Strength Values</h2></br>
          <TABLE BORDER="1">
            <CAPTION align="top">
              This group may contain any set of keyword limits/ranks as long as 
              they map (use KeywordMap group if necessary) to valid Resource 
              keywords. Use this group to eliminate images that do not make 
              good stereo candidates because of undesirable lighting or 
              observation conditions. Here are the recommended values.
            </CAPTION>
            <TR>
              <TH>Parameter</TH>
              <TH>Description</TH>
            </TR>
            <TR>
              <TD>Incidence</TD>
              <TD>
                Restriction of incidence angle. The incidence angle is the 
                angle between the local surface normal vector (evaluated on a 
                sphere) and the vector to the Sun. Values should be between 
                40 and 65 degrees (avoid emission shading at low end, shadows 
                at high end). 
                <pre>Example: Incidence = (  30.0,  70.0,  50.0 )</pre>
              </TD>
            </TR>
           <TR>
              <TD>Emission</TD>
              <TD>
                Restriction of emission angle. The emission angle is the 
                angle between the spacecraft intercept point and the local 
                surface normal vector (evaluated on a sphere). Values should 
                be between 0 and 40 degrees (avoid foreshortening and surface 
                hiding). 
                <pre>Example: Emission = (   0.0,  55.0,  15.0 )</pre>
              </TD>
            </TR>
           <TR>
              <TD>Phase</TD>
              <TD>
                Optional restriction of phase angle. The emission angle is 
                the angle between the spacecraft and the illumination source 
                (typically the Sun). Values should be between 15 and 120 
                degrees. Values should be between 15 and 120 degrees. 
                <pre>Example: Phase = ( 15.0, 120.00, 30.0 )</pre>
              </TD>
            </TR>
          <TR>
              <TD>Resolution</TD>
              <TD>
                Optional restriction of resolution differences in image pairs. 
                The ground sample distance (GSD, in m/pixel) at the center or 
                other representative point. Image resolution must be 
                chosen based on the desired resolution of the output DTM. 
                Because typical stereo matching methods do not produce 
                independent height estimates over distances smaller than about 
                3 to 5 image pixels, the image GSD needs to be 3 to 5 times 
                smaller than the desired DTM GSD. The recommended difference
                in resolution is 1/3 of target DTM ground sampling distance 
                (pixel scale). 
                <pre>Example: Resolution  = ( 275.0, 500.0, 300.0 )</pre>
              </TD>
            </TR>
          </TABLE>
        </TD>
      </TR>
     <TR>
        <TD>StereoStrength</TD>
        <TD>Required (Group)</TD>
        <TD>
          This group contains keywords that define stereo strength parameter 
          minimum, maximum, best and (optional) multiplier/scale value. The  
          keyword names contained in this group may be mapped to other keywords 
          using the <em>KeywordMap</em> group. (Mapped) Keywords specified in 
          this group are computed from the stereo algorithm and stored in the 
          combined stereo image pair Resource constructed from the Resource 
          pair. Here is a table of stereo values computed by the algorithm and 
          the required keywords to compute each value.
          <br><h2 align="center">Computed Stereo Strength Values</h2></br>
          <TABLE BORDER="1">
            <CAPTION align="top">
              Stereo values computed and stored in the combined/merged stereo 
              pair Resource. Examples included for some of these values are 
              recommended according to the LPSC abstract cited earlier. If any 
              of the minimum or maximum values are exceeded, the pair is 
              discarded.
            </CAPTION>
            <TR>
              <TH>Parameter</TH>
              <TH>Description</TH>
            </TR>
            <TR>
              <TD>ImageStrengthRank</TD>
              <TD>
                This value is computed as the average of the ImageStrength 
                from the two images that make up the stereo pair. It can be 
                used in combination with the StereoStrengthRank to determine 
                the final best stereo potential (see the Equation keyword).
              </TD>
            </TR>
            <TR>
              <TD>ParallaxHeightRatio</TD>
              <TD>
                The strength of a stereo pair is easily visualized as the 
                angle between the emission vectors of the two images, provided 
                that both vectors are relatively close to vertical. This 
                parameter can be generalized (e.g., to cover cases in which 
                both images are oblique) in terms of the parallax/height 
                ratio. Physically, it represents the amount of parallax 
                difference that would be measured between an object in the two 
                images, for unit height. The keywords <em>ParallaxX</em> and 
                <em>ParallaxY</em> are required in both pair Resources but can be 
                mapped to different keywords in the KeywordMap group. 
                <pre>Example: ParallaxHeightRatio = ( 0.1, 1.0, 0.4 )</pre>
              </TD> 
            </TR>
            <TR>
              <TD>ShadowTipDistance</TD>
              <TD>
                Differences in illumination between two images reduce the 
                accuracy of stereo matching. Compatibility of the images can 
                be measured in terms of the Shadow-Tip Distance. This measurement 
                is defined as the distance between the tips of the shadows in the 
                two images for a hypothetical vertical post of unit height,
                and it is computed analogously to ParallaxHeightRatio. The 
                keywords <em>ShadowX</em> and <em>ShadowY</em> are required in both pair 
                Resources but can be mapped to different keywords in the 
                KeywordMap group. 
                <pre>Example: ShadowTipDistance = ( 0.0, 1.0, 0.5 )</pre>
              </TD>
            </TR>
            <TR>
              <TD>ResolutionRatio</TD>
              <TD>
                Computed as the highest resolution/lowest resolution. The 
                keyword <em>Resolution</em> is required in both pair Resources but 
                can be mapped to different keywords in the KeywordMap group. 
                <pre>Example: ResolutionRatio  = (  1.0,  2.5,  1.0 )</pre>
              </TD> 
            </TR>
            <TR>
              <TD>DeltaSolarAzimuth</TD>
              <TD>
                This optional value is computed as the angular difference in 
                degrees of the <em>SubSolarGroundAzimuth</em> angles in each 
                Resource. The   keyword <em>SubSolarGroundAzimuth</em> is required in 
                both pair Resources but can be mapped to different keywords in 
                the KeywordMap group. 
                <pre>Example: DeltaSolarAzimuth    = (  0.0, 90.0,  45.0 )</pre>
              </TD> 
            </TR>
            <TR>
              <TD>DeltaSpacecraftAzimuth</TD>
              <TD>
                This optional value is computed as the angular difference in 
                degrees of the <em>SubSpacecraftGroundAzimuth</em> angles in each 
                Resource. The keyword <em>SubSpacecraftGroundAzimuth</em> is 
                required in both pair Resources but can be mapped to different 
                keywords in the KeywordMap group. The difference between this 
                angle and the convergence angle is that this angle is measured 
                from the center of the body and not a point on the surface as 
                the StereoAngle.  
                <pre>Example: DeltaSpacecraftAzimuth  = (  0.0, 65.0,  25.0 )</pre>
              </TD>
            </TR>
            <TR>
              <TD>StereoAngle</TD>
              <TD>
                Sometimes called the <b>convergence angle</b>, this optional 
                value is computed as the angle between the two spacecraft to 
                the surface in degrees.  Note that if using the center image 
                latitude/longitude coordinates, the ground points are 
                typically not the same point on the surface and thus, not as 
                reliable. However, if using the GisOverlapCentroidY and 
                GisOverlapCentroidX values, where CenterLongitude and 
                CenterLatitude can be mapped to these values in the 
                KeywordMap group, this is a common point in both images and 
                will produce more accurate results. The keywords CenterRadius, 
                CenterLatitude, CenterLongitude, TargetCenterDistance, 
                SubspacecraftLatitude and SubspacecraftLongitude are required 
                in order to compute this value. However, all of these keywords
                can be mapped to different keywords in the KeywordMap group. 
                <pre>Example:  StereoAngle  = ( 10.0,  65.0,  25.0 )</pre>
              </TD>
            </TR>
          </TABLE>
        </TD>
      </TR>
      <TR>
        <TD>UseStereoAngle</TD>
        <TD>Optional</TD>
        <TD>
          Specify what to use as the VerticalPrecision of a stereo pair. 
          You can use the stereo angle (<em>True</em>) or the ParallaxHeightRatio. It 
          may be more precise, particularly when using the GIS intersection of 
          common area centroid parameters, to use the StereoAngle computed from 
          the common latitude/longitude point rather than the center image 
          pixel latitude/longitude of each image - which is likely not the same 
          point but may be close enough.  Defaults to <em>True</em>, to use the 
          StereoAngle.
        </TD>
      </TR>
      <TR>
        <TD>Equation or Equations (Group)</TD>
        <TD>Required</TD>
        <TD>
          This keyword or set of keywords (if using Equations group) are used 
          to compute the strength (rank) of the stereo pair based upon any 
          value in the combined pair Resource, but is typically applied to 
          stereo ranking values.  The resulting value of the calculation 
          provided by the <a href="#Calculator">Calculator</a> strategy is 
          stored in the combined Resource as the value specified in the 
          <em>Result</em> keyword, required when using the single keyword form 
          or any keyword in the Equations group if you choose to use that 
          method. This example equation is typically as follows:
          <pre>
#  Now specify how the stereo quality is determined. Based upon
#  ImageStrength and StereoStrength, the maximum (best) rank is 8.0.
Equation = "ImageStrengthRank * 1.0 + StereoStrengthRank * 1.0"
Result = StereoPairRank
          </pre>
        </TD>
      </TR>
    </TABLE>

    <p>
      The following is an example using the StereoPair strategy. In this example 
      we are reading image data from an SQLite database containing WAC and NAC 
      MESSENGER data created from caminfo runs. It determines stereo from 
      overlapping images in the vicinity of Degas crater on Mercury.
      <pre>
Object = IsisMiner

  Name = DegasStereoPair
  RequiredParameters = ( inputdir, outputdir )

  Object = Strategy
    Name        = ReadDegasPerimeter
    Type        = CsvReader
    Description = "Read Degas data"

    CsvFile        = "%1/degaus_stereo_perimeter.csv"
    CsvFileArgs    = "inputdir"

     #Ignore the first several lines including the header.
    HasHeader      = True

    Identity = "%1"
    IdentityArgs = "SourceProductId"

  #  Can specify a GIS keyword that will be converted on input
    GisGeometryKey = GisFootprint
    GisType        = WKB
    RemoveGisKeywordAfterImport = False
  EndObject

  Object = Strategy
    Type = StereoPair
    Name = DegasStereoPairs
    Description = "Find all stereo pairs in the Degas crater region"
    OverlapMerge = None
    ShowProgress = True
    #Debug = True

    PixelPrecisionMatch  = 0.2
    Asset = StereoPairs
`
    #  Now specify how the stereo quality is determined.
    Equation = "imagestrengthrank * 1.0 + stereostrengthrank * 1.0"
    Result = StereoPairRank

    #  First level contraints/strengths
    Group = ImageStrength
      Incidence       = (  30.0,  65.0,  50.0 )
      Emission        = (   0.0,  55.0,  15.0 )
      Phase           = (  15.0, 120.00, 30.0 )
      Resolution      = ( 25.0, 5000.0, 200.0 )
    EndGroup

    #  Second level constraints/strengths
    Group = StereoStrength
      ResolutionRatio      = (  1.0,  2.5,  1.0 )
      ParallaxHeightRatio  = (  0.1,  1,    0.4 )
      ShadowTipDistance    = (  0.0,  2.58, 0.0 )
      OverlapRatio         = (  0.1,  1.0,  0.5 )
    EndGroup

    #  This shows the keyword mappings to values required for stereo
    #  matching and constraint values
    Group = KeywordMap
      Resolution = PixelResolution
      Emission   = EmissionAngle
      Incidence  = IncidenceAngle
      Phase      = PhaseAngle
    EndGroup

    #  Select candidates from input list.  Matches over itself
    Object = CandidateMiner
      Object = Strategy
        Name = PairCandidates
        Type = ResourceManager
        Description = "Choose all Resources to determine stereo"
        Operations = ResetDiscard
      EndObject
    EndObject
  EndObject

  Object = Strategy
    Type = AssetSidebar
    Name = WriteStereoFiles
    Description = "Process all stereo pair Assets"
    Asset = StereoPairs
      
    Object = IsisMiner

      Object = Strategy
        Name = SortStereoPairs
        Type = NumericalSort
        Description = "Sort stereo pairs by StereoPairRank"
        SortKey = StereoPairRank
        Order = Descending
      EndObject

      Object = Strategy
        Type = CsvWriter
        Name = WritePairs
        Description = "Write individual files with stereo pair data"

        SkipEmptyLists = True
        CsvFile = "%1/%2.csv"
        CsvFileArgs = ( "outputdir", "Identity" )
        Keywords = ("SourceProductIdA", "SourceProductIdB", "StereoPairRank",
                    "ImageStrengthRank", "StereoStrengthRank",
                    "ParallaxHeightRatio", "ShadowTipDistance", "ResolutionRatio", 
                    "DeltaSolarAzimuth", "DeltaSpacecraftAzimuth", 
                    "VerticalPrecision", "StereoAngle",
                    "ImageStrengthRankA", "ImageStrengthRankB",
                    "IncidenceRankA", "IncidenceRankB",
                    "EmissionRankA", "EmissionRankB",
                    "PhaseRankA", "PhaseRankB",
                    "OverlapRatioA", "OverlapRatioB",
                    "YearDoyA", "YearDoyB", 
                    "CenterLongitudeA", "CenterLatitudeA",
                    "CenterLongitudeB", "CenterLatitudeB",
                    "PixelResolutionA", "PixelResolutionB", 
                    "EmissionAngleA", "EmissionAngleB",
                    "IncidenceAngleA", "IncidenceAngleB",
                    "PhaseAngleA", "PhaseAngleB")
      EndObject
    EndObject
  EndObject
EndObject
End

      </pre>
    </p>
    <p align="right"><a href="#top"><font size="1">
      Return to List of Strategy Types
    </font></a></p>
    <!-- End of StereoPair Strategy documentation -->

  </description>

  <category>
    <categoryItem>Utility</categoryItem>
  </category>  

  <history>
    <change name="Kris Becker" date="2013-02-19">
      Original Version
    </change>
    <change name="Kris Becker" date="2015-02-24">
      Update/complete documentation and regression tests
    </change>
    <change name="Jeffrey Covington" date="2015-02-26">
      Added documentation for the IsNumeric strategy
    </change>
    <change name="Ian Humphrey" date="2015-03-03">
      Added documentation and tests for the NumericalSort strategy
    </change>
    <change name="Makayla Shepherd" date="2015-03-04">
      Added documentation for the Limit strategy
    </change>
    <change name="Jeffrey Covington" date="2015-03-04">
      Added documentation for the CsvWriter strategy
    </change>
    <change name="Jeffrey Covington" date="2015-03-06">
      Added documentation for the CsvReader strategy
    </change>
    <change name="Makayla Shepherd" date="2015-03-13">
      Added documentation for PdsTableFormat strategy
    </change>
    <change name="Ian Humphrey" date="2015-03-16">
      Added documentation for CnetReader strategy
    </change>
    <change name="Kristin Berry" date="2015-03-23">
      Added documentation and tests for the ResourceManager strategy
    </change>
    <change name="Ian Humphrey" date="2015-03-24">
      Added documentation for PvlReader strategy
    </change>
    <change name="Jeannie Backer" date="2015-03-27">
      Added a List of Strategies table of contents with links to each individual description. 
      Added links from individual Strategy descriptions back to table of contents.
    </change>
    <change name="Makayla Shepherd" date="2015-03-27">
      Added documentation for PdsTableCreator strategy. Fixed documentation for 
      PdsTableFormat strategy.
    </change>
    <change name="Jeffrey Covington" date="2015-03-31">
      Added documentation for the Calculator strategy
    </change>
    <change name="Kristin Berry" date="2015-04-07">
     Merged GisBasic strategy with GisIntersect strategy.  Added documentation and tests for 
     GisIntersect strategy. Modified Strategy:::applyToIntersectedGeometry in Strategy.cpp to
     deal with the case where no Resources are active.
    </change>
    <change name="Jeffrey Covington" date="2015-04-09">
      Added documentation for the Sidebar strategy
    </change>
    <change name="Jeffrey Covington" date="2015-04-16">
      Updated documentation for the CSV strategies.
    </change>
    <change name="Kris Becker" date="2015-04-27">
      Added GisOverlap strategy and documentation for it; added ShowProgress keywords to 
      allow users to selectively show the progress status percentage/bar for any Strategy that
      contains this keyword; updated Resource and Strategy code with new additions/modifications.
    </change>
    <change name="Jeffrey Covington" date="2015-04-28">
      Added documentation for the Database strategy.
    </change>
    <change name="Kris Becker" date="2015-04-29">
       Renamed the Database strategy to DatabaseReader
    </change>
    <change name="Andrew Stebenne" date="2015-05-01">
       Added documentation and app tests for the GisUnion strategy.
    </change>
    <change name="Jeffrey Covington" date="2015-05-01">
      Updated the DatabaseReader strategy documentation.
    </change>
    <change name="Ian Humphrey" date="2015-05-01">
       Added documentation for the AssetSidebar strategy
     </change>
    <change name="Makayla Shepherd" date="2015-05-21">
       Added keyword format option (KeywordFormatFile) to PdsTableFormat 
       strategy. 
    </change>
    <change name="Kris Becker" date="2015-05-25">
       Added the ability to code Strategy objects using plugins and added the 
       StereoPair and RunCommand (plugin) Strategies.
    </change>
    <change name="Kris Becker" date="2015-06-05">
       Updated Calculator strategy to include all global parameters in variable 
       resolution; fixed StereoPair computation of stereo angle; implemented 
       check in StrategyFactory to validate RequiredParameters are define in the 
       global variable pool and updated app test configuration files to use this 
       feature.
    </change>
    <change name="Kris Becker" date="2015-06-12">
      Improved GisOverlap and StereoPair strategies. StereoAngle can now be
      computed from the GIS centroid of the overlapping region, providing a
      much higher degree of accuracy. Improved global variable pool management
      whilst traversing through Strategy/Resource depths in the mining process.
      Ensure Asset is cleared when Mode = Create is used in AssetSideBar strategy.
    </change>
    <change name="Kris Becker" date="2015-06-17">
        Fixed bug in creation of GEOS SRTree when only one geometry occurs 
       (requires two or more).  Changed name of IsisMiner objects within the 
       GisOverlap strategy (since we now have two of them) to CandidateMiner and 
       OverlapMiner. Added feature to simplify geometry whilst preserving 
       topology using GEOS' Douglas-Peucker algorithm when reading in 
       geometries. It is automatically detected in Strategies like CsvReader and 
       DatabaseReader. Added many new parameters to various Strategies. 
    </change>
    <change name="Kris Becker" date="2015-06-28">
       Add ability to process the set of GisOverlap results for each Resource
       as they are matched. This is handled in the OverlapMiner Strategy object.
    </change>
   <change name="Kris Becker" date="2015-07-07">
       Added more content to documentation and added an example demonstrating a 
       real application of the isisminer application.
   </change>
   <change name="Kris Becker" date="2015-09-27">
       Refactored the Resource class to contain all but the active status so 
       that copies can be maintained in separate instances. Reworked the 
       AssetSidebar strategy to take advantage of this work.
   </change>
   <change name="Kris Becker" date="2015-10-11">
       Fixed bug in argument scanning when the number of arguments reached 10 or 
       more as %1 was replacing %10, etc... Scan and replace i reverse order 
       corrected this problem. Enhanced the Calculator strategy to provide 
       argument replacement in the Initializers group.
   </change> 
    <change name="Kris Becker" date="2015-11-01">
        Modified CsvReader strategy to have the provided header length determine 
        the number of keywords created/Resource. This allows the jigsaw residual 
        file to read the rejected column.
    </change>
  </history>

  <groups>
    <group name="Inputs">
 
      <parameter name="CONFIG">
        <type>filename</type>
        <fileMode>input</fileMode>
        <brief>
          Configuration of Strategies that are to be executed.
        </brief>
        <description>
          <p>
            This file contains a series of Strategy objects enclosed in an object 
            named IsisMiner. The main documentation contains many different 
            examples of the format of this file. 
          </p>
        </description>
        <filter>*.conf</filter>
      </parameter>

      <parameter name= "GLOBALS">
        <type>filename</type>
        <fileMode>input</fileMode>
        <brief>
          Optional PVL file containing parameters that are loaded into global 
          variable pool.
        </brief> 
        <description>
            All keywords contained in this file are loaded in the global 
            variable pool. Unique keywords that do not exist in 
            Resources can be used as keyword value substitutions in your 
            Strategies.
        </description>
          <default><item>None</item></default>
      </parameter>

      <parameter name= "PARAMETERS">
        <type>string</type>
        <brief>
          Optional user global parameters.
        </brief> 
        <description>
          This parameter allows the user to add global parameters to each 
          Strategy so that they can be used in translation of keyword ARG 
          values.  This parameter has the form: 
          <pre>PARAMETERS = "key1:value1[@key2:value2...]"</pre>
          Defaults to <em>None</em>.
        </description>
          <default><item>None</item></default>
      </parameter>
    </group>
  </groups>

  <examples>
    <example>
      <brief>
        From a global image dataset, find all stereo pairs within a 10x10 degree 
        map section 
      </brief>
      <description>
        <p>
           This example has been used to process MESSENGER MDIS global image 
           dataset. The purpose of this isisminer run is to
           <ol>
             <li>
               identify all images whose center pixel longitude/latitude coordinate are contained
               within a defined 10x10 degree map section,
             </li>
             <li>
               from that list, find all images that overlap each satisfying a specified overlap
               ratio, and
             </li>
             <li>
               determine all images that satisfy stereo conditions for each image in the map 
               section.
             </li>
           </ol>
           The design of isisminer is intended to do to all these 
           things in a single run. But do not try it on the complete dataset 
           with hundreds of thousands of images; you have been warned. We have 
           partitioned the Mercury global equatorial map in 10x10 degree 
           sections resulting in 648 small quads and created small files that 
           define each section. Of the approximately 274,000 images, this 
           provides a more reasonable set of images to find stereo pairs/sets 
           of about 300-400 pairs per section. 
        </p>
        <p>
           File naming conventions used for  these section definition files are 
           <em>EquiYYYHXXXED10</em> where 
           <ul>
             <li><em>YYY</em> is the center latitude of the section, </li>
             <li>
               <em>H</em> is the hemisphere (i.e. H = <em>N</em> for northern
               or H = <em>S</em> for southern),
             </li>
             <li><em>XXX</em> is the center longitude of the section,</li>
             <li><em>E</em> indicates positive east longitude, and </li>
             <li>
               <em>D10</em> indicates the spacing is 10 degrees in both latitude and longitude.
             </li>
           </ul>
        </p>
        <p>
           The section in this example includes Degas crater located at 37.08 
           degrees latitude and 232.75 positive east longitude. This falls in 
           the section defined in the file Equi035N235ED10.def. Here is the 
           contents of this file:
          <pre>
# Define sub region in 10 degree increments below the NP
# Define lower left and upper right coordinates
Region = "Equi035N235ED10"

RegionGisGeometry = "LINESTRING(230 30, 240 40)"
RegionBoundingBox = True

RegionCenterLongitude     = 235
RegionCenterLatitude      = 35

RegionLowerLeftLongitude  = 230
RegionLowerLeftLatitude   = 30

RegionUpperLeftLongitude  = 230
RegionUpperLeftLatitude   = 40

RegionUpperRightLongitude = 240
RegionUpperRightLatitude  = 40

RegionLowerRightLongitude = 240
RegionLowerRightLatitude  = 30

End
          </pre>
            This file is provided in the GLOBALS parameter to isisminer. This 
            will make all keywords in the file available for use in keyword 
            argument substitution, CSV output, and
            <a href="#Calculator">Calculator</a> and <a href="#Limit">Limit</a> 
            Strategies.
        </p>
        <p>
            To process the global image dataset requires treating data at the 
            poles slightly different when identifying stereo. The incidence 
            angles are consistently high, up to 90 degrees. This requires a 
            slight change to the stereo configuration so two files are required 
            to process the data - one for equatorial data between 65N and 65S degrees 
            and one for polar from 65N/S to 90 N/S degrees. The isisminer configuration 
            file must consider this when processing stereo and it is driven by the 
            map section input file as to which one is selected. The easiest way to do 
            this is to provide the name of the stereo configuration file as a PARAMETER to 
            isisminer.  The main isisminer CONFIG file is named 
            mdis_overlaps_and_stereo.conf and its contents with comments is 
            shown in the  mdis_overlaps_and_stereo.conf file below.
        </p>
        <p>
           This configuration file uses the <a href="#GisOverlap">GISOverlap</a> 
           strategy to identify all images that overlap one another and creates 
           a CSV file of those images and a lot of relevant data for computing 
           stereo. The stereo image pairings/sets are determined using a special 
           processing feature of GisOverlaps. It has a provision for immediately 
           processing the result of the overlap determination for each image. 
           Just so happens that the output CSV file contains all the information 
           needed to compute stereo. As each image overlap set is determined and 
           written to the output CSV file, GisOverlap runs the stereo configuration 
           file on that CSV file using the <a href="#StereoPair">StereoPair</a> 
           strategy. Its configuration is contained in the file 
           mdis_global_stereo_equatorial.conf and is provided in the command 
           line to isisminer in  PARAMETERS using the <em>StereoConfig</em> 
           parameter. The contents of mdis_global_stereo_equatorial.conf is 
           shown below.

        </p>
        <p>
          Finally, there is a complete configuration that has command line 
          control depending upon which latitude region is being processed and 
          input/output directories. To process the entire global dataset of MDIS 
          images collected by MESSENGER, 267,769 of them, will require vast 
          computing Resources.  It is highly recommended that a processing 
          cluster be used if available. Below is the command line used to 
          process this map section.
        </p>
        <p>
          The results summarized here show the output of the command and a summary
          of the results below.
          <pre>
Creating Strategies...
Finished creating 24 strategies...

Running DatabaseReader::MDISSelectRegionOct2014 (TimeIn:  02:46:51.626)
Description: Strategy::MDISSelectRegionOct2014 is running a DatabaseReader algorithm.
248586 of 0 processed in DatabaseReader::MDISSelectRegionOct2014 (TimeOut: 03:18:36.966)
ElapsedTime(s): 1905

Running DatabaseReader::MDISSelectRegionMay2015 (TimeIn:  03:18:36.966)
Description: Strategy::MDISSelectRegionMay2015 is running a DatabaseReader algorithm.
19183 of 0 processed in DatabaseReader::MDISSelectRegionMay2015 (TimeOut: 03:20:59.204)
ElapsedTime(s): 142

Running IsNumeric::FindBadOnes (TimeIn:  03:20:59.204)
Description: Identify images with invalid center pixel geometry
267474 of 267769 processed in IsNumeric::FindBadOnes (TimeOut: 03:21:00.209)
ElapsedTime(s): 0

Running ResourceManager::DeleteBadOnes (TimeIn:  03:21:00.209)
Description: Delete Resources with bad values in required keywords
295 of 0 processed in ResourceManager::DeleteBadOnes (TimeOut: 03:21:00.247)
ElapsedTime(s): 0

Running Limit::SelectRegion (TimeIn:  03:21:00.247)
Description: Find all MDIS images with center image geometry in the defined region
557 of 267474 processed in Limit::SelectRegion (TimeOut: 03:21:20.489)
ElapsedTime(s): 20

Running RunCommand::MakeOutputDirectory (TimeIn:  03:21:20.489)
Description: Ensure output directories exists
Running Mkdir1 PRE command: mkdir -p /scratch/kbecker/MESSENGER/Region10D/Global/Images
Running Mkdir2 PRE command: mkdir -p /scratch/kbecker/MESSENGER/Region10D/Global/Overlaps/Equi035N235ED10
2 of 0 processed in RunCommand::MakeOutputDirectory (TimeOut: 03:21:20.976)
ElapsedTime(s): 0

Running CsvWriter::WriteRegionImages (TimeIn:  03:21:20.976)
Description: Write images that are in the defined region to a file
557 of 557 processed in CsvWriter::WriteRegionImages (TimeOut: 03:21:21.398)
ElapsedTime(s): 0

Running GisOverlap::ImageOverlap (TimeIn:  03:21:21.398)
Description: Find all overlaps images in specfied region
557 of 557 processed in GisOverlap::ImageOverlap (TimeOut: 04:42:28.181)
ElapsedTime(s): 4866

Session complete in 01:55:36.555 of elapsed time
          </pre>
             This run completed in about 2 hours. This is typical for most regions
             when run on machines with similar CPU processing power. 

             There were 557 images identified in this region and the results are stored in 
             /scratch/kbecker/MESSENGER/Region10D/Global/ImagesEqui035N235ED10_images.csv.
             For each image, and average of several hundred images were 
             determined to overlap. There are now 557 files in the directory 
             /scratch/kbecker/MESSENGER/Region10D/Global/Overlaps/Equi035N235ED10
             that have a base name as the image name and <em>_overlaps</em> (example: 
             EW1067331895I_overlaps.csv has 213 overlapping images) with a 
             total of 230,389 image overlaps found.  In the directory 
             /scratch/kbecker/MESSENGER/Region10D/Global/Stereo/Equi035N235ED10, 
             there are 308 files (249 had no stereo images or did not pass 
             level1 image constraints for stereo) with similar file naming 
             conventions used in the Overlaps directory (example: 
             EW1067331895I_stereopairs.csv has 11 stereo images) where a total 
             of 7,497 stereo images were identified.
       </p> 
      </description> 
      <terminalInterface>
        <commandLine>
                    config=/scratch/kbecker/MESSENGER/Region10D/Global/mdis_overlaps_and_stereo.conf 
                    parameters='DBDir:/work/projects/messenger/DB@outputdir:/scratch/kbecker/MESSENGER/Region10D/Global@stereoconfig:/scratch/kbecker/MESSENGER/Region10D/Global/mdis_global_stereo_equatorial.conf' 
                    globals=/scratch/kbecker/MESSENGER/Stereo/Region10D/Deffiles/Equi035N235ED10.def 
        </commandLine>
        <description>
            This command executes isisminer with the required parameters for 
             our example. 
        </description>
      </terminalInterface>
      <dataFiles>
        <dataFile path="assets/Equi035N235ED10.def">
          <brief>
            Global map region section definition file
          </brief>
          <description>
            This file contains an example of the keywords used to describe a 
            small section of Mercury as defined in equirectangular map 
            coordinates. These parameters are contained in a file called 
            Equi035N235ED10.def. This file is provided in the GLOBALS 
            parameters making the contents available in the global variable 
            pool. The latitude/longitude boundaries in the file are used to find 
            images where the center latitude/longitude coordinates are contained 
            in the region.
          </description>
          <parameterName>GLOBALS</parameterName>
        </dataFile>
        <dataFile path="assets/mdis_overlaps_and_stereo.conf">
          <brief>
            CONFIG file for identifying images that overlap an image
          </brief>
          <description>
            The contents of this file contain a sequence of Strategy object 
            definitions used to process the global MESSENGER MDIS image dataset. 
            The objectives of this configuration is to
            <ol>
              <li>identify all images in a given map section</li>
              <li>
                from the global image dataset, find all images that intersect the regional 
                images
              </li>
              <li>
                from overlapping images, find all images pairs that satisfy stereo parameters 
                (defined in the mdis_global_stereo_equatorial.conf)
              </li>
            </ol>
            Results of all objectives are written to CSV files for future processing and/or 
            refinements.
          </description>
          <parameterName>CONFIG</parameterName>
        </dataFile>
       <dataFile path="assets/mdis_global_stereo_equatorial.conf">
          <brief>
            Sidebar configuration to process stereo
          </brief>
          <description>
            This file contains a sequence of Strategy object 
            definitions used to process overlapping images for stereo potential.  
            This configuration is designed to be run independently or as the
            <a href="#GisOverlap">GisOverlap</a> optional set of algorithms.
            The input source is a file containing individual image overlaps. This overlap file
            is indicated by the user with the input parameter called 
            <em>PARAMETERS</em>.
          </description>
         <parameterName>PARAMETERS</parameterName>
        </dataFile>
      </dataFiles>
    </example>
  </examples>
</application>
