<?xml version="1.0" encoding="UTF-8"?>
<documentation xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://isis.astrogeology.usgs.gov/Schemas/Documentation/documentation.xsd">
  <!-- ********************************************
  CATEGORY
  ******************************************** -->
  <category>
    <categoryItem>xml</categoryItem>
    <categoryItem>technicaldoc</categoryItem>
    <categoryItem>guide</categoryItem>
  </category>
  <!-- ********************************************
  AUDIENCE
  ******************************************** -->
  <audience>
    <target>developer</target>
  </audience>
  <!-- ********************************************
  BIBLIOGRAPHY
  ******************************************** -->
  <bibliography>
    <title>ISIS Application and Category Test How-to</title>
    <brief>Guide to writing an application and category tests </brief>
    <description>Guide to writing application and category tests using make. This guide describes
      step by step the process of writing a test for an application or category.  The guide
      also gives general guidance on errors and common mistakes in writing a test.
    </description>
    <author>Robert Wallace</author>
    <date>2006-08-08</date>
  </bibliography>

  <!-- ********************************************
  FILES
  ******************************************** -->
  <files>
    <file>
      <type>HTML</type>
      <source>
        <filename>index.html</filename>
      </source>
      <body>
        <!-- OVERVIEW -->
        <h2>Overview</h2>
        <p>
          Isis Application Test files are used to ensure that an application
          is working correctly.  Isis Category Test files are used to ensure
          that a category is working correctly.  These tests are especially
          important when porting to a new operating system, or changing
          compilers.  They are also important when changes are made to the
          entire system (such as refactoring) or to other files that directly
          affect the application.  If something is changed that affects the
          outcome of the application, the test will fail, making the
          programmer aware that something has changed and needs to be
          examined.  This guide focuses on the specific task of adding tests
          to an existing application or category.
        </p>

        <!-- QUESTIONS AND ANSWERS -->
        <h2>Questions &amp; Answers</h2>

        <h3>What do I need to know?</h3>
        <p>
          You need to be familiar with what the application or category does
          in order to test it properly.  Also a basic knowledge of make would
          be helpful but not required.
        </p>

        <h3>What is make?</h3>
        <p>
          Make is a programming tool used to automate the build process.  Make
          is used used to build C/C++ projects.
        </p>

        <!-- Make Basics-->
        <h2>Make Basics</h2>

        <h3>Targets</h3>
        <p>
          Make is a text file that is broken down into what is known as
          targets.  Targets represent a series of actions as a single word.
          Targets are distinguished by the colon ( : ) after the target name
          <pre>
            <code>
              clean:
              &#09;
              <I>actions</I>
            </code>
          </pre>
          An action is a single command that is terminated by a semicolon ( ;
          ).  If a command must be on multiple lines, each line must end with
          a backslash ( \ ).
          <pre>
            <code>
              clean:
              &#09;ratio num=isisTruth.cub+1 \
              &#09;den=isisTruth.cub+2 \
              &#09;to=temp.cub;
            </code>
          </pre>

          If there is any character, after the backslash (even a space),  the
          command will end at that line.  Make will not show an error but the
          command will not run as intended.
          <p>
            Each line in a target must be preceded with a tab character.  Make
            will show an error if there is not a tab at the front of each line
            in a target.
          </p>
        </p>

        <h3>Variables</h3>
        <p>
          Make allows for variables to be used to store values.  These
          variables can be set at the command line by using the syntax
          VARIABLE=value.  For example, setting the variable clean would be
          CLEAN=yes.  Variables are usually in all capital letters.  Variables
          are accessed using the $( ) syntax.  For example, using the clean
          variable would be $(CLEAN).
        </p>

        <!-- New Test-->
        <h2>Writing a Test for an application</h2>

        <h3>Test Structure</h3>
        <p>
          A test is composed of input, output, truth and make files.  All of
          the files the test needs as input are placed in the input directory.
          Everything the test generates goes into the output directory.  When
          the test is working correctly the output files representing the base
          truth files of the test are placed in the truth directory.  The make
          file contains the commands to run the test.
        </p>

        <h3>Test Results</h3>
        <p>
          Tests are to ensure that the programs are running correctly.  This
          is done by comparing the output files generated by the test with the
          files designated as the truth for the test.  If the files have the
          same contents the test shows an OK status.  If the files are
          different in some way the test shows a FAILED status.
        </p>

        <h3>Setup Tests</h3>
        <ol>
          <li>Go to the directory where the application directory is located</li>
          <li>Type
            <I>make testdir</I>
          </li>
          <ol>
            <li type="a">This creates a directory call tsts </li>
            <li type="a">Places a Makefile for creating tests in the tsts directory </li>
          </ol>
        </ol>

        <h3>Setup Individual Test</h3>
        <ol>
          <li>Within the tsts directory type
            <I>make newtest TEST=testname</I>
          </li>
          <ol>
            <li type="a">Where testname is the name of the test.  Testname should decribe what the test is testing for.</li>
            <li type="a">e.g. if the program has a variable mode that can be ALL or NONE, the test for mode all would be
              named all and the test for mode none would be none.</li>
            <li type="a">The command would be
              <I>make newtest TEST=all</I>
            </li>
            <li type="a">This creates a directory called testname and places a template makefile, and an input directory in that directory</li>
          </ol>
          <li>Type
            <I>cd testname</I>
            to change directories to the test</li>
        </ol>

        The template makefile should look like this.
        <pre>
          <code>
            APPNAME =

            include $(ISISROOT)/make/isismake.tsts

            commands:
            > /dev/null;
          </code>
        </pre>
        <ol>
          <li>APPNAME - name of the application being tested</li>
          <li>include - includes all targets from the isismake.tsts file</li>
          <li>commands - defines the commands target needed to run the test</li>
          <li>/dev/null - all actions are placed before or on this line</li>
        </ol>
        <h3>Write Test</h3>
        <ol>
          <li>APPNAME - type in the application name after the equals.  Capitalization and spelling count here. </li>
          <ol>
            <li type="a">The excetable for the test resides two directories above the test.  APPNAME is adjusted
              during the run of the test to take care of this.  APPNAME should just be the name of the program.
              Each time the test is run, the current version of the executable is used.  Running the test will not
              remake the executable.</li>
          </ol>
          <li>Write in commands before the > /dev/null.</li>
          <ol>
            <li type="a">Remember</li>
            <ol>
              <li type="1">if multiple commands are needed than each needs > /dev/null;
                at the end of the commands</li>
              <li type="1">beginning of each line needs a tab character</li>
              <li type="1">if a command goes onto multiple lines, end of each line needs a \ with
                nothing after it </li>
            </ol>
          </ol>
          <li>Type $(APPNAME) where the need of the current application is being used.  Other program names
            should just be the name of the program.</li>
          <li>Copy any input files to the input directory</li>
          <li>Set all paths in the test so that the input files have $(INPUT) before the filename</li>
          <li>Set all paths in the test so that the output files have $(OUTPUT) before the filename</li>
          <ol>
            <li type="a">Files that are to be compared for the test must be in the output directory</li>
          </ol>
          <li>If the test is testing standardout, the output must be redirected to a text file.  Change the /dev/null to
            the name of a text file for comparison.  See cathist for an example of this.</li>
          <li>To generate the output files for the test type
            <I>make output</I>
          </li>
          <li>Add variables as needed to the test.  Variables are defined in the next section</li>
          <li>When the output file looks good type
            <I>make truthdata</I>
          </li>
          <ol>
            <li type="a">if the test is operating system dependent test than do
              <I>make ostruthdata</I>
            </li>
          </ol>
          <li>To run the test, type
            <I>make test</I>
            .  At this point the test shoud pass.  If not, revise the test till it does.</li>
        </ol>

        <h3>Test Variables</h3>
        <p>
          Tests deal with files.  Variables for the tests are strings attached to the end of file names.  For example
          if the file is test.txt then the variable IGNORELINES would be test.txt.IGNORELINES.  The file portion must match spelling and
          capitalization of the file it is assoiciated with.  The variable portion (.IGNORELINES) needs to be in all capital letters.
          For each file in the test if the variable is not set than a default value is used.

          <br />
          <br />
          Possible variables for file types are:
          <ol>
            <li>Cub files (.cub)</li>
            <ol>
              <li type="a">.TOLERANCE</li>
              <ol>
                <li type="I">Defines the difference in dn values allowed between the cubes generated by the test and the truth cubes,
                  to allow the test to pass </li>
                <li type="I">Value - number, usually a small decimal value</li>
                <li type="I">Defaults - 0, meaning that the two dn values have to match exactly</li>
                <li type="I">For an example, see the mpp test in the cam2map application</li>
              </ol>
              <li type="a">.IGNORESPECIAL</li>
              <ol>
                <li type="I">Designates whether or not to ignore special pixels in comparing two cubes</li>
                <li type="I">Value - yes or no value</li>
                <li type="I">Defaults - no, special pixels will be used in the comparison of two cube files</li>
              </ol>
            </ol>
            <li>Text Files (.txt)</li>
            <ol>
              <li type="a">.SKIPLINES</li>
              <ol>
                <li type="I">Defines the number of lines to skip at the beginning of a text file </li>
                <li type="I">Value - number, integer</li>
                <li type="I">Defaults - 0, meaning that the whole file it to be used</li>
                <li type="I">For an example, see the cnet test in the coreg application</li>
              </ol>
              <li type="a">.IGNORELINES</li>
              <ol>
                <li type="I">Defines the lines of text to omit from the output file</li>
                <li type="I">Value - list of word at the beginning of the lines to omit</li>
                <li type="I">Defaults - empty list, use the whole file</li>
                <li type="I">For an example, see the circle test in the isisui application</li>
              </ol>
              <li type="a">Note: SKIPLINES occurs before IGNORELINES</li>
            </ol>
            <li>Binary Files (.jpg .tif .bin ...)</li>
            <ol>
              <li type="a">.BINSKIP</li>
              <ol>
                <li type="I">Defines the number of bytes to skip at the start of an input file </li>
                <li type="I">Value - number, integer</li>
                <li type="I">Defaults - 0, meaning that the whole file is to be used</li>
              </ol>
              <li type="a">.BINCOUNT</li>
              <ol>
                <li type="I">Defines the number of bytes to copy to the output file</li>
                <li type="I">Value - number, integer</li>
                <li type="I">Defaults - 0, meaning that the whole file is to be used</li>
              </ol>
            </ol>
            <li>Pvl Files (.pvl)</li>
            <ol>
              <li type="a">.SKIPLINES, .IGNORELINES</li>
              <ol>
                <li type="I">Because a pvl file is essentially a formatted text file, test variables that work on text files will work the same way on pvl files</li>
              </ol>
              <li type="a">.DIFF</li>
              <ol>
                <li type="I">See Pvl Files for setting variables when comparing pvl files.</li>
              </ol>
            </ol>
          </ol>
        </p>

        <h3>Test Data</h3>
        <p>
          In order to perserve the data that is used by the test,  type
          <I>make checkin</I>
          .  This copies the contents of the input and truth directories to the testdata area.  Since the output files can be generated
          by using the output command, these files do not need to be saved. Once the files are stored in the
          testdata area you can do
          <I>make release</I>
          to remove all of the files exept the makefile.  Then the makefile can be checked into cvs.  To restore these files back into the test,  type
          <I>make checkout</I>
          . This copies the files into the proper directories.  Once the files for the test are in the test data area, the test
          will still run even if the test files are not in the same directory as the test.
        </p>

        <h3>Writing a Test for a category</h3>
        <p>
          <!--Category tests work the same way as application tests do.  The difference is that category tests don't test a
          single program but a sequence of programs.  Therefore the APPNAME isn't needed for a category test and
          can be deleted safely. All of the variables for testing an application also work for the category test.-->
	  Category tests work the same way as application tests do.  The difference is that category tests don't test a
          single program but a sequence of programs.  Therefore the APPNAME variable should not be used.  Instead use
	  variables such as APP1NAME, APP2NAME, etc.  In addition, all ISIS application names need to be followed by
	  $(TSTARGS) to guarantee proper testing parameters.  Currently, this ensures that they use the default
	  preference file.  All of the variables for testing an application also work for category tests.  A brief
	  example is shown below.
	  <pre>
          <code>
            APP1NAME = clem2isis
	    APP2NAME = spiceinit
	    APP3NAME = campt
	    APP4NAME = getsn

	    include $(ISISROOT)/make/isismake.tsts

	    commands:
	    &#09;$(APP1NAME) $(TSTARGS) from= $(INPUT)/lna3819k.045 \
	    &#09;to= $(OUTPUT)/lna3819k.045--clem2isis-spiceinit.cub > /dev/null

	    &#09;$(APP2NAME) $(TSTARGS) from= $(OUTPUT)/lna3819k.045--clem2isis-spiceinit.cub \
	    &#09;> /dev/nul
          </code>
        </pre>
        </p>

        <!-- Comparing Files -->
        <h2>Comparing Files</h2>

        <h3>PVL</h3>
        <p>
          In order to assure the most accurate testing possible, pvl
          (parameter value language)  files are compared by parsing through
          the groups, objects and keywords in the file.  Any file with a .pvl
          extension is considered a pvl file. Because pvl files contain text,
          the text file test variables will work on the pvl files; it is not
          recommended to use these test variables, however, and the result
          must still be a valid pvl file. The order of the keywords, objects
          and groups matter and may not be different in any case.  In order to
          set tolerances and ignore keywords, a pvl tolerance file with .DIFF
          attached to the end will be used. For example, if if file is
          test.pvl then the tolerance file must be named test.pvl.DIFF. These
          files must only exist in the input data directory. Inside the pvl
          tolerance file you can specify numerical tolerances and keywords to
          ignore. Inside the pvl tolerance file, there should be one or two
          groups, Tolerances and IgnoreKeys, in the root of the file. So, a
          basic pvl tolerance file looks like this:
          <pre>
            <code>
              Group = Tolerances
              End_Group

              Group = IgnoreKeys
              End_Group

              Group = IgnoreFilePaths
              End_Group

              End
            </code>
          </pre>
          To set a tolerance on a number, inside the Tolerances group there
          must be a keyword in this format:
          <pre>
            <code>
              KeywordName = MaximumDifference
            </code>
          </pre>
          If the output and truth data values exceed the maximum difference
          (tolerance), then the files are not considered the same. In order to
          ignore a non-numerical value, such as a file name, inside the
          IgnoreKeys group there must be a keyword in this format:
          <pre>
            <code>
              KeywordName = true
            </code>
          </pre>
          Note: The value of this keyword does not matter.

          To ignore a file's path up until the name, Put a corresponding
          keyword set to true inside the IgnoreFilePaths group.
          <pre>
            <code>
              KeywordName = true
            </code>
          </pre>
          <br />
          With these formats in mind, to give a tolerance for the keyword
          StandardDeviation of 0.0000000001 and ignore the keyword FileName
          the pvl tolerance file would look like this:
          <pre>
            <code>
              Group = Tolerances
              StandardDeviation = 0.0000000001
              End_Group

              Group = IgnoreKeys
              FileName = true
              End_Group

              Group = IgnoreFilePaths
              FilePath = true
              End_Group

              End
            </code>
          </pre>
          To debug these files, or see why two pvl files compare as different,
          you can use pvldiff. The FROM parameter will be the output file
          (which will be created with the command <I>make output</I>), the
          FROM2 parameter will be the truth file and the DIFF parameter will
          be the DIFF file inside of the input folder (the same as the FROM2
          parameter with .DIFF added on to the end). When pvldiff is run, it
          will output the first difference it finds that exceeds the
          tolerances.  <br /> For an example of the pvl test, say we have the
          pvl file cubelabels.pvl that looks like this:
          <pre>
            <code>
              Object = IsisCube
              Object = Core
              SomeFile = /foo/bar/fakefile.cub
              StartByte   = 65537
              Format      = Tile
              TileSamples = 128
              TileLines   = 128

              Group = Dimensions
              Samples = 1024
              Lines   = 1024
              Bands   = 7
              End_Group

              Group = Pixels
              Type       = Real
              ByteOrder  = LSB
              Base       = 0.0
              Multiplier = 1.0
              End_Group
              End_Object
              End_Object

              Object = SomeObject
              SomeCalculaion = 5536.4363463414
              End_Object

              End
            </code>
          </pre>
          The SomeCalculation keyword may vary by 0.000000001 and the
          ByteOrder could be MSB or LSB. SomeFile could have a different path if
          the tester is not using the default data area. To compensate for
          this, you would add a file named cubelabels.pvl.DIFF in the input
          folder with the following:
          <pre>
            <code>
              Group = Tolerances
              SomeCalculation = 0.000000001
              End_Group

              Group = IgnoreKeys
              ByteOrder = true
              End_Group

              Group = IgnoreFilePaths
              SomeFile = true
              End_Group

              End
            </code>
          </pre>
          This would ignore the value of ByteOrder always, the path of SomeFile,
          and the value of SomeCalculation if it were within the tolerance.
          <p>
            Finally, you can create unique tolerances and ignore keys for each
            element of an array contained within a keyword, like so:
          </p>
          <pre>
            <code>
              Group = Tolerances
              SomeArray = (0.000000001, 0.0, 0.025)
              AnotherArray = 0.000000001
              End_Group

              Group = IgnoreKeys
              SomeArray =(false, true, false)
              End_Group

              Group = IgnoreFilePaths
              SomeArray = (false, false, true)
              End_Group

              End
            </code>
          </pre>
          In the above case, the keyword SomeArray would have a tolerance of
          0.000000001 applied to the first element, a tolerance of 0.025
          applied to the third element, and the second element would be
          ignored entirely.
          <p>
            Just make sure when working with arrays that you have exactly the
            same number of tolerances/ignore keys for the keyword as there are
            elements in the array.  Alternatively, you can list only one
            tolerance or ignore key for the keyword, and it will be applied to
            every element in the array.  In the above case, the keyword
            AnotherArray could have 50 elements, but each element would have a
            tolerance of 0.000000001 applied to it.  Having multiple
            tolerances and ignore keys without matching the number of array
            elements, however, will result in an error.
          </p>
        </p>

        <h3>Comma-Separated Values (CSV)</h3>
        <p>
          A similar tool exists for comparing two comma-separated value (CSV)
          files as those for PVL files and cubes.  When writing application
          tests, any file output with a ".csv" extension will automatically be
          compared against the truth CSV using the CSV-Diff script.  The
          benefit of using this script over a one-to-one textual comparison
          comes into play when the CSV files being compared contain numerical
          data.
        </p>
        <p>
          By specifying tolerance values in a DIFF file contained within the
          test's input directory, one can consider two CSV files "the same"
          within some margin of error.  The DIFF fle uses a similar naming
          convention as that for PVL diffing: csvfile.csv.DIFF.  The tolerance
          file must contain one tolerance per line of the form:

          <pre>
            <code>
              COLUMN=VALUE
            </code>
          </pre>

          where COLUMN is the name of the tolerance value for every cell in that column,
          and VALUE is the actual tolerance that will be compared against the difference
          between the values in the two files.
        </p>
        <p>
          The script can also be used by itself, independent of any
          application test.  This is most useful when a test fails, and the
          user wishes to run the CSV diff directly in order to see the reason
          why.  Running the script directly can be accomplished with the
          following usage:

          <pre>
            <code>
              $ISISROOT/scripts/csvdiff.py CSV1 CSV2 [TOLERANCES]
            </code>
          </pre>

          Output will be a message stating either SUCCESS or FAILURE followed by an
          explanation of why.  Difference failures will also include a reference to the
          exact line and column where the offending difference occurred.  The program
          will terminate with an error signal when a failure occurs during processing.
        </p>
        <p>
          Before any cells are compared the program will first ensure that the two CSV
          files to be compared have the same number of columns and rows, additionally
          checking that their headers match.
        </p>
        <p>
          Future versions will support an option for submitting files without headers.
        </p>

        <!-- Application Test-->
        <h2>Modifying an Existing Application Test</h2>
        <ol>
          <li>Checkout the application from the cvs repository.</li>
          <li>Follow the steps above to setup the tests.</li>
          <li>Copy the commands from the xml file for the application test below the word
            commands and above the /dev/null;.
            <p>
              If the application test looks like this:
              <pre>
                <code>
                  &lt;test&gt;
                  &lt;commandLine&gt;
                  num=\$base/testData/isisTruth.cub+1
                  den=\$base/testData/isisTruth.cub+2
                  to=&lt;temp&gt;temp1.cub&lt;/temp&gt;
                  &lt;/commandLine&gt;

                  &lt;cubes&gt;
                  &lt;compareCube&gt;
                  &lt;truth&gt;ratioTruth1.cub&lt;/truth&gt;
                  &lt;against&gt;temp1.cub&lt;/against&gt;
                  &lt;/compareCube&gt;
                  &lt;/cubes&gt;
                  &lt;/test&gt;</code>
              </pre>
              Then the test would look like:
              <pre>
                <code>
                  APPNAME =

                  include $(ISISROOT)/make/isismake.tsts

                  commands:
                  &#09;num=\$base/testData/isisTruth.cub+1
                  den=\$base/testData/isisTruth.cub+2
                  to=&lt;temp&gt;temp1.cub&lt;/temp&gt; > /dev/null;</code>
              </pre>
            </p>
          </li>
          <li>Add a \ to the end of each line except the last one that has the ; at the end.
            <p>
              The test now looks like:
              <pre>
                <code>
                  APPNAME =

                  include $(ISISROOT)/make/isismake.tsts

                  commands:
                  &#09;num=\$base/testData/isisTruth.cub+1 \
                  den=\$base/testData/isisTruth.cub+2 \
                  to=&lt;temp&gt;temp1.cub&lt;/temp&gt; > /dev/null; </code>
              </pre>
            </p>
          </li>
          <li>Delete all spaces at the front of each line, add a tab to the front of each line.
            <p>
              The test now looks like:
              <pre>
                <code>
                  APPNAME =

                  include $(ISISROOT)/make/isismake.tsts

                  commands:
                  &#09;num=\$base/testData/isisTruth.cub+1 \
                  &#09;den=\$base/testData/isisTruth.cub+2 \
                  &#09;to=&lt;temp&gt;temp1.cub&lt;/temp&gt; > /dev/null; </code>
              </pre>
            </p>
          </li>
          <li>Set APPNAME to the name of the application being tested.  Add $(APPNAME) to the front of the first line
            of each command that is using  the application that is being tested.  Programs that are being used by the test
            but are not being tested just need the name of the program.
            <p>
              The test now looks like:
              <pre>
                <code>
                  APPNAME = ratio

                  include $(ISISROOT)/make/isismake.tsts

                  commands:
                  &#09;$(APPNAME) num=\$base/testData/isisTruth.cub+1 \
                  &#09;den=\$base/testData/isisTruth.cub+2 \
                  &#09;to=&lt;temp&gt;temp1.cub&lt;/temp&gt; > /dev/null; </code>
              </pre>
            </p>
          </li>
          <li>Replace the path of input file names to be $(INPUT).
            <p>
              The test now looks like:
              <pre>
                <code>
                  APPNAME = ratio

                  include $(ISISROOT)/make/isismake.tsts

                  commands:
                  &#09;$(APPNAME) num=$(INPUT)/isisTruth.cub+1 \
                  &#09;den=$(INPUT)/isisTruth.cub+2 \
                  &#09;to=&lt;temp&gt;temp1.cub&lt;/temp&gt; > /dev/null; </code>
              </pre>
            </p>
          </li>
          <li>Replace &lt;temp&gt;&lt;/temp&gt; files with name in the truth tag for the application test
            <p>
              The test now looks like:
              <pre>
                <code>
                  APPNAME = ratio

                  include $(ISISROOT)/make/isismake.tsts

                  commands:
                  &#09;$(APPNAME) num=$(INPUT)/isisTruth.cub+1 \
                  &#09;den=$(INPUT)/isisTruth.cub+2 \
                  &#09;to=ratioTruth1.cub > /dev/null; </code>
              </pre>
            </p>
          </li>
          <li>Replace the path of output file names to be $(OUTPUT)
            <p>
              The test now looks like:
              <pre>
                <code>
                  APPNAME = ratio

                  include $(ISISROOT)/make/isismake.tsts

                  commands:
                  &#09;$(APPNAME) num=$(INPUT)/isisTruth.cub+1 \
                  &#09;den=$(INPUT)/isisTruth.cub+2 \
                  &#09;to=$(OUTPUT)/ratioTruth1.cub > /dev/null; </code>
              </pre>
            </p>
          </li>
          <li>Add variables as needed</li>
          <ol>
            <li type="a">e.g. add a tolerance to the output cube would be
              ratioTruth1.cub.TOLERANCE = someValue </li>
          </ol>
          <li>Copy input files into the input directory</li>
          <ol>
            <li type="a">In the example above copy isisTruth.cub into the input directory
              from the $ISISDATA/base/testData area. </li>
          </ol>
          <li>Copy the truth file from the application test to the truth directory</li>
          <ol>
            <li type="a">In the example above copy ratioTruth1.cub into the truth directory
              from the appTest directory of the ratio application </li>
          </ol>
          <li>Type
            <I>make test</I>
          </li>
          <li>The test should have the same results as the application test did.</li>
          <li>Type
            <I>make checkin</I>
            to copy the data to the test data area</li>
          <li>Type
            <I>make release</I>
            to clean up the test directory</li>
          <li>Checkin the Makefile into the cvs repository</li>
        </ol>

        <!-- Existing Test-->
        <h2>Modifying a Test</h2>
        <ol>
          <li>Checkout the Makefile from the cvs repository</li>
          <li>Type
            <I>make checkout</I>
            to get the data for the test</li>
          <li>Modify the test as needed</li>
          <li>Type
            <I>make test</I>
            to see the current results of the test</li>
          <li>If the truth files need to be remade type
            <I>make truthdata</I>
            or
            <I>make ostruthdata</I>
            as described above</li>
          <li>When done, type
            <I>make checkin</I>
            to copy the data back to the testdata area</li>
          <li>Type
            <I>make release</I>
            to remove the files</li>
          <li>Check in the Makefile back into the cvs repository</li>
        </ol>
      </body>
    </file>
  </files>
  <history>
    <change name="Robert Wallace" date="2006-09-08">
      Created
    </change>
    <change name="Robert Wallace" date="2006-10-06">
      Updated with recent changes to testing system and added examples
    </change>
    <change name="Travis Addair" date="2011-05-13">
      Added section for Comparing Files, moved PVL diff discussion into this
      section and added new discussion for CSV file diffing.
    </change>
    <change name="Jesse Mapel" date="2016-04-05">
      Updated section on category tests.  Fixes #3884.
    </change>
  </history>
</documentation>
