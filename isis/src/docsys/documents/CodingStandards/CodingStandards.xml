<?xml version="1.0" encoding="UTF-8"?>
<documentation xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://isis.astrogeology.usgs.gov/Schemas/Documentation/documentation.xsd">
  <files>
    <file>
      <body>
        <a name="top"></a>
        <h3> Table of Contents</h3>
        <ol type="I">
          <li><a href="#intro">Introduction</a></li>
          <li><a href="#formatting">Formatting</a></li>
          <ol type="A">
            <li><a href="#indenting">Indenting</a></li>
            <li><a href="#lineLength">Line Length</a></li>
            <li><a href="#padding">Padding</a></li>
            <ol type="1">
              <li><a href="#aroundParentheses">Around Parentheses, Braces, and Brackets</a></li>
              <li><a href="#methodDefinitions">Method and Definition Calls</a></li>
              <li><a href="#unaryOperators">Unary Operators</a></li>
              <li><a href="#binaryOperators">Binary Operators</a></li>
              <li><a href="#vectorsAndLists">Vectors and Lists</a></li>
            </ol>
            <li><a href="#controlStructures">Control Structures</a></li>
            <ol type="1">
              <li><a href="#braces">Braces</a></li>
              <li><a href="#constrolStructurePadding">Padding</a></li>
            </ol>
            <li><a href="#continuingLinesOfCode">Continuing Lines of Code</a></li>
            <li><a href="#logicalOperators">Logical Operators</a></li>
            <li><a href="#pointerRefFormatting">Pointers and References</a></li>
            <li><a href="#sourceCodeDocs">Source Code Documentation</a></li>
          </ol>

          <li><a href="#namingConventions">Naming Conventions</a></li>
          <ol type="A">
            <li><a href="#applicationNames">Application Names</a></li>
            <li><a href="#classNames">Class Names</a></li>
            <li><a href="#memberFunctionNames">Member Function Names</a></li>
            <li><a href="#dataMemberNames">Data Member Names</a></li>
            <li><a href="#localVariableNames">Local Variable Names</a></li>
            <li><a href="#enumerationNames">Enumeration Names</a></li>
            <li><a href="#namespaceNames">Namespace Names</a></li>
            <li><a href="#sourceCodeFileNames">Source Code File Names</a></li>
            <ol type="1">
              <li><a href="#objectFileNames">Object File Names</a></li>
              <li><a href="#applicationFileNames">Application File Names</a></li>
            </ol>
          </ol>

          <li><a href="#includes">#Includes</a></li>
          <ol type="A">
            <li><a href="#includeGuards">#Include Guards</a></li>
            <li><a href="#orderingLibraryIncludes">Ordering Library Includes</a></li>
            <li><a href="#forwardClassDeclarations">Forward Class Declarations</a></li>
          </ol>

          <li><a href="#documentation">Documentation</a></li>
          <ol type="A">
            <li><a href="#historyEntries">History Entries</a></li>
            <ol type="1">
              <li><a href="#documentationFormatting">Formatting</a></li>
              <li><a href="#authorTag">Author Tag</a></li>
            </ol>
            <li><a href="#makefileComments">Makefile Comments</a></li>
          </ol>

          <li><a href="#sourceCode">Source Code</a></li>
          <ol type="A">
            <li><a href="#structures">Structures</a></li>
            <li><a href="#implementationFiles">Implementation Files</a></li>
            <li><a href="#supportClassFiles">Support Class Files</a></li>
            <li><a href="#headerFiles">Header Files</a></li>
            <ol type="1">
              <li><a href="#inlineMembers">Inline Members</a></li>
              <li><a href="#constKeyword">const Keyword</a></li>
            </ol>
            <li><a href="#declaring">Declaring &amp; Initializing Variables</a></li>
            <ol type="1">
              <li><a href="#localVariables">Local Variable Declarations</a></li>
              <li><a href="#initializing">Initializing Variables</a></li>
            </ol>
            <li><a href="#methodOrdering">Method Order in Implementation File</a></li>
          </ol>

          <li><a href="#string">Strings</a></li>
          <ol type="A">
            <li><a href="#IString">IString</a></li>
            <li><a href="#QString">QString</a></li>
            <li><a href="#std::string">std::string</a></li>
            <li><a href="#otherStrings">Other Strings</a></li>
          </ol>
          <li><a href="#todo">To Do</a></li>
        </ol>
        <hr />

        <h2> <a name="intro">Introduction</a> </h2>
        <p>
          This document will describe the coding standards for maintaining <strong>
          ISIS</strong> source code.  It was created to ensure that the <strong>
          ISIS</strong> package is programmed for consistency, readability and ease
          of future maintenance. This document does not attempt to address every
          possible issue. However, the guidelines that have been outlined should not
          be deviated from, except under special situations.
        </p>

        <h2> <a name="formatting">Formatting</a> </h2>
        <h3> <a name="indenting">Indenting</a> </h3>
        <p>
          The general indenting scheme for <strong>ISIS</strong> is 2 spaces (no
          tabs).  Wrapped lines of code should be indented a minimum of 4 spaces
          from the beginning line of the command.  Programmers may choose to indent
          more than 4 spaces to make the code more readable.  For example, it is
          common practice to indent a wrapped line to be contained inside the
          opening parenthesis when making a long method call as shown below.
        </p>
        <p>
          For example:
          <pre><strong>
            <font color="green">
            // The second and third lines are often indented to line up with the
            // appropriate opening parenthesis. </font>
            throw IException(IException::Unknown,
                                      "Camera missed planet or SPICE data off.",
                                      _FILEINFO_);
          </strong></pre>
        </p>
        <p align="right"><a href="#top"><font size="1">
          Return to Table of Contents
        </font></a></p>
        <h3> <a name="lineLength">Line Length</a> </h3>
        <p>
          Lines of code should not exceed 100 characters unless they cannot be
          wrapped.  This may be difficult in a few cases, however there are little
          if any cases in which the 100 character limit must be broken.  For function
          implementation, lines may be broken between the return type and class name
          scope or between input parameters as shown below.
        </p>
        <p>
          For example:
          <pre><strong>
            <font color="green">
            // Break lines between input parameters and indent to opening
            // parenthesis. Code inside the function is indented 2 spaces from the
            // beginning of the method return type. </font>
            vector&lt;double&gt; VeryLongClassName::ReallyLongFunctionName(int a,
                                                                     int b,
                                                                     int c) {
              statement1;
              ...
            }
            <font color="green">
            // Break lines between return type and class name and indent the
            // second line 4 spaces.  The input parameters are then indented 4 more
            // spaces for readability.  Code inside the function is indented 2
            // spaces from the beginning of the method return type. </font>
            vector&lt; vector&lt;double&gt;, vector&lt;double&gt; &gt;
                VeryLongClassName::ReallyLongFunctionName(
                    const vector&lt;double, double&gt; inputParameter1,
                    const vector&lt;double, double&gt; inputParameter2) {
              statement1;
              ...
            }
          </strong></pre>
        </p>
        <p align="right"><a href="#top"><font size="1">
          Return to Table of Contents
        </font></a></p>

        <h3> <a name="padding">Padding</a> </h3>
        <h4> <a name="aroundParentheses">Around Parentheses, Braces, and Brackets</a> </h4>
        <p>
          Padding is not used inside parentheses ( ) or angle brackets &lt; &gt; if
          the interior is short and simple.  For embedded parentheses, padding may be
          used to make code more readable.  For embedded angle brackets, padding
          is required between closing brackets.  If the interior is not simple,
          programmers can also use padding in such a way to make the code more
          readable.
        </p>
        <p>
          Externally, we use padding before opening curly braces.  For example,
          a space should be added before opening curly braces for
          method definitions, namespace wrappers, enumeration definitions
          and control structures.
        </p>
        <p>
          For example:<br />
          <code><strong>
            <blockquote>
              <font color="green">
              // No interior padding needed - single brackets </font><br />
              vector&lt;double&gt; vectName;<br /><br />
              <font color="green">
              // No interior padding needed - brackets are not consecutive </font><br />
              vector&lt;vector&lt;double, double&gt;, int&gt; <br /><br />
              <font color="green">
              // Padding needed outside parentheses, none needed inside </font><br />
              <font color="purple"><b>if</b></font> (condition) {<br />
                statement;<br />
              }<br /><br />
              <font color="green">
              // Use interior padding when closing parentheses or angle brackets <br />
              // are consecutive characters. </font><br />
              vector&lt; int, vector&lt;double, double&gt; &gt;<br />
              <font color="purple"><b>
              if</b></font> ( (a &amp;&amp; b) || (c &amp;&amp; d) ) statement;<br /><br />
              <font color="green">
              // Use padding before opening curly brace  </font><br />
              <font color="purple"><b>namespace</b></font> ISIS {<br />
                ...<br />
              }<br />
            </blockquote>
          </strong></code>
        </p>
        <p align="right"><a href="#top"><font size="1">
          Return to Table of Contents
        </font></a></p>

        <h4> <a name="methodDefinitions">Method Definition and Calls</a> </h4>
        <p>
          No space should be used between a method name and its opening parentheses.
          Padding inside and after parentheses was covered previously in this
          document, see <a href="#aroundParentheses"> Formatting Padding Around
          Parentheses, Braces, and Brackets.</a>
        </p>
        <p>
          For example:
          <pre><strong>
            <font color="green"> // Correct form </font>
            int functionName() {
            <font color="purple"><b>if</b></font> ( success() )
            <font color="green">
            // Incorrect form has space after function name </font>
            int functionName () {
            <font color="purple"><b>if</b></font> ( success () )
          </strong></pre>
        </p>
        <p align="right"><a href="#top"><font size="1">
          Return to Table of Contents
        </font></a></p>

        <h4> <a name="unaryOperators">Unary Operators</a> </h4>
        <p>
          There is no padding between variables and unary operators such as
          <ul>
          <li> ! (not operator) ,</li>
          <li> - (negation operator),</li>
          <li> ++ (increment operator),</li>
          <li> -- (decrement operator)</li>
          </ul>
        </p>
        <p>
          For example:
          <pre><strong>
            <font color="green"> // Correct form </font>
            int count = 0; count++;
            <font color="purple"><b>if</b></font> ( !success() )
            <font color="green">
            // Incorrect form has a space between the variable name
            // and unary operator. </font>
            count ++;
            <font color="purple"><b>if</b></font> ( ! success() )
          </strong></pre>
        </p>
        <p align="right"><a href="#top"><font size="1">
          Return to Table of Contents
        </font></a></p>

        <h4> <a name="binaryOperators">Binary Operators</a> </h4>
        <p>
          Padding to be discussed
          <ul>
          <li> Arithmetic Binary Operators </li>
            <ul>
            <li> + (addition),</li>
            <li> - (subtraction),</li>
            <li> / (division),</li>
            <li> * (multiplication),</li>
            <li> % (modulus operator),</li>
            </ul>
          <li> Assignment Binary Operators </li>
            <ul>
            <li> = (assignment),</li>
            <li> += (assign and increment),</li>
            <li> -= (assign and decrement),</li>
            <li> *= (assign and multiply),</li>
            </ul>
          <li> Comparison Binary Operators </li>
            <ul>
            <li> &gt; (greater than),</li>
            <li> &lt; (less than),</li>
            <li> &gt;= (greater than or equal to),</li>
            <li> &lt;= (less than or equal to),</li>
            <li> == (equality),</li>
            <li> != (inequality),</li>
            </ul>
          <li> Logical Binary Operators </li>
            <ul>
            <li> &amp;&amp; (and),</li>
            <li> || (or),</li>
            </ul>
          <li> Conditional Binary Operators </li>
            <ul>
            <li> ? (if true),</li>
            <li> : (else),</li>
            </ul>
          </ul>
        </p>
        <p align="right"><a href="#top"><font size="1">
          Return to Table of Contents
        </font></a></p>

        <h4> <a name="vectorsAndLists">Vector and List Declarations</a> </h4>
        <p>
          When declaring a vector or list data type, no space between the keyword
          and the opening angle bracket should be used.  This is merely an aesthetic
          preference for consistency throughout <strong>ISIS</strong>.
        </p>
        <p>
          For example:
          <pre><strong>
            <font color="green">// Correct form - No outside padding</font>
            <font color="brown">vector</font>&lt;double&gt;
            QList&lt; QList&lt;int&gt;, QList&lt;int&gt; &gt;

            <font color="green">// Incorrect form with outside padding</font>
            <font color="brown">vector</font> &lt;double&gt;
            QList &lt; QList &lt;int&gt;, QList &lt;int&gt; &gt;
          </strong></pre>
        </p>
        <p align="right"><a href="#top"><font size="1">
          Return to Table of Contents
        </font></a></p>

        <h3> <a name="controlStructures">Control Structures</a> </h3>
        <h4> <a name="braces">Braces</a> </h4>
        <p>
          Most control structures require the use of braces for compound statements,
          or blocks, such as conditional structures
          (<font color="purple"><b>if</b></font> -
          <font color="purple"><b>else</b></font>), iteration structures
          (<font color="purple"><b>for</b></font>,
          <font color="purple"><b>while</b></font>,
          <font color="purple"><b>do</b></font> -
          <font color="purple"><b>while</b></font>), and exception structures
          (<font color="purple"><b>try</b></font> -
          <font color="purple"><b>catch</b></font>).  For these
          structures the opening brace should appear on the line with the
          appropriate keyword that indicates the beginning of such a structure and
          the closing brace should appear on its own line.
        </p>
        <p>
          For example:
          <pre><strong>
            <font color="green">
            // The opening braces for each block appears on the same line as the
            // if and else keywords.  Closing braces have their own lines.</font>
            <font color="purple"><b>if</b></font> (condition) {
              statement;
            }
            <font color="purple"><b>else</b></font> {
              statement 1;
              statement 2;
            }
          </strong></pre>
        </p>
        <p>
          Function definitions, class definitions and other similar structures that
          have multiple statements should follow a similar format.
        </p>
        <p>
          Note that these guidelines apply only to compound statements, or blocks.
          For simple statements, control structures and function definitions may be
          written in a single line of code without braces.  Control structures with
          multiple parts should use consistent formatting in each part.  That is, if
          braces are used on any section, then they should be used on all sections.
        </p>
        <p align="right"><a href="#top"><font size="1">
          Return to Table of Contents
        </font></a></p>

        <h4> <a name="controlStructurePadding">Padding</a> </h4>
        <p>
          Control structures that use parentheses
          (<font color="purple"><b>if</b></font>,
          <font color="purple"><b>for</b></font>,
          <font color="purple"><b>while</b></font>,
          <font color="purple"><b>switch</b></font>,
          <font color="purple"><b>catch</b></font>).  For these
          should have external padding around the parentheses.  That is, there
          should be a single space before an opening parenthesis and one space
          after a closing parenthesis.  If a control structure has a keyword
          immediately preceding an opening brace
          (<font color="purple"><b>try</b></font>,
          <font color="purple"><b>else</b></font>) there should be
          one space between the keyword and brace.  For an example, see
          <a href="#braces"> Control Structure Braces.</a>
        </p>
        <p>
          General padding guidelines have been previously covered in this
          document, see <a href="#aroundParentheses"> Formatting Padding Around
          Parentheses, Braces, and Brackets.</a>
        </p>
        <p align="right"><a href="#top"><font size="1">
          Return to Table of Contents
        </font></a></p>

        <h3> <a name="continuingLinesOfCode">Continuing Lines of Code</a> </h3>
        <p>
          Do not use a backslash to continue a line of code.  This is not necessary
          in C++.  For example, if a long string is being set, an end quotation can
          be used and the next line use a beginning quotation.
        </p>
          For example:
          <pre><strong>
            string str = <font color="darkcyan"> "This string is very long and will need to be "
                          "continued on a second line."</font>;
          </strong></pre>
          <p align="right"><a href="#top"><font size="1">
            Return to Table of Contents
          </font></a></p>

        <h3> <a name="logicalOperators">Logical Operators</a> </h3>
        <p>
          The use of aliases for logical operators is prohibited in <strong>ISIS
          </strong>.  For example, a program must not contain the following aliases:
          <table border="1">
            <tr>
              <th><strong>Prohibited Alias</strong></th>
              <th><strong>Use Logical Operator</strong></th>
            </tr>
            <tr>
              <td align="center"><code>and</code></td>
              <td align="center"><code>&amp;&amp;</code></td>
            </tr>
            <tr>
              <td align="center"><code>or</code></td>
              <td align="center"><code>||</code></td>
            </tr>
            <tr>
              <td align="center"><code>xor</code></td>
              <td align="center"><code>^</code></td>
            </tr>
            <tr>
              <td align="center"><code>not</code></td>
              <td align="center"><code>!</code></td>
            </tr>
            <tr>
              <td align="center"><code>not_eq</code></td>
              <td align="center"><code>!=</code></td>
            </tr>
            <tr>
              <td align="center"><code>comp</code></td>
              <td align="center"><code>~</code></td>
            </tr>
          </table>
        </p>
        <p align="right"><a href="#top"><font size="1">
          Return to Table of Contents
        </font></a></p>

        <h3> <a name="pointerRefFormatting">Pointers and References</a> </h3>
        <p>
          The asterisk for pointers (*) and the ampersand for references (&amp;) should always be put on the variable name or method name when possible.
        </p>
        <p>
          For example:
          <pre><strong>
            <font color="green">
            // Pointer and reference go on the variable name</font>
            int *var1;
            int &amp;var2 = *var1;
            <font color="green">
            // On method prototypes, the pointers and references go next to the function or method
            //   name.</font>
            int *function(const int &amp;a);
            int *Class::method(const int &amp;a);
            int &amp;function(const int *a);
            int &amp;Class::method(const int &amp;a);
          </strong></pre>
        </p>
        <p align="right"><a href="#top"><font size="1">
          Return to Table of Contents
        </font></a></p>

        <h3> <a name="sourceCodeDocs">Source Code Documentation</a> </h3>
        <h4> <a name="doxygenComments"></a> Doxygen </h4>
        <p>
	  ISIS uses the <a href="http://www.doxygen.org ">Doxygen</a> documentation
	  extraction software. Doxygen has extended the tag set of the
	  <a href="http://java.sun.com/j2se/javadoc">javadoc documentation style</a>,
	  a systematic in-code documentation style that allows pertinent documentation to
	  be extracted easily. Doxygen is just one of many software packages that are
	  able to extract and use javadoc documentation for a variety of purposes,
	  allowing us to take advantage of a wealth of documentation extractors, IDEs,
	  and other tools on the market that make our lives simpler and more productive.
        </p>
        <ul>
          <li>
            Documentation should be provided for each entity (class, method, struct,
	    variable, etc.) in the source code <em>where the primary or most commonly
	    used definition of that entity resides</em>. Generally, this means the
	    following files contain documentation for the listed entities:
            <ul>
              <li>
                <b>Header (.h)</b>: classes, inline functions, enums, typedefs, unions,
		structs, and variables declared in the header file
              </li>
              <li>
                <b>Implementation (.cpp)</b>: member function implementations and any
		entities declared or defined in the implementation file
              </li>
            </ul>
          </li>

          <li>
            To allow Doxygen to generate external documentation specialized commenting styles
	    must be used.  The comments are typically before each entity but single line
	    comments on the same line can be added after the entity.  For example:
          <ul>
            <li>
              <b>Single line of documentation (<em>documentation line</em>)</b>
              <ul>
                <li>start documentation with string <b>//!</b> before or <b>//!&lt;</b> after
		    the code
		</li>
                <li>Before the entity
                  <div class="code">
                    //! my integer<br/>
                    int myInteger ;
                  </div>
                </li>

                <li>After the entity
                  <div class="code">
                    int myInteger ; //!&lt; my integer<br/>
                  </div>
                </li>
              </ul>
            </li>

            <li>
              <b>Multi-lined documentation (<em>documentation block</em>)</b>
              <ul>
                <li>Before the entity in JavaDoc style
                  <div class="code">
                    <pre>
/**
 * Comment about setGlobalB here. Never place multi-lined comments
 * after the entitiy.
 */
void setGlobalB() {
  //! single line comment here
  g_b = 3; //!&lt; or single line comment here
}
                    </pre>
                  </div>
                </li>
              </ul>
            </li>
          </ul>
          </li>
        </ul>
        <p align="right"><a href="#top"><font size="1">
          Return to Table of Contents
        </font></a></p>

        <h4> <a name="usingHTML"></a> Using HTML </h4>
        <p>
          HTML can be used anywhere in your documentation.
          Keep it simple. Doxygen will "interpret" your HTML, so you may not get the
          desired effect. Best advice, avoid attempting special effects by just using
	  the basic HTML formatting tags - bold, underline, pre, code, table (caption,
	  tr, td, th), etc. and only when really necessary. Better yet, consider using
	  the formatting tags in the Other Useful Tags section instead of HTML. Your
	  plain old text will be pretty nicely rendered into paragraphs with automatically
	  linked items and other bells and whistles. Keep your source readable: minimize
	  formatting.
        </p>
        <p align="right"><a href="#top"><font size="1">
          Return to Table of Contents
        </font></a></p>

        <h4> <a name="autolinking"></a> Autolinking </h4>
        <p>
          Class, method, variable, and other entity names will be automatically linked
	  in the documentation. To prevent this for a specific occurence of a name,
	  use a percent sign (%) in front of the name. For example, if you have a
	  class name "Histogram" and you want to prevent the linking of the word
	  "Histogram" in your description because it is not referring to the class but
	  to an actual histogram, use "%Histogram" to prevent the word from being linked.
        </p>
        <p>
          E-mail addresses and web addresses are also automatically linked. If a web
	  address is particularly long, put it on its own line.
        </p>
        <p align="right"><a href="#top"><font size="1">
          Return to Table of Contents
        </font></a></p>

        <h2> <a name="namingConventions">Naming Conventions</a> </h2>
        <p>
          This section will cover the proper way to name applications, classes,
          functions, variables, enumerations, and namespaces and files.
        </p>
        <p align="right"><a href="#top"><font size="1">
          Return to Table of Contents
        </font></a></p>

        <h3> <a name="applicationNames">Application Names</a> </h3>
        <p>
          Application names are always all lower case.  Existing parameter names
          should be checked before any new names are created.  (Plans to create a
          standard parameter name document are currently underway.)
        </p>
        <p align="right"><a href="#top"><font size="1">
          Return to Table of Contents
        </font></a></p>

        <h3> <a name="classNames">Class Names</a> </h3>
        <p>
          Classes should be upper camel case.  That is, the first letter should be
          capitalized and, if the class is a multi-word phrase, spaces are
          eliminated and each subsequent word should also begin with a capital
          letter.  As a general rule, class names should be nouns.
        </p>
        <p>
          <strong>**Note:</strong>  There are 3 existing classes in <strong>ISIS
          </strong> that do not follow this convention.  The <strong>iString
          </strong> and <strong>iTime</strong> classes needed a prefix to
          distinguish them from the C++ system string and time classes.  While
          these classes will not be changed at this time, in the event that
          similar classes are created, a capital letter <i>I</i> prefix should
          be used to remain consistent with the rest of <strong>ISIS</strong>.
        </p>
        <p>
          For example:
          <pre><strong>
            <font color="green">// Class names are upper camel case </font>
            ClassName
            IVector
            </strong></pre>
        </p>
        <p align="right"><a href="#top"><font size="1">
          Return to Table of Contents
        </font></a></p>

        <h3> <a name="memberFunctionNames">Member Function Names</a> </h3>
        <p>
          Member functions should be lower camel case, when possible.  That is, the
          first letter should be lower case and, if the class is a multi-word
          phrase, spaces are eliminated and each subsequent word should begin with a
          capital letter.  This should remain consistent throughout <strong>ISIS
          </strong> except in two cases.  Constructor and destructor methods must be
          upper camel case to match the class name.   The other case in which this
          convention may not be followed is when a method overrides or overloads an
          existing method from its parent package.  In these cases, clearly, the
          original method name must be kept.  For example, some packages use
          underscore separated naming.
        </p>
        <p>
          For example:
          <pre><strong>
            <font color="green">
            // Ordinary member function names are lower camel case.</font>
            functionName()
            <font color="green">
            // Constructor function names are upper camel case.</font>
            ClassName()
            <font color="green">
            // Overridden member function from third party package keeps the name of
            // the original function.</font>
            original_function_name()
          </strong></pre>
        </p>
        <p>
          All appropriate mutator and accessor methods should begin with
          <i>set</i>, <i>has</i>, or <i>is</i>.  The <i>get</i> prefix should
          not be used for accessor methods, with the exception of overridden
          methods inherited from third party libraries.
        </p>
        <p>
          For example:
          <pre><strong>
            <font color="green">
            // All mutator methods begin with the 'set' prefix.</font>
            void setSize();
            <font color="green">
            // The 'has' and 'is' prefixes are always used.</font>
            bool hasKeyword();
            bool isIgnored();
            <font color="green">
            // The 'get' prefix is not used for methods that retrieve</font>
            int size();
            Stretch stretch();
            <font color="green">
            // The 'get' prefix sometimes is required for overridden methods from
            // third party packages, such as the following method from QInputDialog.</font>
            QString getText();
          </strong></pre>
        </p>
        <p align="right"><a href="#top"><font size="1">
          Return to Table of Contents
        </font></a></p>

        <h3> <a name="dataMemberNames">Data Member Names</a> </h3>
        <p>
          <strong>ISIS</strong> currently uses three types of data members: <i>
          global</i>, <i>protected</i>, and <i>private</i>. Note that global and
          protected data members should be avoided and public member data in
          classes is not permitted in <strong>ISIS</strong>.
        </p>
        <p>
          Global variables should have the prefix <i>g_</i> followed by a lower
          camel case name. Protected and private variables should have the prefix
          <i>m_</i> followed by a lower camel case name.
        </p>
        <p>
          For example:
          <pre><strong>
            <font color="green">
            // Global variables use the 'g_' prefix.</font>
            g_globalVariable
            <font color="green">
            // Member variables use the 'm_' prefix.</font>
            m_memberVariable
          </strong></pre>
        </p>
        <p align="right"><a href="#top"><font size="1">
          Return to Table of Contents
        </font></a></p>

        <h3> <a name="localVariableNames">Local Variable Names</a> </h3>
        <p>
          Local variables should have lower camel case names.  Names for local
          variables should be "meaningful" and documented when necessary.  For
          example, names can describe what they represent or they can mimic the
          variable names of a mathematical formula or equation.  If a piece of code
          represents a formula, it is advisable to document the original formula
          location and, when known, the meaning of a variable.
        </p>
        <p>
         For example:
         <pre><strong>
         bool LambertAzimuthal::SetGround(const double lat,
                                          const double lon) {
           ...
         <font color="green">
           // Variable names mimic the names of mathematical
           // variables in the formula found at
           // http://mathworld.wolfram.com/LambertAzimuthalEqual-AreaProjection.html
           //  KEY:
           //    VARIABLE    MEANING
           //    phi         given latitude, in radians
           //    lambda      given longitude, in radians
           //    phi1        center latitude, in radians
           //    lambda0     center longitude, in radians</font>
           double phi = lat * PI / 180;
           double lambda = lon * PI / 180;
           double kPrime = sqrt(2/(1 + sin(phi)*sin(phi1)
                                     + cos(phi)*cos(phi1)
                                       *cos(lambda - lambda0);
           x = kPrime*cos(phi)*sin(lambda - lambda0);
           y = kPrime*(cos(phi1)
                       *sin(phi) - sin(phi1)*cos(phi)
                                   *cos(lambda - lambda0);
           ...
         }
         </strong></pre>
        </p>
        <p align="right"><a href="#top"><font size="1">
          Return to Table of Contents
        </font></a></p>

        <h3> <a name="enumerationNames">Enumeration Names</a> </h3>
        <p>
          Both the enumeration type name and enumerators inside the braces should be
          upper camel case.
        </p>
        <p>
          For example:<br />
          <code><strong>
            <blockquote>
              <font color="green"><br />
              /**<br />
               * Documentation for enumeration type.<br />
               */</font><br />
              <font color="purple"><b>enum</b></font> EnumTypeName {<br />
              <blockquote>
                FirstEnumerator,
                <font color="green">
                //!&lt; Documentation for first enumerator</font><br />
                SecondEnumerator
                <font color="green">
                //!&lt; Documentation for second enumerator</font><br />
              </blockquote>
            };<br />
            </blockquote>
          </strong></code>
        </p>
        <p align="right"><a href="#top"><font size="1">
          Return to Table of Contents
        </font></a></p>

        <h3> <a name="namespaceNames">Namespace Names</a> </h3>
        <p>
          Currently, the only namespace that is used is the <i>ISIS</i> namespace.
          However, if namespaces are added, they should be upper camel case.  Also
          note that any new namespaces should be inside the ISIS namespace.
        </p>
        <p>
          For example:
          <pre><strong>
            <font color="green">// Namespaces are upper camel case.</font>
            NamespaceName
          </strong></pre>
        </p>
        <p align="right"><a href="#top"><font size="1">
          Return to Table of Contents
        </font></a></p>

        <h3> <a name="sourceCodeFileNames">Source Code File Names</a> </h3>
        <p>
          In some situations, having multiple files with the same name (regardless
          of case sensitivity) might cause compiler errors.  To prevent these
          problems the use of the same file name anywhere in ISIS should be avoided,
          when possible.
        </p>
        <p align="right"><a href="#top"><font size="1">
          Return to Table of Contents
        </font></a></p>

        <h4> <a name="objectFileNames">Object File Names</a> </h4>
        <p>
          All class source files should match the name of the class and use a <i>
          .cpp</i> extension.  Header files also match the class name and use <i>.h</i> extention.
        </p>
        <p>
          For example:
          <pre><strong>
            <font color="green">
            // Class source files and headers files are upper camel case.</font>
            ClassName.cpp
            ClassName.h
          </strong></pre>
        </p>
        <p align="right"><a href="#top"><font size="1">
          Return to Table of Contents
        </font></a></p>

        <h4> <a name="applicationFileNames">Application File Names</a> </h4>
        <p>
          The application file that contains the main method should have the same
          name as the directory (i.e. the executable), use the .cpp extension and be
          all lower case.  The xml file should also have this name.
        </p>
        <p>
          For example:
          <pre><strong>
            <font color="green">
            // Application source files and xml files are lower case.</font>
            applicationname.cpp
            applicationname.xml
          </strong></pre>
        </p>
        <p align="right"><a href="#top"><font size="1">
          Return to Table of Contents
        </font></a></p>

        <h2> <a name="includes">#Includes</a> </h2>
        <h3> <a name="includeGuards">#Include Guards</a> </h3>
        <p>
          Every object header file should begin with a <font color="olive"><b>
          #include</b></font> guard to prevent double inclusions.  That is, the
          first two lines should define the class macro with the <font
          color="olive"><b>#ifndef</b></font> naming convention.  The last line of
          the header file should close the guard with <font color="olive"><b>#endif
          </b></font>.
        </p>
        <p>
          For example:
          <pre><strong>
            <font color="olive"><b>#ifndef</b></font> ClassName_h
            <font color="olive"><b>#define</b></font> ClassName_h
          </strong></pre>
        </p>
        <p align="right"><a href="#top"><font size="1">
          Return to Table of Contents
        </font></a></p>

        <h3> <a name="orderingLibraryIncludes">Ordering Library Includes</a> </h3>
        <p>
          No code should exist before <font color="olive"><b>#include</b></font>
          statements in <strong>ISIS</strong> files.  These <font color="olive"><b>
          #include</b></font> statements should be separated into groups of
          libraries by a single blank line and each group should be ordered
          alphabetically.  All <font color="olive"><b>#include</b></font> statements
          for third party libraries (i.e. not in the ISIS namespace) should use
          angle brackets, not quotation marks.
        </p>
        <p>
          For example:
          <pre><strong>
            <font color="green"> // Correct form </font>
            <font color="olive"><b>#include</b></font> &lt;cmath&gt;

            <font color="green"> // Incorrect form </font>
            <font color="olive"><b>#include</b></font> "math.h"
          </strong></pre>
        </p>
        <p>
          The order of the groups are defined below:
          <ol>
          <li>
            ISIS, IsisDebug and ThisClass header files.
          </li>
            <dd>
              When needed, the Isis.h and IsisDebug.h should
              be the first includes.  Next, for object *.cpp
              files, include the header for the class.
            </dd>
          <li> C++ standard libraries.  </li>
            <dd>
              Examples include cstdlib, iostream, string,
              vector, map, cmath, and algorithm.
            </dd>
          <li> Qt libraries </li>
          <li>
            Other third party groups can be listed in any order
          </li>
            <dd>
              Examples include NAIF libraries, Boost, GNU
              Scientific Library (GSL), Geometry Engine Open
              Source (GEOS), and Google Protocol Buffers
            </dd>
          <li> Other ISIS headers </li>
          </ol>
        </p>
        <p>
          Object Header Example:
          <pre><strong>
            <font color="green">
            // The parent is always included in the header</font>
            <font color="olive"><b>#include</b></font> "ParentClass.h"
            <font color="green">
            // Some STL types are declared in the header</font>
            <font color="olive"><b>#include</b></font> &lt;string&gt;
            <font color="olive"><b>#include</b></font> &lt;vector&gt;
            <font color="green">
            // Data member objects and objects used in inline functions
            // are included in the header</font>
            <font color="olive"><b>#include</b></font> "PvlGroup.h"
            <font color="olive"><b>#include</b></font> "WorldMapper.h"

            <font color="purple"><b>namespace</b></font> ISIS {
              class Displacement;
              class Pvl;
              ...
          </strong></pre>
        </p>
        <p>
          Object Implementation File Example:
          <pre><strong>
            <font color="olive"><b>#include</b></font> "IsisDebug.h"
            <font color="olive"><b>#include</b></font> "ThisClass.h"

            <font color="olive"><b>#include</b></font> &lt;string&gt;
            <font color="olive"><b>#include</b></font> &lt;vector&gt;

            <font color="olive"><b>#include</b></font> &lt;QList&gt;
            <font color="olive"><b>#include</b></font> &lt;QPair&gt;

            <font color="olive"><b>#include</b></font> &lt;SpiceUser.h&gt;

            <font color="olive"><b>#include</b></font> "Constants.h"
            <font color="olive"><b>#include</b></font> "Displacement.h"
            <font color="olive"><b>#include</b></font> "IException.h"
            <font color="olive"><b>#include</b></font> "Pvl.h"
            <font color="olive"><b>#include</b></font> "WorldMapper.h"

            <font color="purple"><b>using namespace</b></font> std;
            <font color="purple"><b>namespace</b></font> ISIS {
              ...
          </strong></pre>
        </p>
        <p>
          Application Main File Example:
          <pre><strong>
            <font color="olive"><b>#include</b></font> "Isis.h"

            <font color="olive"><b>#include</b></font> &lt;map&gt;

            <font color="olive"><b>#include</b></font> "Application.h"
            <font color="olive"><b>#include</b></font> "IException.h"
            <font color="olive"><b>#include</b></font> "iString.h"
            <font color="olive"><b>#include</b></font> "Process.h"
            <font color="olive"><b>#include</b></font> "UserInterface.h"

            <font color="purple"><b>using namespace</b></font> std;
            <font color="purple"><b>using namespace</b></font> ISIS;
            <font color="purple"><b>void</b></font> IsisMain() {
              ...
          </strong></pre>
        </p>
        <p align="right"><a href="#top"><font size="1">
          Return to Table of Contents
        </font></a></p>

        <h3> <a name="forwardClassDeclarations">Forward Class Declarations</a> </h3>
        <p>
          Forward class declarations are statements in a header file that let the
          compiler know that a class will be used in this file and will be defined
          later (when included in the implementation file).  When appropriate,
          forward class declarations should be used in place of <font color="olive">
          <b>#include</b></font> statements in a header file.  This can minimize
          problems associated with include chains.  Any function parameter, return
          value, pointer or reference can take a forward declaration.  Here are some
          examples when the header file must have a <font color="olive"><b>#include
          </b></font> rather than a forward class declaration:
          <ul>
          <li> When an object is declared or implemented in the header file. </li>
          <li> Certain STL types, like string (and vector?) must also be included
               in the header file.  Note that this does not include primitive
               types like int, double, etc.  </li>
          <li> If a class is inheriting another class, then the parent must be
               included. </li>
          <li> Parameters, returns, or data members used by inline functions must
               be included. </li>
          </ul>
          Note that if a data member is declared as a pointer to avoid a <font
          color="olive"><b>#include</b></font> statement in the header, then the
          copy constructor, assignment operator and destructor must be implemented.
        </p>
        <p align="right"><a href="#top"><font size="1">
          Return to Table of Contents
        </font></a></p>

        <h2> <a name="documentation">Documentation</a> </h2>
        <p>
          Documentation for <strong>ISIS</strong> is done using Doxygen.
        </p>
        <p align="right"><a href="#top"><font size="1">
          Return to Table of Contents
        </font></a></p>

        <h3> <a name="historyEntries">History Entries</a> </h3>
        <p>
          Any time a method is added to a class, the header file class history
          should include an entry indicating this change with the name of the method
          indicated with empty parentheses.
        </p>
        <p align="right"><a href="#top"><font size="1">
          Return to Table of Contents
        </font></a></p>

        <h4> <a name="documentationFormatting">Formatting</a> </h4>
        <p>
          All history entries should be below an internal tag and indented 2 spaces
          from the start of the internal tag.  Doxygen history entries in <strong>
          ISIS</strong> should begin with the date of the form YYYY-MM-DD, followed
          by the name of the programmer(s) responsible for the changes.  This is
          followed by a dash, padded by a space on each side before the comment.
          When wrapping a Doxygen history entry, the subsequent lines should begin 4
          spaces after the first name of the first programmer submitting the change.
          This will make history entries easier to read.
        </p>
        <p>
          For example:
          <pre><strong>
            <font color="green">
            /**
             *
             * @internal
             *   @history 2011-01-01 Mickey Mouse - Original version.
             *   @history 2011-01-02 Mickey Mouse and Donald Duck - Added new
             *                           method, SetKeyword()
             */</font>
          </strong></pre>
        </p>
        <p align="right"><a href="#top"><font size="1">
          Return to Table of Contents
        </font></a></p>

        <h3> <a name="authorTag">Author Tag</a> </h3>
        <p>
          The Doxygen author tag is required for class documentation and optional
          for method documentation.
        </p>
        <p>
          For example:
          <pre><strong>
            <font color="green">
            /**
             *
             * @author 2011-01-01 Mickey Mouse
             *
             * @internal
             *   @history 2011-01-01 Mickey Mouse - Original version.
             *   @history 2011-01-02 Mickey Mouse and Donald Duck - Added new
             *                           method, SetKeyword()
             */</font>
          </strong></pre>
        </p>
        <p align="right"><a href="#top"><font size="1">
          Return to Table of Contents
        </font></a></p>

        <h3> <a name="makefileComments">Makefile Comments</a> </h3>
        <p>
          Every Makefile for an application test or category test should have
          a comment on top explaining the purpose of the test case.
        </p>
        <p>
          For example:
          <pre><strong>
            # Test for bandnorm with default parameters:
            #         AVERAGE=BAND</strong>
            APPNAME = bandnorm

            include $(ISISROOT)/make/isismake.tsts

            commands:
                              $(APPNAME) from=$(INPUT)/f348b26.cub \
                              to=$(OUTPUT)/bandnormTruth.cub > /dev/null;
          </pre>
        </p>
        <p align="right"><a href="#top"><font size="1">
          Return to Table of Contents
        </font></a></p>

        <h2> <a name="sourceCode">Source Code</a> </h2>
        <h3> <a name="structures">Structures</a> </h3>
        <p>
          The <font color="purple"><b>struct</b></font> keyword is not all together
          disallowed in <strong>ISIS</strong>, however there are restrictions on
          its use.  The use of a structure is prohibited from the public API in
          <strong>ISIS</strong>, this would include global definitions in a header
          file.  That is, any structures in a class must be private or protected.
          Structures can also be used in applications.  A structure that contains
          only data is acceptable in ISIS.  Structures in <strong>ISIS
          </strong> cannot have methods.
        </p>
        <p align="right"><a href="#top"><font size="1">
          Return to Table of Contents
        </font></a></p>

        <h3> <a name="implementationFiles">Implementation Files</a> </h3>
        <p>
          Using statements should be placed in the implementation files after
          <font color="olive"><b>#include</b></font> statements.
        </p>
        <p align="right"><a href="#top"><font size="1">
          Return to Table of Contents
        </font></a></p>

        <h3> <a name="supportClassFiles">Support Class Files</a> </h3>
        <p>
          With the exception of inner (or nested) classes, all classes should
          be contained within their own files.  Each class should be split into
          two files, header and implementation file, unless it is proven that
          it is faster to inline all functions.  Support classes are object
          files and so must have the name of the contained class.  Also, the
          name of support classes should reflect the application or object
          that it supports.
        </p>
        <p>
          For example:
          <pre><strong>
            <font color="green">
            // Inside VimsCamera object directory.  Notice the <i>Vims</i> prefix on
            // this class name so that there is no danger of using an existing
            // class name from another camera model that has a sky map.</font>
            VimsSkyMap.cpp
            <font color="green">
            // Inside cnetref application directory.</font>
            CnetRefByEmission.cpp
          </strong></pre>
        </p>
        <p align="right"><a href="#top"><font size="1">
          Return to Table of Contents
        </font></a></p>

        <h3> <a name="headerFiles">Header Files</a> </h3>
        <p>
          In general, header files should only include prototypes and declarations.
          Functions should not be implemented in the header file unless it is
          necessary or proven faster.
        </p>
        <p>
          Using statements should not be used in header files.
        </p>
        <p align="right"><a href="#top"><font size="1">
          Return to Table of Contents
        </font></a></p>

        <h4> <a name="inlineMembers">Inline Member Functions</a> </h4>
        <p>
          The <font color="purple"><b>inline</b></font> keyword should only be used
          if a function is implemented in the header.  Therefore, inline functions
          are only used when necessary or proven faster.
        </p>
        <p align="right"><a href="#top"><font size="1">
          Return to Table of Contents
        </font></a></p>

        <h4><a name="constKeyword"><font color="purple"><b>
          const</b></font> Keyword</a></h4>
        <p>
          The <font color="purple"><b>const</b></font> keyword should be used on any
          function that does not change the value of data members of the class. If
          necessary, an identical overridden version of the method should be written
          without the <font color="purple"><b>const</b></font> keyword.
        </p>
        <p align="right"><a href="#top"><font size="1">
          Return to Table of Contents
        </font></a></p>

        <h3><a name="declaring">Declaring &amp; Initializing Variables</a></h3>
        <h4><a name="localVariables">Local Variable Declarations</a></h4>
        <p>
          It is recommended that <i>just in time</i> declaration is used for local
          variables whenever possible.
        </p>
        <p align="right"><a href="#top"><font size="1">
          Return to Table of Contents
        </font></a></p>

        <h4> <a name="initializing">Initializing Variables</a> </h4>
        <p>
          Primitive variable types should be initialized using an equal sign, not
          parentheses.
        </p>
        <p>
            For example:
            <pre><strong>
              <font color="green">// Initialize primitives with = sign.</font>
              int i = 0;

              <font color="green">// Incorrect form - Do not initialize
              // primitive with parentheses.</font>
              int i(0);
            </strong></pre>
        </p>
        <p>
          All class members should be initialized in the class constructor.
          Pointers must be initialized to NULL before they are set to any other
          value, especially before use of the keyword <font color="purple"><b>new
          </b></font> and must be set back to NULL after they are deleted.
        </p>
        <p>
          For example:
          <pre><strong>
            ClassName::ClassName() {
              m_pointerVariable = NULL;
              <font color="purple"><b>if</b></font> (condition) {
                m_pointerVariable = <font color="purple"><b>new</b></font> OtherClass();
              }
              <font color="purple"><b>else</b></font> {
                m_pointerVariable = <font color="purple"><b>new</b></font> ThirdClass();
              }
            }

            ClassName::~ClassName() {
              <font color="purple"><b>delete</b></font> m_pointerVariable;
              m_pointerVariable = <font color="brown"><b>NULL</b></font>;
            }
          </strong></pre>
        </p>
        <p align="right"><a href="#top"><font size="1">
          Return to Table of Contents
        </font></a></p>

        <h3><a name="methodOrdering">Method Order in Implementation File</a></h3>
        <p>
          The methods in the <i>*.cpp</i> file should be ordered as the author finds
          logical.  New methods added to a class should attempt to follow the same
          ordering.  Some common styles of format are
        </p>
          <ol>
          <li>In the same order as the header file.</li>
          <li>
            Ordered by usage, where private methods are often listed directly
            after the public methods that call them.</li>
          </ol>
          <p align="right"><a href="#top"><font size="1">
            Return to Table of Contents
          </font></a></p>

        <h2><a name="strings">Strings</a></h2>
        <h3><a name="IString">IString</a></h3>
        <p>
          Instantiating the IString class is no longer recommended. This class may be given
          a couple of static methods that operate with QStrings in the future, but for all
          other purposes consider IString to be deprecated. IString should never be in the
          public API of new code.
        </p>
        <p align="right"><a href="#top"><font size="1">
          Return to Table of Contents
        </font></a></p>
        <h3><a name="QString">QString</a></h3>
        <p>
          The QString class does most of what "iString" used to do for us. QString is the
          string we should always expect in our public API, with any conversions for the
          purposes with interfacing with other APIs to be done inside of the methods which
          interact with the other APIs. Please use QString wherever possible and reasonable.

          This was motivated by the following:
          <ul>
            <li>
              There is minimal compatibility with the Qt interface, despite operators to QString and
              a constructor that converts from QString.
            </li>
            <li>
              There was no obvious choice for which string class to use in new classes (in many
              cases) because if you are writing a qisis app, you want QStrings, but most
              of ISIS uses std::string and we should choose iString most of the time because we
              implemented it.
            </li>
            <li>
              There have been multiple instances of taking 3 lines of code to get a string from type
              A to type B in qisis code -- a ridiculous amount of effort for what was needed.
            </li>
            <li>
              Ambiguous conversions because of the implicit casting operators in iString which
              have shown themselves to be an issue in cases like PvlKeyword - getting the API
              correct is overly difficult, and it's no longer transparent what you're doing when you
              do something like m_vector.push_back(someIString) -- m_vector could be a vector of
              bools, ints, doubles, strings, etc...
            </li>
            <li>
              Large parts of our string-related code is extremely over-complicated due to the
              limited parsing API we provided.
            </li>
          </ul>
        </p>
        <p align="right"><a href="#top"><font size="1">
          Return to Table of Contents
        </font></a></p>
        <h3><a name="std::string">std::string</a></h3>
        <p>
          The STL string class doesn't provide an easy to use, intuitive interface for our purposes
          (parsing methods are global functions and cryptic, no unicode support without going to
          std::wstring, no arg(), split()/join(), tr(), etc... available). Many APIs expect
          std::string or const char * as input. If your class is interfacing with one of these APIs,
          please have your class take QStrings as arguments and convert to a std::string with
          QString::toStdString(). If you need to convert to a const char *, you can also
          use QString().toLatin1().data().
        </p>
        <p align="right"><a href="#top"><font size="1">
          Return to Table of Contents
        </font></a></p>
        <h3><a name="otherStrings">Other Strings</a></h3>
        <p>
          Other string classes should be handled like we're handing std::string, but a function may
          be created in the IString file to convert to the new type. For example, if there was a
          "somelib::AString" class, providing: somelib::AString toAString(QString) in IString.h is
          okay.
        </p>
        <p align="right"><a href="#top"><font size="1">
          Return to Table of Contents
        </font></a></p>

        <h2><a name="todo">TO DO</a></h2>
          <ul>
          <li>
	    Improve examples - possibly a reference to a single canonical file in
	    the source tree
	  </li>
          <li> Binary Operators - Determine padding. </li>
          <li> Complete History and Documentation section
            <ol>
              <li>
                Determine when must we use tags @brief, @description,
                @param, @param[out], @return, @ingroup, @see, @throw
              </li>
              <li>
                Determine how to document the return value and submit new groups.
              </li>
              <li>
                Determine when we can or should use other doxygen documentation styles,
                such as single line documentation (preceding a member)
                <font color="green">//!</font>,
                inline documentation (following a member on the same line)
                <font color="green">//!&lt;</font>, and
                postfix block documentation (following a member, may be multi-line)
                <font color="green">/**&lt; comment */</font>.
              </li>
              <li>
                Will we require "make html" to return no errors to check in code?
              </li>
              <li>
                Requirements/recommendations for documenting/history of xml files.
              </li>
            </ol>
          </li>
          <li> Consider separating documentation standards from coding standards.</li>
          <li> Consider separating style guidelines from coding standards.</li>
          <li>
            Create links for each section to a page that shows justification
            for the standards chosen.
          </li>
          <li>
            Should  the Disclaimer be required for all ISIS files?
          </li>
          <li>
            Should prohibition against SVN keywords be added?
          </li>
          <li>
            Mention of @file and (new?) copyright header?
          </li>
          </ul>
      </body>

      <type>HTML</type>

      <source>
        <filename>CodingStandards.html</filename>
      </source>
    </file>
  </files>

  <category>
    <categoryItem>reference</categoryItem>
  </category>

  <audience>
    <target>intermediate</target>
  </audience>

  <bibliography>
    <title>ISIS Coding Standards and Style Guide</title>
    <brief>Coding standards for ISIS developers (effective February 1, 2012).</brief>
    <description>
      This document will describe the coding standards for maintaining <strong>
      ISIS</strong> source code.  It was created to ensure that the <strong>
      ISIS</strong> package is programmed for consistency, readability and ease
      of future maintenance. This document does not attempt to address every
      possible issue. However, the guidelines that have been outlined should not
      be deviated from, except under special situations.
    </description>
    <author>Jeannie Backer</author>
    <date>2012-01-30</date>
  </bibliography>

  <history>
    <change name="Jeannie Backer" date="2012-01-30">
      Original version
    </change>
    <change name="Jeannie Backer" date="2012-02-23">
      Clarified the language for Member Function Names.  Fixed typos.
    </change>
    <change name="Jeannie Backer" date="2012-04-16">
      Replaced references to iException with IException due to class name
      change.
    </change>
    <change name="Jeannie Backer" date="2012-04-19">
      changed line length limit from 80 to 100 columns.
    </change>
    <change name="Steven Lambright and Stuart Sides" date="2012-07-31">
      Added Pointers and References under formatting
    </change>
    <change name="Steven Lambright" date="2012-10-10">
      Added Strings section
    </change>
    <change name="JP Bonn" date="2017-02-21">
      Incorporated sections of former Style Guide
    </change>
  </history>

</documentation>
